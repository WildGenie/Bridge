// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.InteropServices;
using System.Diagnostics.SymbolStore;
using System.Resources;
using System.IO;
using System.Collections.Generic;

namespace System.Reflection.Emit {

    public class ModuleBuilder {
        public virtual string FullyQualifiedName => default( string );

        public virtual Assembly Assembly => default( Assembly );

        public virtual string Name => default( string );

        public virtual string ScopeName => default( string );

        public virtual Guid ModuleVersionId => default( Guid );

        public virtual int MetadataToken => default( int );

        public bool IsTransient() {
            return default( bool );
        }

        public void CreateGlobalFunctions() { }

        public FieldBuilder DefineInitializedData( string name, byte[] data, FieldAttributes attributes ) {
            return default( FieldBuilder );
        }

        public FieldBuilder DefineUninitializedData( string name, int size, FieldAttributes attributes ) {
            return default( FieldBuilder );
        }

        public TypeBuilder DefineType( string name ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr, Type parent ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr, Type parent, Type[] interfaces ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr, Type parent, int typesize ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr, Type parent, PackingSize packsize ) {
            return default( TypeBuilder );
        }

        public TypeBuilder DefineType( string name, TypeAttributes attr, Type parent, PackingSize packingSize,
            int typesize ) {
            return default( TypeBuilder );
        }

        public MethodInfo GetArrayMethod( Type arrayClass, string methodName, CallingConventions callingConvention,
            Type returnType, Type[] parameterTypes ) {
            return default( MethodInfo );
        }

        public EnumBuilder DefineEnum( string name, TypeAttributes visibility, Type underlyingType ) {
            return default( EnumBuilder );
        }

        public virtual Type GetType( string className ) {
            return default( Type );
        }

        public virtual Type GetType( string className, bool ignoreCase ) {
            return default( Type );
        }

        public virtual Type GetType( string className, bool throwOnError, bool ignoreCase ) {
            return default( Type );
        }

        public void SetCustomAttribute( CustomAttributeBuilder customBuilder ) { }
        public void SetCustomAttribute( ConstructorInfo con, byte[] binaryAttribute ) { }

        public ISymbolWriter GetSymWriter() {
            return default( ISymbolWriter );
        }

        public ISymbolDocumentWriter
            DefineDocument( string url, Guid language, Guid languageVendor, Guid documentType ) {
            return default( ISymbolDocumentWriter );
        }

        public virtual Type[] GetTypes() {
            return default( Type[] );
        }

        public IResourceWriter DefineResource( string name, string description, ResourceAttributes attribute ) {
            return default( IResourceWriter );
        }

        public IResourceWriter DefineResource( string name, string description ) {
            return default( IResourceWriter );
        }

        public void DefineUnmanagedResource( byte[] resource ) { }
        public void DefineUnmanagedResource( string resourceFileName ) { }
        public void DefineManifestResource( string name, Stream stream, ResourceAttributes attribute ) { }
        public void SetSymCustomAttribute( string name, byte[] data ) { }
        public void SetUserEntryPoint( MethodInfo entryPoint ) { }

        public MethodToken GetMethodToken( MethodInfo method ) {
            return default( MethodToken );
        }

        public MethodToken GetMethodToken( MethodInfo method, IEnumerable<Type> optionalParameterTypes ) {
            return default( MethodToken );
        }

        public MethodToken GetArrayMethodToken( Type arrayClass, string methodName,
            CallingConventions callingConvention, Type returnType, Type[] parameterTypes ) {
            return default( MethodToken );
        }

        public MethodToken GetConstructorToken( ConstructorInfo con ) {
            return default( MethodToken );
        }

        public MethodToken GetConstructorToken( ConstructorInfo constructor,
            IEnumerable<Type> optionalParameterTypes ) {
            return default( MethodToken );
        }

        public FieldToken GetFieldToken( FieldInfo field ) {
            return default( FieldToken );
        }

        public SignatureToken GetSignatureToken( byte[] sigBytes, int sigLength ) {
            return default( SignatureToken );
        }

        public SignatureToken GetSignatureToken( SignatureHelper sigHelper ) {
            return default( SignatureToken );
        }

        public StringToken GetStringConstant( string str ) {
            return default( StringToken );
        }

        public TypeToken GetTypeToken( Type type ) {
            return default( TypeToken );
        }

        public TypeToken GetTypeToken( string name ) {
            return default( TypeToken );
        }

        public virtual bool IsResource() {
            return default( bool );
        }

        public virtual FieldInfo ResolveField( int metadataToken, Type[] genericTypeArguments,
            Type[] genericMethodArguments ) {
            return default( FieldInfo );
        }

        public virtual MemberInfo ResolveMember( int metadataToken, Type[] genericTypeArguments,
            Type[] genericMethodArguments ) {
            return default( MemberInfo );
        }

        public virtual MethodBase ResolveMethod( int metadataToken, Type[] genericTypeArguments,
            Type[] genericMethodArguments ) {
            return default( MethodBase );
        }

        public virtual string ResolveString( int metadataToken ) {
            return default( string );
        }

        public virtual byte[] ResolveSignature( int metadataToken ) {
            return default( byte[] );
        }

        public virtual Type ResolveType( int metadataToken, Type[] genericTypeArguments,
            Type[] genericMethodArguments ) {
            return default( Type );
        }

        public override bool Equals( object obj ) {
            return default( bool );
        }

        public override int GetHashCode() {
            return default( int );
        }

        public virtual bool IsDefined( Type attributeType, bool inherit ) {
            return default( bool );
        }

        public virtual object[] GetCustomAttributes( bool inherit ) {
            return default( object[] );
        }

        public virtual object[] GetCustomAttributes( Type attributeType, bool inherit ) {
            return default( object[] );
        }

        public virtual FieldInfo GetField( string name, BindingFlags bindingAttr ) {
            return default( FieldInfo );
        }

        public virtual FieldInfo[] GetFields( BindingFlags bindingFlags ) {
            return default( FieldInfo[] );
        }

        public virtual MethodInfo[] GetMethods( BindingFlags bindingFlags ) {
            return default( MethodInfo[] );
        }
    }

}
