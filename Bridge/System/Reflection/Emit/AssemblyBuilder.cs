// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Generic;
using System.Resources;
using System.IO;
using System.Globalization;

namespace System.Reflection.Emit {

    public class AssemblyBuilder {
        public virtual string CodeBase => default( string );

        public virtual MethodInfo EntryPoint => default( MethodInfo );

        public virtual string Location => default( string );

        public virtual string ImageRuntimeVersion => default( string );

        public virtual bool ReflectionOnly => default( bool );

        public virtual Module ManifestModule => default( Module );

        public virtual bool GlobalAssemblyCache => default( bool );

        public virtual bool IsDynamic => default( bool );

        public virtual string FullName => default( string );

        public void AddResourceFile( string name, string fileName ) { }
        public void AddResourceFile( string name, string fileName, ResourceAttributes attribute ) { }

        public static AssemblyBuilder DefineDynamicAssembly( AssemblyName name, AssemblyBuilderAccess access ) {
            return default( AssemblyBuilder );
        }

        public static AssemblyBuilder DefineDynamicAssembly( AssemblyName name, AssemblyBuilderAccess access,
            IEnumerable<CustomAttributeBuilder> assemblyAttributes ) {
            return default( AssemblyBuilder );
        }

        public ModuleBuilder DefineDynamicModule( string name ) {
            return default( ModuleBuilder );
        }

        public ModuleBuilder DefineDynamicModule( string name, bool emitSymbolInfo ) {
            return default( ModuleBuilder );
        }

        public ModuleBuilder DefineDynamicModule( string name, string fileName ) {
            return default( ModuleBuilder );
        }

        public ModuleBuilder DefineDynamicModule( string name, string fileName, bool emitSymbolInfo ) {
            return default( ModuleBuilder );
        }

        public IResourceWriter DefineResource( string name, string description, string fileName ) {
            return default( IResourceWriter );
        }

        public IResourceWriter DefineResource( string name, string description, string fileName,
            ResourceAttributes attribute ) {
            return default( IResourceWriter );
        }

        public void DefineUnmanagedResource( byte[] resource ) { }
        public void DefineUnmanagedResource( string resourceFileName ) { }
        public void DefineVersionInfoResource() { }

        public void DefineVersionInfoResource( string product, string productVersion, string company, string copyright,
            string trademark ) { }

        public ModuleBuilder GetDynamicModule( string name ) {
            return default( ModuleBuilder );
        }

        public virtual Type[] GetExportedTypes() {
            return default( Type[] );
        }

        public virtual FileStream GetFile( string name ) {
            return default( FileStream );
        }

        public virtual FileStream[] GetFiles( bool getResourceModules ) {
            return default( FileStream[] );
        }

        public virtual ManifestResourceInfo GetManifestResourceInfo( string resourceName ) {
            return default( ManifestResourceInfo );
        }

        public virtual string[] GetManifestResourceNames() {
            return default( string[] );
        }

        public virtual Stream GetManifestResourceStream( string name ) {
            return default( Stream );
        }

        public virtual Stream GetManifestResourceStream( Type type, string name ) {
            return default( Stream );
        }

        public void Save( string assemblyFileName, PortableExecutableKinds portableExecutableKind,
            ImageFileMachine imageFileMachine ) { }

        public void Save( string assemblyFileName ) { }
        public void SetEntryPoint( MethodInfo entryMethod ) { }
        public void SetEntryPoint( MethodInfo entryMethod, PEFileKinds fileKind ) { }
        public void SetCustomAttribute( CustomAttributeBuilder customBuilder ) { }
        public void SetCustomAttribute( ConstructorInfo con, byte[] binaryAttribute ) { }

        public virtual Type GetType( string name, bool throwOnError, bool ignoreCase ) {
            return default( Type );
        }

        public virtual Module GetModule( string name ) {
            return default( Module );
        }

        public virtual Module[] GetModules( bool getResourceModules ) {
            return default( Module[] );
        }

        public virtual AssemblyName GetName( bool copiedName ) {
            return default( AssemblyName );
        }

        public virtual AssemblyName[] GetReferencedAssemblies() {
            return default( AssemblyName[] );
        }

        public virtual Module[] GetLoadedModules( bool getResourceModules ) {
            return default( Module[] );
        }

        public virtual Assembly GetSatelliteAssembly( CultureInfo culture ) {
            return default( Assembly );
        }

        public virtual Assembly GetSatelliteAssembly( CultureInfo culture, Version version ) {
            return default( Assembly );
        }

        public override bool Equals( object obj ) {
            return default( bool );
        }

        public override int GetHashCode() {
            return default( int );
        }

        public virtual bool IsDefined( Type attributeType, bool inherit ) {
            return default( bool );
        }

        public virtual object[] GetCustomAttributes( bool inherit ) {
            return default( object[] );
        }

        public virtual object[] GetCustomAttributes( Type attributeType, bool inherit ) {
            return default( object[] );
        }

        public virtual Type[] GetTypes( bool exportedOnly ) {
            return default( Type[] );
        }
    }

}
