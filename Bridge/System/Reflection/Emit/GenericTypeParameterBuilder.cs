// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Globalization;

namespace System.Reflection.Emit {

    public class GenericTypeParameterBuilder : TypeInfo {
        public virtual Type UnderlyingSystemType => default( Type );

        public new virtual Assembly Assembly => default( Assembly );

        public new virtual string AssemblyQualifiedName => default( string );

        public new virtual Type BaseType => default( Type );

        public new virtual string FullName => default( string );

        public virtual Guid GUID => default( Guid );

        public new virtual string Name => default( string );

        public new virtual string Namespace => default( string );

        public virtual Module Module => default( Module );

        public new virtual Type DeclaringType => default( Type );

        public virtual Type ReflectedType => default( Type );

        public new virtual bool ContainsGenericParameters => default( bool );

        public new virtual bool IsGenericParameter => default( bool );

        public new virtual bool IsGenericType => default( bool );

        public new virtual bool IsGenericTypeDefinition => default( bool );

        public virtual GenericParameterAttributes GenericParameterAttributes => default( GenericParameterAttributes );

        public new virtual int GenericParameterPosition => default( int );

        public new virtual MethodBase DeclaringMethod => default( MethodBase );

        public void SetBaseTypeConstraint( Type baseTypeConstraint ) { }
        public void SetInterfaceConstraints( Type[] interfaceConstraints ) { }
        public void SetGenericParameterAttributes( GenericParameterAttributes genericParameterAttributes ) { }

        public new virtual bool IsSubclassOf( Type c ) {
            return default( bool );
        }

        public virtual ConstructorInfo[] GetConstructors( BindingFlags bindingAttr ) {
            return default( ConstructorInfo[] );
        }

        public new virtual EventInfo GetEvent( string name, BindingFlags bindingAttr ) {
            return default( EventInfo );
        }

        public new virtual EventInfo[] GetEvents() {
            return default( EventInfo[] );
        }

        public new virtual EventInfo[] GetEvents( BindingFlags bindingAttr ) {
            return default( EventInfo[] );
        }

        public new virtual FieldInfo GetField( string name, BindingFlags bindingAttr ) {
            return default( FieldInfo );
        }

        public new virtual FieldInfo[] GetFields( BindingFlags bindingAttr ) {
            return default( FieldInfo[] );
        }

        public virtual Type GetInterface( string name, bool ignoreCase ) {
            return default( Type );
        }

        public new virtual Type[] GetInterfaces() {
            return default( Type[] );
        }

        public new virtual MemberInfo[] GetMembers( BindingFlags bindingAttr ) {
            return default( MemberInfo[] );
        }

        public virtual MemberInfo[] GetMember( string name, MemberTypes type, BindingFlags bindingAttr ) {
            return default( MemberInfo[] );
        }

        public new virtual MethodInfo[] GetMethods( BindingFlags bindingAttr ) {
            return default( MethodInfo[] );
        }

        public new virtual Type GetNestedType( string name, BindingFlags bindingAttr ) {
            return default( Type );
        }

        public new virtual Type[] GetNestedTypes( BindingFlags bindingAttr ) {
            return default( Type[] );
        }

        public new virtual PropertyInfo[] GetProperties( BindingFlags bindingAttr ) {
            return default( PropertyInfo[] );
        }

        public new virtual bool IsAssignableFrom( Type c ) {
            return default( bool );
        }

        public override bool IsAssignableFrom( TypeInfo typeInfo ) {
            return default( bool );
        }

        public new virtual bool IsInstanceOfType( object o ) {
            return default( bool );
        }

        public virtual object InvokeMember( string name, BindingFlags invokeAttr, Binder binder, object target,
            object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters ) {
            return default( object );
        }

        public new virtual Type GetElementType() {
            return default( Type );
        }

        public new virtual bool IsDefined( Type attributeType, bool inherit ) {
            return default( bool );
        }

        public new virtual object[] GetCustomAttributes( bool inherit ) {
            return default( object[] );
        }

        public new virtual object[] GetCustomAttributes( Type attributeType, bool inherit ) {
            return default( object[] );
        }

        public virtual InterfaceMapping GetInterfaceMap( Type interfaceType ) {
            return default( InterfaceMapping );
        }

        public new virtual Type[] GetGenericArguments() {
            return default( Type[] );
        }

        public new virtual Type GetGenericTypeDefinition() {
            return default( Type );
        }

        public virtual Type[] GetGenericParameterConstraints() {
            return default( Type[] );
        }

        public void SetCustomAttribute( CustomAttributeBuilder customBuilder ) { }
        public void SetCustomAttribute( ConstructorInfo con, byte[] binaryAttribute ) { }

        public override string ToString() {
            return default( string );
        }

        public override bool Equals( object o ) {
            return default( bool );
        }

        public override int GetHashCode() {
            return default( int );
        }

        public new virtual Type MakeArrayType() {
            return default( Type );
        }

        public new virtual Type MakeArrayType( int rank ) {
            return default( Type );
        }

        public virtual Type MakeByRefType() {
            return default( Type );
        }

        public new virtual Type MakeGenericType( Type[] typeArguments ) {
            return default( Type );
        }

        public virtual Type MakePointerType() {
            return default( Type );
        }
    }

}
