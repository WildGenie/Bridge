// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Generic;

namespace System.Reflection {

    public abstract class TypeInfo : Type, IReflectableType {
        public virtual Type[] GenericTypeParameters => default( Type[] );

        public virtual IEnumerable<ConstructorInfo> DeclaredConstructors => default( IEnumerable<ConstructorInfo> );

        public virtual IEnumerable<EventInfo> DeclaredEvents => default( IEnumerable<EventInfo> );

        public virtual IEnumerable<FieldInfo> DeclaredFields => default( IEnumerable<FieldInfo> );

        public virtual IEnumerable<MemberInfo> DeclaredMembers => default( IEnumerable<MemberInfo> );

        public virtual IEnumerable<MethodInfo> DeclaredMethods => default( IEnumerable<MethodInfo> );

        public virtual IEnumerable<TypeInfo> DeclaredNestedTypes => default( IEnumerable<TypeInfo> );

        public virtual IEnumerable<PropertyInfo> DeclaredProperties => default( IEnumerable<PropertyInfo> );

        public virtual IEnumerable<Type> ImplementedInterfaces => default( IEnumerable<Type> );

        public virtual Type AsType() {
            return default( Type );
        }

        public virtual bool IsAssignableFrom( TypeInfo typeInfo ) {
            return default( bool );
        }

        public virtual EventInfo GetDeclaredEvent( string name ) {
            return default( EventInfo );
        }

        public virtual FieldInfo GetDeclaredField( string name ) {
            return default( FieldInfo );
        }

        public virtual MethodInfo GetDeclaredMethod( string name ) {
            return default( MethodInfo );
        }

        public virtual IEnumerable<MethodInfo> GetDeclaredMethods( string name ) {
            return default( IEnumerable<MethodInfo> );
        }

        public virtual TypeInfo GetDeclaredNestedType( string name ) {
            return default( TypeInfo );
        }

        public virtual PropertyInfo GetDeclaredProperty( string name ) {
            return default( PropertyInfo );
        }

        TypeInfo IReflectableType.GetTypeInfo() {
            return default( TypeInfo );
        }
    }

}
