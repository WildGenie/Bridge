// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;

namespace System {
    public class AdjustmentRule: System.Runtime.Serialization.IDeserializationCallback, System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable {

        public System.DateTime DateStart {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DateStart));
				return default (DateTime);
			}
		}
        public System.DateTime DateEnd {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DateEnd));
				return default (DateTime);
			}
		}
        public System.TimeSpan DaylightDelta {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightDelta));
				return default (TimeSpan);
			}
		}
        public System.TimeZoneInfo.TransitionTime DaylightTransitionStart {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightTransitionStart));
				return default(TimeZoneInfo.TransitionTime);
			}
		}
        public System.TimeZoneInfo.TransitionTime DaylightTransitionEnd {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightTransitionEnd));
				return default(TimeZoneInfo.TransitionTime);
			}
		}
        internal System.TimeSpan BaseUtcOffsetDelta {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseUtcOffsetDelta));
				return default (TimeSpan);
			}
		}
        internal bool HasDaylightSaving {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasDaylightSaving));
				return default (Boolean);
			}
		}
        public bool Equals( System.TimeZoneInfo.AdjustmentRule other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(AdjustmentRule) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}

        public void OnDeserialization(object sender)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDeserialization) );
        }

        public static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule( System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateAdjustmentRule), typeof(DateTime), typeof(DateTime), typeof(TimeSpan), typeof(TransitionTime), typeof(TransitionTime) );
            return default( System.TimeZoneInfo.AdjustmentRule );

		}
        internal static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule( System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateAdjustmentRule), typeof(DateTime), typeof(DateTime), typeof(TimeSpan), typeof(TransitionTime), typeof(TransitionTime), typeof(TimeSpan) );
            return default( System.TimeZoneInfo.AdjustmentRule );

		}
        internal bool IsStartDateMarkerForBeginningOfYear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsStartDateMarkerForBeginningOfYear) );
            return default( bool );

		}
        internal bool IsEndDateMarkerForEndOfYear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEndDateMarkerForEndOfYear) );
            return default( bool );

		}
    }
}