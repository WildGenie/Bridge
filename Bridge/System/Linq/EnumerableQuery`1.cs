// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Expressions;
using System;

namespace System.Linq {
    public class EnumerableQuery<T>: System.Linq.EnumerableQuery, IQueryable, IEnumerable<T>, IQueryProvider
    {

        System.Linq.IQueryProvider @System.Linq.IQueryable.Provider {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Linq.IQueryable.Provider));
				return default (IQueryProvider);
			}
		}
        internal override System.Linq.Expressions.Expression Expression {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Expression));
				return default (Expression);
			}
		}
        internal override System.Collections.IEnumerable Enumerable {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Enumerable));
				return default (IEnumerable);
			}
		}
        System.Linq.Expressions.Expression @System.Linq.IQueryable.Expression {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Linq.IQueryable.Expression));
				return default (Expression);
			}
		}
        System.Type @System.Linq.IQueryable.ElementType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Linq.IQueryable.ElementType));
				return default (Type);
			}
		}
        public EnumerableQuery( System.Collections.Generic.IEnumerable<T> enumerable )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnumerableQuery<T>), typeof(IEnumerable<T>));
            }
        public EnumerableQuery( System.Linq.Expressions.Expression expression )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnumerableQuery<T>), typeof(Expression));
            }
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}

        public System.Linq.IQueryProvider Provider {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Linq.IQueryable.Provider));
				return default (IQueryProvider);
			}
		}

        public System.Type ElementType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Linq.IQueryable.ElementType));
				return default (Type);
			}
		}
        System.Linq.IQueryable @System.Linq.IQueryProvider.CreateQuery( System.Linq.Expressions.Expression expression ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Linq.IQueryProvider.CreateQuery), typeof(Expression) );
            return default( System.Linq.IQueryable );

		}
        System.Linq.IQueryable<TElement> @System.Linq.IQueryProvider.CreateQuery<TElement>( System.Linq.Expressions.Expression expression ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Linq.IQueryProvider.CreateQuery), typeof(Expression) );
            return default( System.Linq.IQueryable<TElement> );

		}
        System.Object @System.Linq.IQueryProvider.Execute( System.Linq.Expressions.Expression expression ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Linq.IQueryProvider.Execute), typeof(Expression) );
            return default( System.Object );

		}
        TElement @System.Linq.IQueryProvider.Execute<TElement>( System.Linq.Expressions.Expression expression ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Linq.IQueryProvider.Execute), typeof(Expression) );
            return default( TElement );

		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        System.Collections.Generic.IEnumerator<T> @System.Collections.Generic.IEnumerable<T>.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.IEnumerable<T>.GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<T> );

		}
    }
}