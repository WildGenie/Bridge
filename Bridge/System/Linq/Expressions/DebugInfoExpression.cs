// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Linq.Expressions;
using System;
using System.Linq;

namespace System.Linq.Expressions {
    public class DebugInfoExpression: System.Linq.Expressions.Expression {

        public new System.Type Type {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Type));
				return default (Type);
			}
		}
        public new System.Linq.Expressions.ExpressionType NodeType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NodeType));
				return default (ExpressionType);
			}
		}
        public virtual int StartLine {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartLine));
				return default (Int32);
			}
		}
        public virtual int StartColumn {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartColumn));
				return default (Int32);
			}
		}
        public virtual int EndLine {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndLine));
				return default (Int32);
			}
		}
        public virtual int EndColumn {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndColumn));
				return default (Int32);
			}
		}
        public System.Linq.Expressions.SymbolDocumentInfo Document {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Document));
				return default (SymbolDocumentInfo);
			}
		}
        public virtual bool IsClear {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsClear));
				return default (Boolean);
			}
		}
        internal System.Linq.Expressions.Expression Accept( System.Linq.Expressions.ExpressionVisitor visitor ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Accept), typeof(ExpressionVisitor) );
            return default( System.Linq.Expressions.Expression );

		}

        public DebugInfoExpression(ExpressionType nodeType, Type type) : base(nodeType, type)
        {
        }
    }
}