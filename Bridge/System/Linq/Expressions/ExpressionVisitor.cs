// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Linq.Expressions;
using System.Collections.ObjectModel;
using System;

namespace System.Linq.Expressions {
    public abstract class ExpressionVisitor {

        public virtual System.Linq.Expressions.Expression Visit( System.Linq.Expressions.Expression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Visit), typeof(Expression) );
            return default( System.Linq.Expressions.Expression );

		}
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Visit( System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> nodes ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Visit), typeof(ReadOnlyCollection<Expression>) );
            return default( System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> );

		}
        public static System.Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>( ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Visit), typeof(ReadOnlyCollection<T>), typeof(Func<T>) );
            return default( System.Collections.ObjectModel.ReadOnlyCollection<T> );

		}
        public T VisitAndConvert<T>( T node, string callerName )
            where T : Expression {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitAndConvert), typeof(T), typeof(String) );
            return default( T );

		}
        public System.Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>( ReadOnlyCollection<T> nodes, string callerName )
            where T : Expression {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitAndConvert), typeof(ReadOnlyCollection<T>), typeof(String) );
            return default( System.Collections.ObjectModel.ReadOnlyCollection<T> );

		}
        internal virtual System.Linq.Expressions.Expression VisitBinary( System.Linq.Expressions.BinaryExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitBinary), typeof(BinaryExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitBlock( System.Linq.Expressions.BlockExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitBlock), typeof(BlockExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitConditional( System.Linq.Expressions.ConditionalExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitConditional), typeof(ConditionalExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitConstant( System.Linq.Expressions.ConstantExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitConstant), typeof(ConstantExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitDebugInfo( System.Linq.Expressions.DebugInfoExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitDebugInfo), typeof(DebugInfoExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitDefault( System.Linq.Expressions.DefaultExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitDefault), typeof(DefaultExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitExtension( System.Linq.Expressions.Expression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitExtension), typeof(Expression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitGoto( System.Linq.Expressions.GotoExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitGoto), typeof(GotoExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitInvocation( System.Linq.Expressions.InvocationExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitInvocation), typeof(InvocationExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        protected virtual System.Linq.Expressions.LabelTarget VisitLabelTarget( System.Linq.Expressions.LabelTarget node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitLabelTarget), typeof(LabelTarget) );
            return default( System.Linq.Expressions.LabelTarget );

		}
        internal virtual System.Linq.Expressions.Expression VisitLabel( System.Linq.Expressions.LabelExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitLabel), typeof(LabelExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitLambda<T>( Expression<T> node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitLambda), typeof(Expression<T>) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitLoop( System.Linq.Expressions.LoopExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitLoop), typeof(LoopExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitMember( System.Linq.Expressions.MemberExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMember), typeof(MemberExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitIndex( System.Linq.Expressions.IndexExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitIndex), typeof(IndexExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitMethodCall( System.Linq.Expressions.MethodCallExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMethodCall), typeof(MethodCallExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitNewArray( System.Linq.Expressions.NewArrayExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitNewArray), typeof(NewArrayExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitNew( System.Linq.Expressions.NewExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitNew), typeof(NewExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitParameter( System.Linq.Expressions.ParameterExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitParameter), typeof(ParameterExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitRuntimeVariables( System.Linq.Expressions.RuntimeVariablesExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitRuntimeVariables), typeof(RuntimeVariablesExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        protected virtual System.Linq.Expressions.SwitchCase VisitSwitchCase( System.Linq.Expressions.SwitchCase node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitSwitchCase), typeof(SwitchCase) );
            return default( System.Linq.Expressions.SwitchCase );

		}
        internal virtual System.Linq.Expressions.Expression VisitSwitch( System.Linq.Expressions.SwitchExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitSwitch), typeof(SwitchExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        protected virtual System.Linq.Expressions.CatchBlock VisitCatchBlock( System.Linq.Expressions.CatchBlock node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitCatchBlock), typeof(CatchBlock) );
            return default( System.Linq.Expressions.CatchBlock );

		}
        internal virtual System.Linq.Expressions.Expression VisitTry( System.Linq.Expressions.TryExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitTry), typeof(TryExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitTypeBinary( System.Linq.Expressions.TypeBinaryExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitTypeBinary), typeof(TypeBinaryExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitUnary( System.Linq.Expressions.UnaryExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitUnary), typeof(UnaryExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitMemberInit( System.Linq.Expressions.MemberInitExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMemberInit), typeof(MemberInitExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        internal virtual System.Linq.Expressions.Expression VisitListInit( System.Linq.Expressions.ListInitExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitListInit), typeof(ListInitExpression) );
            return default( System.Linq.Expressions.Expression );

		}
        protected virtual System.Linq.Expressions.ElementInit VisitElementInit( System.Linq.Expressions.ElementInit node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitElementInit), typeof(ElementInit) );
            return default( System.Linq.Expressions.ElementInit );

		}
        protected virtual System.Linq.Expressions.MemberBinding VisitMemberBinding( System.Linq.Expressions.MemberBinding node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMemberBinding), typeof(MemberBinding) );
            return default( System.Linq.Expressions.MemberBinding );

		}
        protected virtual System.Linq.Expressions.MemberAssignment VisitMemberAssignment( System.Linq.Expressions.MemberAssignment node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMemberAssignment), typeof(MemberAssignment) );
            return default( System.Linq.Expressions.MemberAssignment );

		}
        protected virtual System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding( System.Linq.Expressions.MemberMemberBinding node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMemberMemberBinding), typeof(MemberMemberBinding) );
            return default( System.Linq.Expressions.MemberMemberBinding );

		}
        protected virtual System.Linq.Expressions.MemberListBinding VisitMemberListBinding( System.Linq.Expressions.MemberListBinding node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitMemberListBinding), typeof(MemberListBinding) );
            return default( System.Linq.Expressions.MemberListBinding );

		}
        internal virtual System.Linq.Expressions.Expression VisitDynamic( System.Linq.Expressions.DynamicExpression node ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VisitDynamic), typeof(DynamicExpression) );
            return default( System.Linq.Expressions.Expression );

		}
    }
}