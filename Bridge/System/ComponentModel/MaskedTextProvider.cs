// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Text;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;

namespace System.ComponentModel {
    public class MaskedTextProvider: System.ICloneable {

        public bool AllowPromptAsInput {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowPromptAsInput));
				return default (Boolean);
			}
		}
        public int AssignedEditPositionCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AssignedEditPositionCount));
				return default (Int32);
			}
		}
        public int AvailableEditPositionCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AvailableEditPositionCount));
				return default (Int32);
			}
		}
        public System.Globalization.CultureInfo Culture {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Culture));
				return default (CultureInfo);
			}
		}
        public static char DefaultPasswordChar {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DefaultPasswordChar));
				return default (Char);
			}
		}
        public int EditPositionCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EditPositionCount));
				return default (Int32);
			}
		}
        public System.Collections.IEnumerator EditPositions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EditPositions));
				return default (IEnumerator);
			}
		}
        public bool IncludeLiterals { get; set; }
        public bool IncludePrompt { get; set; }
        public bool AsciiOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsciiOnly));
				return default (Boolean);
			}
		}
        public bool IsPassword { get; set; }
        public static int InvalidIndex {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InvalidIndex));
				return default (Int32);
			}
		}
        public int LastAssignedPosition {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastAssignedPosition));
				return default (Int32);
			}
		}
        public int Length {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Length));
				return default (Int32);
			}
		}
        public string Mask {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Mask));
				return default (String);
			}
		}
        public bool MaskCompleted {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskCompleted));
				return default (Boolean);
			}
		}
        public bool MaskFull {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskFull));
				return default (Boolean);
			}
		}
        public char PasswordChar { get; set; }
        public char PromptChar { get; set; }
        public bool ResetOnPrompt { get; set; }
        public bool ResetOnSpace { get; set; }
        public bool SkipLiterals { get; set; }
        public char this[int index] {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
				return default (Char);
			}
		}
        public MaskedTextProvider( string mask )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String));
            }
        public MaskedTextProvider( string mask, bool restrictToAscii )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(Boolean));
            }
        public MaskedTextProvider( string mask, System.Globalization.CultureInfo culture )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(CultureInfo));
            }
        public MaskedTextProvider( string mask, System.Globalization.CultureInfo culture, bool restrictToAscii )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(CultureInfo), typeof(Boolean));
            }
        public MaskedTextProvider( string mask, char passwordChar, bool allowPromptAsInput )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(Char), typeof(Boolean));
            }
        public MaskedTextProvider( string mask, System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(CultureInfo), typeof(Char), typeof(Boolean));
            }
        public MaskedTextProvider( string mask, System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaskedTextProvider), typeof(String), typeof(CultureInfo), typeof(Boolean), typeof(Char), typeof(Char), typeof(Boolean));
            }
        public System.Object Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Object );

		}
        public bool Add( char input ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(Char) );
            return default( bool );

		}
        public bool Add( char input, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(Char), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Add( string input ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(String) );
            return default( bool );

		}
        public bool Add( string input, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(String), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public void Clear( out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear), typeof(MaskedTextResultHint) );
            resultHint = default( System.ComponentModel.MaskedTextResultHint );

		}
        public int FindAssignedEditPositionFrom( int position, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAssignedEditPositionFrom), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindAssignedEditPositionInRange( int startPosition, int endPosition, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAssignedEditPositionInRange), typeof(Int32), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindEditPositionFrom( int position, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindEditPositionFrom), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindEditPositionInRange( int startPosition, int endPosition, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindEditPositionInRange), typeof(Int32), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindNonEditPositionFrom( int position, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindNonEditPositionFrom), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindNonEditPositionInRange( int startPosition, int endPosition, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindNonEditPositionInRange), typeof(Int32), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindUnassignedEditPositionFrom( int position, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindUnassignedEditPositionFrom), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public int FindUnassignedEditPositionInRange( int startPosition, int endPosition, bool direction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindUnassignedEditPositionInRange), typeof(Int32), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public static bool GetOperationResultFromHint( System.ComponentModel.MaskedTextResultHint hint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetOperationResultFromHint), typeof(MaskedTextResultHint) );
            return default( bool );

		}
        public bool InsertAt( char input, int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InsertAt), typeof(Char), typeof(Int32) );
            return default( bool );

		}
        public bool InsertAt( char input, int position, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InsertAt), typeof(Char), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool InsertAt( string input, int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InsertAt), typeof(String), typeof(Int32) );
            return default( bool );

		}
        public bool InsertAt( string input, int position, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InsertAt), typeof(String), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool IsAvailablePosition( int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAvailablePosition), typeof(Int32) );
            return default( bool );

		}
        public bool IsEditPosition( int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEditPosition), typeof(Int32) );
            return default( bool );

		}
        public static bool IsValidInputChar( char c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsValidInputChar), typeof(Char) );
            return default( bool );

		}
        public static bool IsValidMaskChar( char c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsValidMaskChar), typeof(Char) );
            return default( bool );

		}
        public static bool IsValidPasswordChar( char c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsValidPasswordChar), typeof(Char) );
            return default( bool );

		}
        public bool Remove() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove) );
            return default( bool );

		}
        public bool Remove( out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool RemoveAt( int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
            return default( bool );

		}
        public bool RemoveAt( int startPosition, int endPosition ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public bool RemoveAt( int startPosition, int endPosition, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Replace( char input, int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(Char), typeof(Int32) );
            return default( bool );

		}
        public bool Replace( char input, int position, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(Char), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Replace( char input, int startPosition, int endPosition, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(Char), typeof(Int32), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Replace( string input, int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(String), typeof(Int32) );
            return default( bool );

		}
        public bool Replace( string input, int position, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(String), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Replace( string input, int startPosition, int endPosition, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Replace), typeof(String), typeof(Int32), typeof(Int32), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool Set( string input ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set), typeof(String) );
            return default( bool );

		}
        public bool Set( string input, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set), typeof(String), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public string ToDisplayString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToDisplayString) );
            return default( string );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public string ToString( bool ignorePasswordChar ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean) );
            return default( string );

		}
        public string ToString( int startPosition, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Int32), typeof(Int32) );
            return default( string );

		}
        public string ToString( bool ignorePasswordChar, int startPosition, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean), typeof(Int32), typeof(Int32) );
            return default( string );

		}
        public string ToString( bool includePrompt, bool includeLiterals ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean), typeof(Boolean) );
            return default( string );

		}
        public string ToString( bool includePrompt, bool includeLiterals, int startPosition, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean), typeof(Boolean), typeof(Int32), typeof(Int32) );
            return default( string );

		}
        public string ToString( bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean), typeof(Boolean), typeof(Boolean), typeof(Int32), typeof(Int32) );
            return default( string );

		}
        public bool VerifyChar( char input, int position, out System.ComponentModel.MaskedTextResultHint hint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyChar), typeof(Char), typeof(Int32), typeof(MaskedTextResultHint) );
            hint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
        public bool VerifyEscapeChar( char input, int position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyEscapeChar), typeof(Char), typeof(Int32) );
            return default( bool );

		}
        public bool VerifyString( string input ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyString), typeof(String) );
            return default( bool );

		}
        public bool VerifyString( string input, out System.Int32 testPosition, out System.ComponentModel.MaskedTextResultHint resultHint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyString), typeof(String), typeof(Int32), typeof(MaskedTextResultHint) );
            testPosition = default( System.Int32 ); resultHint = default( System.ComponentModel.MaskedTextResultHint );

            return default( bool );

		}
    }
}