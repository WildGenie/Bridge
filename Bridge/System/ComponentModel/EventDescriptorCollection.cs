// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.ComponentModel;
using System;

namespace System.ComponentModel {
    public class EventDescriptorCollection: System.Collections.IList {

        public int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}

        int @System.Collections.ICollection.Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.Count));
				return default (Int32);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}

        public object this[int index]
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }

        bool @System.Collections.IList.IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsReadOnly));
				return default (Boolean);
			}
		}
        bool @System.Collections.IList.IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsFixedSize));
				return default (Boolean);
			}
		}
        public EventDescriptorCollection( System.ComponentModel.EventDescriptor[] events )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventDescriptorCollection), typeof(EventDescriptor[]));
            }
        public EventDescriptorCollection( System.ComponentModel.EventDescriptor[] events, bool readOnly )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventDescriptorCollection), typeof(EventDescriptor[]), typeof(Boolean));
            }
        public int Add( System.ComponentModel.EventDescriptor value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(EventDescriptor) );
            return default( int );

		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public bool Contains( System.ComponentModel.EventDescriptor value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(EventDescriptor) );
            return default( bool );

		}
        public virtual System.ComponentModel.EventDescriptor Find( string name, bool ignoreCase ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Find), typeof(String), typeof(Boolean) );
            return default( System.ComponentModel.EventDescriptor );

		}
        public int IndexOf( System.ComponentModel.EventDescriptor value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(EventDescriptor) );
            return default( int );

		}
        public void Insert( int index, System.ComponentModel.EventDescriptor value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Insert), typeof(Int32), typeof(EventDescriptor) );
		}
        public void Remove( System.ComponentModel.EventDescriptor value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(EventDescriptor) );
		}
        public void RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
		}
        public System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public virtual System.ComponentModel.EventDescriptorCollection Sort() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort) );
            return default( System.ComponentModel.EventDescriptorCollection );

		}
        public virtual System.ComponentModel.EventDescriptorCollection Sort( string[] names ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort), typeof(String[]) );
            return default( System.ComponentModel.EventDescriptorCollection );

		}
        public virtual System.ComponentModel.EventDescriptorCollection Sort( string[] names, System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort), typeof(String[]), typeof(IComparer) );
            return default( System.ComponentModel.EventDescriptorCollection );

		}
        public virtual System.ComponentModel.EventDescriptorCollection Sort( System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort), typeof(IComparer) );
            return default( System.ComponentModel.EventDescriptorCollection );

		}
        protected void InternalSort( string[] names ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalSort), typeof(String[]) );
		}
        protected void InternalSort( System.Collections.IComparer sorter ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalSort), typeof(IComparer) );
		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}

        public bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsReadOnly));
				return default (Boolean);
			}
		}

        public bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsFixedSize));
				return default (Boolean);
			}
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        int @System.Collections.IList.Add( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Add), typeof(Object) );
            return default( int );

		}
        void @System.Collections.IList.Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Clear) );
		}
        bool @System.Collections.IList.Contains( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Contains), typeof(Object) );
            return default( bool );

		}
        int @System.Collections.IList.IndexOf( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.IndexOf), typeof(Object) );
            return default( int );

		}
        void @System.Collections.IList.Insert( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Insert), typeof(Int32), typeof(Object) );
		}
        void @System.Collections.IList.Remove( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Remove), typeof(Object) );
		}
        void @System.Collections.IList.RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.RemoveAt), typeof(Int32) );
		}
    }
}