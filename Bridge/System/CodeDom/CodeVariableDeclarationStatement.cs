// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.CodeDom;
using System;

namespace System.CodeDom {
    public class CodeVariableDeclarationStatement: System.CodeDom.CodeStatement {

        public System.CodeDom.CodeExpression InitExpression { get; set; }
        public string Name { get; set; }
        public System.CodeDom.CodeTypeReference Type { get; set; }
        public CodeVariableDeclarationStatement(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement));
            }
        public CodeVariableDeclarationStatement( System.CodeDom.CodeTypeReference type, string name )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(CodeTypeReference), typeof(String));
            }
        public CodeVariableDeclarationStatement( string type, string name )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(String), typeof(String));
            }
        public CodeVariableDeclarationStatement( System.Type type, string name )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(Type), typeof(String));
            }
        public CodeVariableDeclarationStatement( System.CodeDom.CodeTypeReference type, string name, System.CodeDom.CodeExpression initExpression )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(CodeTypeReference), typeof(String), typeof(CodeExpression));
            }
        public CodeVariableDeclarationStatement( string type, string name, System.CodeDom.CodeExpression initExpression )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(String), typeof(String), typeof(CodeExpression));
            }
        public CodeVariableDeclarationStatement( System.Type type, string name, System.CodeDom.CodeExpression initExpression )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CodeVariableDeclarationStatement), typeof(Type), typeof(String), typeof(CodeExpression));
            }
    }
}