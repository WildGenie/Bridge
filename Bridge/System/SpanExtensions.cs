// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;

namespace System {
    public static class SpanExtensions {

        public static System.Span<byte> AsBytes<T>( this Span<T> source )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsBytes), typeof(Span<T>) );
            return default( System.Span<byte> );

		}
        public static System.ReadOnlySpan<byte> AsBytes<T>( this ReadOnlySpan<T> source )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsBytes), typeof(ReadOnlySpan<T>) );
            return default( System.ReadOnlySpan<byte> );

		}
        public static System.ReadOnlySpan<char> AsReadOnlySpan( this string text ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsReadOnlySpan), typeof(String) );
            return default( System.ReadOnlySpan<char> );

		}
        public static System.Span<TTo> NonPortableCast<TFrom, TTo>( this Span<TFrom> source )
            where TFrom : struct
            where TTo : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NonPortableCast), typeof(Span<TTo>) );
            return default( System.Span<TTo> );

		}
        public static System.ReadOnlySpan<TTo> NonPortableCast<TFrom, TTo>( this ReadOnlySpan<TFrom> source )
            where TFrom : struct
            where TTo : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NonPortableCast), typeof(ReadOnlySpan<TTo>) );
            return default( System.ReadOnlySpan<TTo> );

		}
        public static int IndexOf<T>( this Span<T> span, T value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Span<T>), typeof(T) );
            return default( int );

		}
        public static int IndexOf( this System.Span<byte> span, byte value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Span<byte>), typeof(Byte) );
            return default( int );

		}
        public static int IndexOf<T>( this Span<T> span, ReadOnlySpan<T> value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Span<T>), typeof(ReadOnlySpan<T>) );
            return default( int );

		}
        public static int IndexOf( this System.Span<byte> span, System.ReadOnlySpan<byte> value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Span<byte>), typeof(ReadOnlySpan<byte>) );
            return default( int );

		}
        public static bool SequenceEqual<T>( this Span<T> first, ReadOnlySpan<T> second )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SequenceEqual), typeof(Span<byte>), typeof(ReadOnlySpan<byte>) );
            return default( bool );

		}
        public static bool SequenceEqual( this System.Span<byte> first, System.ReadOnlySpan<byte> second ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SequenceEqual), typeof(Span<byte>), typeof(ReadOnlySpan<byte>) );
            return default( bool );

		}
        public static int IndexOf<T>( this ReadOnlySpan<T> span, T value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(ReadOnlySpan<T>), typeof(T) );
            return default( int );

		}
        public static int IndexOf( this System.ReadOnlySpan<byte> span, byte value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(ReadOnlySpan<byte>), typeof(Byte) );
            return default( int );

		}
        public static int IndexOf<T>( this ReadOnlySpan<T> span, ReadOnlySpan<T> value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(ReadOnlySpan<T>), typeof(ReadOnlySpan<T>) );
            return default( int );

		}
        public static int IndexOf( this System.ReadOnlySpan<byte> span, System.ReadOnlySpan<byte> value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(ReadOnlySpan<byte>), typeof(ReadOnlySpan<byte>) );
            return default( int );

		}
        public static int IndexOfAny( this System.Span<byte> span, byte value0, byte value1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(Span<byte>), typeof(Byte), typeof(Byte) );
            return default( int );

		}
        public static int IndexOfAny( this System.Span<byte> span, byte value0, byte value1, byte value2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(Span<byte>), typeof(Byte), typeof(Byte), typeof(Byte) );
            return default( int );

		}
        public static int IndexOfAny( this System.Span<byte> span, System.ReadOnlySpan<byte> values ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(Span<byte>), typeof(ReadOnlySpan<byte>) );
            return default( int );

		}
        public static int IndexOfAny( this System.ReadOnlySpan<byte> span, byte value0, byte value1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(ReadOnlySpan<byte>), typeof(Byte), typeof(Byte) );
            return default( int );

		}
        public static int IndexOfAny( this System.ReadOnlySpan<byte> span, byte value0, byte value1, byte value2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(ReadOnlySpan<byte>), typeof(Byte), typeof(Byte), typeof(Byte) );
            return default( int );

		}
        public static int IndexOfAny( this System.ReadOnlySpan<byte> span, System.ReadOnlySpan<byte> values ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOfAny), typeof(ReadOnlySpan<byte>), typeof(ReadOnlySpan<byte>) );
            return default( int );

		}
        public static bool SequenceEqual<T>( this ReadOnlySpan<T> first, ReadOnlySpan<T> second )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SequenceEqual), typeof(ReadOnlySpan<T>), typeof(ReadOnlySpan<T>) );
            return default( bool );

		}
        public static bool SequenceEqual( this System.ReadOnlySpan<byte> first, System.ReadOnlySpan<byte> second ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SequenceEqual), typeof(ReadOnlySpan<byte>), typeof(ReadOnlySpan<byte>) );
            return default( bool );

		}
        public static bool StartsWith( this System.Span<byte> span, System.ReadOnlySpan<byte> value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartsWith), typeof(Span<byte>), typeof(ReadOnlySpan<byte>) );
            return default( bool );

		}
        public static bool StartsWith<T>( this Span<T> span, ReadOnlySpan<T> value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartsWith), typeof(Span<T>), typeof(ReadOnlySpan<T>) );
            return default( bool );

		}
        public static bool StartsWith( this System.ReadOnlySpan<byte> span, System.ReadOnlySpan<byte> value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartsWith), typeof(ReadOnlySpan<byte>), typeof(ReadOnlySpan<byte>) );
            return default( bool );

		}
        public static bool StartsWith<T>( this ReadOnlySpan<T> span, ReadOnlySpan<T> value )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartsWith), typeof(ReadOnlySpan<T>), typeof(ReadOnlySpan<T>) );
            return default( bool );

		}
        public static System.Span<T> AsSpan<T>( this T[] array ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsSpan), typeof(T[]) );
            return default( System.Span<T> );

		}
        public static System.Span<T> AsSpan<T>( this ArraySegment<T> arraySegment ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsSpan), typeof(ArraySegment<T>) );
            return default( System.Span<T> );

		}
        public static System.ReadOnlySpan<T> AsReadOnlySpan<T>( this T[] array ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsReadOnlySpan), typeof(T[]) );
            return default( System.ReadOnlySpan<T> );

		}
        public static System.ReadOnlySpan<T> AsReadOnlySpan<T>( this ArraySegment<T> arraySegment ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsReadOnlySpan), typeof(ArraySegment<T>) );
            return default( System.ReadOnlySpan<T> );

		}
        public static void CopyTo<T>( this T[] array, Span<T> destination ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(T[]), typeof(Span<T>) );
		}
    }
}