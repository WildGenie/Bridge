// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.ComponentModel;
using System;
using System.Diagnostics;
using System.Threading;
using System.IO;
using System.Security;

namespace System.Diagnostics {
    public class Process: System.ComponentModel.Component {

        internal bool Associated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Associated));
				return default (Boolean);
			}
		}
        public int ExitCode {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExitCode));
				return default (Int32);
			}
		}
        public bool HasExited {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasExited));
				return default (Boolean);
			}
		}
        public System.DateTime ExitTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExitTime));
				return default (DateTime);
			}
		}
        public System.IntPtr Handle {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Handle));
				return default (IntPtr);
			}
		}
        public int Id {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Id));
				return default (Int32);
			}
		}
        public string MachineName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MachineName));
				return default (String);
			}
		}
        public System.IntPtr MaxWorkingSet { get; set; }
        public System.IntPtr MinWorkingSet { get; set; }
        internal System.OperatingSystem OperatingSystem {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OperatingSystem));
				return default (OperatingSystem);
			}
		}
        public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }
        public System.TimeSpan PrivilegedProcessorTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PrivilegedProcessorTime));
				return default (TimeSpan);
			}
		}
        public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }
        public System.DateTime StartTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartTime));
				return default (DateTime);
			}
		}
        public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
        public System.TimeSpan TotalProcessorTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TotalProcessorTime));
				return default (TimeSpan);
			}
		}
        public System.TimeSpan UserProcessorTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserProcessorTime));
				return default (TimeSpan);
			}
		}
        public bool EnableRaisingEvents { get; set; }
        public System.IO.StreamWriter StandardInput {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StandardInput));
				return default (StreamWriter);
			}
		}
        public System.IO.StreamReader StandardOutput {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StandardOutput));
				return default (StreamReader);
			}
		}
        public System.IO.StreamReader StandardError {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StandardError));
				return default (StreamReader);
			}
		}
        public int BasePriority {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BasePriority));
				return default (Int32);
			}
		}
        public int HandleCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HandleCount));
				return default (Int32);
			}
		}
        public System.Diagnostics.ProcessModule MainModule {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MainModule));
				return default (ProcessModule);
			}
		}
        public System.IntPtr MainWindowHandle {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MainWindowHandle));
				return default (IntPtr);
			}
		}
        public string MainWindowTitle {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MainWindowTitle));
				return default (String);
			}
		}
        public System.Diagnostics.ProcessModuleCollection Modules {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Modules));
				return default (ProcessModuleCollection);
			}
		}
        public int NonpagedSystemMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NonpagedSystemMemorySize));
				return default (Int32);
			}
		}
        public int PagedMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PagedMemorySize));
				return default (Int32);
			}
		}
        public int PagedSystemMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PagedSystemMemorySize));
				return default (Int32);
			}
		}
        public int PeakPagedMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakPagedMemorySize));
				return default (Int32);
			}
		}
        public int PeakVirtualMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakVirtualMemorySize));
				return default (Int32);
			}
		}
        public int PeakWorkingSet {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakWorkingSet));
				return default (Int32);
			}
		}
        public long NonpagedSystemMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NonpagedSystemMemorySize64));
				return default (Int64);
			}
		}
        public long PagedMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PagedMemorySize64));
				return default (Int64);
			}
		}
        public long PagedSystemMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PagedSystemMemorySize64));
				return default (Int64);
			}
		}
        public long PeakPagedMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakPagedMemorySize64));
				return default (Int64);
			}
		}
        public long PeakVirtualMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakVirtualMemorySize64));
				return default (Int64);
			}
		}
        public long PeakWorkingSet64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PeakWorkingSet64));
				return default (Int64);
			}
		}
        public bool PriorityBoostEnabled { get; set; }
        public int PrivateMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PrivateMemorySize));
				return default (Int32);
			}
		}
        public int SessionId {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SessionId));
				return default (Int32);
			}
		}
        public string ProcessName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProcessName));
				return default (String);
			}
		}
        public System.IntPtr ProcessorAffinity { get; set; }
        public bool Responding {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Responding));
				return default (Boolean);
			}
		}
        public System.Diagnostics.ProcessThreadCollection Threads {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Threads));
				return default (ProcessThreadCollection);
			}
		}
        public int VirtualMemorySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VirtualMemorySize));
				return default (Int32);
			}
		}
        public int WorkingSet {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WorkingSet));
				return default (Int32);
			}
		}
        public long PrivateMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PrivateMemorySize64));
				return default (Int64);
			}
		}
        public long VirtualMemorySize64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VirtualMemorySize64));
				return default (Int64);
			}
		}
        public long WorkingSet64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WorkingSet64));
				return default (Int64);
			}
		}
        internal static bool IsWindows {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsWindows));
				return default (Boolean);
			}
		}
        #pragma warning disable 67
        public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;
        public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;
        public event System.EventHandler Exited;
        #pragma warning disable 67

        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public static void EnterDebugMode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnterDebugMode) );
		}
        public static void LeaveDebugMode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LeaveDebugMode) );
		}
        public static System.Diagnostics.Process GetProcessById( int processId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcessById), typeof(Int32) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process[][] GetProcessesByName( string processName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcessesByName), typeof(String) );
            return default( System.Diagnostics.Process[][] );

		}
        public static System.Diagnostics.Process[][] GetProcesses() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcesses) );
            return default( System.Diagnostics.Process[][] );

		}
        public static System.Diagnostics.Process GetCurrentProcess() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCurrentProcess) );
            return default( System.Diagnostics.Process );

		}
        protected void OnExited() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnExited) );
		}
        public void Refresh() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Refresh) );
		}
        public bool Start() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start) );
            return default( bool );

		}
        public static System.Diagnostics.Process Start( string fileName, string userName, System.Security.SecureString password, string domain ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(String), typeof(String), typeof(SecureString), typeof(String) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process Start( string fileName, string arguments, string userName, System.Security.SecureString password, string domain ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(String), typeof(String), typeof(String), typeof(SecureString), typeof(String) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process Start( string fileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(String) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process Start( string fileName, string arguments ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(String), typeof(String) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process Start( System.Diagnostics.ProcessStartInfo startInfo ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(ProcessStartInfo) );
            return default( System.Diagnostics.Process );

		}
        public void Kill() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Kill) );
		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public bool WaitForExit( int milliseconds ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForExit), typeof(Int32) );
            return default( bool );

		}
        public void WaitForExit() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForExit) );
		}
        public bool WaitForInputIdle( int milliseconds ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForInputIdle), typeof(Int32) );
            return default( bool );

		}
        public bool WaitForInputIdle() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForInputIdle) );
            return default( bool );

		}
        public void BeginOutputReadLine() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginOutputReadLine) );
		}
        public void BeginErrorReadLine() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginErrorReadLine) );
		}
        public void CancelOutputRead() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancelOutputRead) );
		}
        public void CancelErrorRead() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancelErrorRead) );
		}
        internal void OutputReadNotifyUser( string data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OutputReadNotifyUser), typeof(String) );
		}
        internal void ErrorReadNotifyUser( string data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ErrorReadNotifyUser), typeof(String) );
		}
        public bool CloseMainWindow() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CloseMainWindow) );
            return default( bool );

		}
        public static System.Diagnostics.Process GetProcessById( int processId, string machineName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcessById), typeof(Int32), typeof(String) );
            return default( System.Diagnostics.Process );

		}
        public static System.Diagnostics.Process[][] GetProcessesByName( string processName, string machineName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcessesByName), typeof(String), typeof(String) );
            return default( System.Diagnostics.Process[][] );

		}
        public static System.Diagnostics.Process[][] GetProcesses( string machineName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProcesses), typeof(String) );
            return default( System.Diagnostics.Process[][] );

		}
    }
}