// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.ComponentModel;
using System;
using System.Diagnostics;

namespace System.Diagnostics {
    public class PerformanceCounter: System.ComponentModel.Component, System.ComponentModel.ISupportInitialize {

        internal static int DefaultFileMappingSize;

        public string CategoryName { get; set; }
        public string CounterHelp {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CounterHelp));
				return default (String);
			}
		}
        public string CounterName { get; set; }
        public System.Diagnostics.PerformanceCounterType CounterType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CounterType));
				return default (PerformanceCounterType);
			}
		}
        public System.Diagnostics.PerformanceCounterInstanceLifetime InstanceLifetime { get; set; }
        public string InstanceName { get; set; }
        public string MachineName { get; set; }
        public long RawValue { get; set; }
        public bool ReadOnly { get; set; }
        #pragma warning disable 67
        #pragma warning disable 67

        public PerformanceCounter(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter));
            }
        public PerformanceCounter( string categoryName, string counterName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter), typeof(String), typeof(String));
            }
        public PerformanceCounter( string categoryName, string counterName, bool readOnly )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter), typeof(String), typeof(String), typeof(Boolean));
            }
        public PerformanceCounter( string categoryName, string counterName, string instanceName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter), typeof(String), typeof(String), typeof(String));
            }
        public PerformanceCounter( string categoryName, string counterName, string instanceName, bool readOnly )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter), typeof(String), typeof(String), typeof(String), typeof(Boolean));
            }
        public PerformanceCounter( string categoryName, string counterName, string instanceName, string machineName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PerformanceCounter), typeof(String), typeof(String), typeof(String), typeof(String));
            }
        public void BeginInit() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginInit) );
		}
        public void EndInit() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndInit) );
		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public static void CloseSharedResources() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CloseSharedResources) );
		}
        public long Decrement() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decrement) );
            return default( long );

		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public long Increment() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Increment) );
            return default( long );

		}
        public long IncrementBy( long value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IncrementBy), typeof(Int64) );
            return default( long );

		}
        public System.Diagnostics.CounterSample NextSample() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NextSample) );
            return default( System.Diagnostics.CounterSample );

		}
        public float NextValue() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NextValue) );
            return default( float );

		}
        public void RemoveInstance() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveInstance) );
		}
    }
}