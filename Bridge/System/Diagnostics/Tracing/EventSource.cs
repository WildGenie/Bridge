// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Diagnostics.Tracing;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;

namespace System.Diagnostics.Tracing {
    public class EventSource: System.IDisposable {

        internal const string s_ActivityStartSuffix = "Start";

        internal const string s_ActivityStopSuffix = "Stop";

        public string Name {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Name));
				return default (String);
			}
		}
        public System.Guid Guid {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Guid));
				return default (Guid);
			}
		}
        public System.Diagnostics.Tracing.EventSourceSettings Settings {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Settings));
				return default (EventSourceSettings);
			}
		}
        public static System.Guid CurrentThreadActivityId {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentThreadActivityId));
				return default (Guid);
			}
		}
        internal static System.Guid InternalCurrentThreadActivityId {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalCurrentThreadActivityId));
				return default (Guid);
			}
		}
        internal static System.Guid FallbackActivityId {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FallbackActivityId));
				return default (Guid);
			}
		}
        public System.Exception ConstructionException {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConstructionException));
				return default (Exception);
			}
		}
        internal bool IsDisposed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDisposed));
				return default (Boolean);
			}
		}
        internal bool ThrowOnEventWriteErrors {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowOnEventWriteErrors));
				return default (Boolean);
			}
		}
        internal bool SelfDescribingEvents {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SelfDescribingEvents));
				return default (Boolean);
			}
		}
        #pragma warning disable 67
        public event System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs> EventCommandExecuted;
        #pragma warning disable 67

        public EventSource( string eventSourceName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventSource), typeof(String));
            }
        public EventSource( string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventSource), typeof(String), typeof(EventSourceSettings));
            }
        public EventSource( string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config, string[] traits )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventSource), typeof(String), typeof(EventSourceSettings), typeof(String[]));
            }
        public void Write( string eventName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String) );
		}
        public void Write( string eventName, System.Diagnostics.Tracing.EventSourceOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String), typeof(EventSourceOptions) );
		}
        public void Write<T>( string eventName, T data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String), typeof(T) );
		}
        public void Write<T>( string eventName, System.Diagnostics.Tracing.EventSourceOptions options, T data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String), typeof(EventSourceOptions), typeof(T) );
		}
        public void Write<T>( string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref T data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String), typeof(EventSourceOptions), typeof(T) );
		}
        public void Write<T>( string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref System.Guid activityId, ref System.Guid relatedActivityId, ref T data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String), typeof(EventSourceOptions), typeof(Guid), typeof(Guid), typeof(T) );
		}
        public bool IsEnabled() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEnabled) );
            return default( bool );

		}
        public bool IsEnabled( System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEnabled), typeof(EventLevel), typeof(EventKeywords) );
            return default( bool );

		}
        public bool IsEnabled( System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEnabled), typeof(EventLevel), typeof(EventKeywords), typeof(EventChannel) );
            return default( bool );

		}
        public static System.Guid GetGuid( System.Type eventSourceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetGuid), typeof(Type) );
            return default( System.Guid );

		}
        public static string GetName( System.Type eventSourceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetName), typeof(Type) );
            return default( string );

		}
        public static string GenerateManifest( System.Type eventSourceType, string assemblyPathToIncludeInManifest ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateManifest), typeof(Type), typeof(String) );
            return default( string );

		}
        public static string GenerateManifest( System.Type eventSourceType, string assemblyPathToIncludeInManifest, System.Diagnostics.Tracing.EventManifestOptions flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateManifest), typeof(Type), typeof(String), typeof(EventManifestOptions) );
            return default( string );

		}
        public static System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> GetSources() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSources) );
            return default( System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> );

		}
        public static void SendCommand( System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventCommand command, System.Collections.Generic.IDictionary<string, string> commandArguments ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendCommand), typeof(EventSource), typeof(EventCommand), typeof(IDictionary<string, string>) );
		}
        public static void SetCurrentThreadActivityId( System.Guid activityId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetCurrentThreadActivityId), typeof(Guid) );
		}
        public static void SetCurrentThreadActivityId( System.Guid activityId, out System.Guid oldActivityThatWillContinue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetCurrentThreadActivityId), typeof(Guid), typeof(Guid) );
            oldActivityThatWillContinue = default( System.Guid );

		}
        public string GetTrait( string key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTrait), typeof(String) );
            return default( string );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        protected virtual void OnEventCommand( System.Diagnostics.Tracing.EventCommandEventArgs command ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnEventCommand), typeof(EventCommandEventArgs) );
		}
        protected void WriteEvent( int eventId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, int arg1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, int arg1, int arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int32), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, int arg1, int arg2, int arg3 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, long arg1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int64) );
		}
        protected void WriteEvent( int eventId, long arg1, long arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int64), typeof(Int64) );
		}
        protected void WriteEvent( int eventId, long arg1, long arg2, long arg3 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int64), typeof(Int64), typeof(Int64) );
		}
        protected void WriteEvent( int eventId, string arg1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String) );
		}
        protected void WriteEvent( int eventId, string arg1, string arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String), typeof(String) );
		}
        protected void WriteEvent( int eventId, string arg1, string arg2, string arg3 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String), typeof(String), typeof(String) );
		}
        protected void WriteEvent( int eventId, string arg1, int arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, string arg1, int arg2, int arg3 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String), typeof(Int32), typeof(Int32) );
		}
        protected void WriteEvent( int eventId, string arg1, long arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(String), typeof(Int64) );
		}
        protected void WriteEvent( int eventId, long arg1, string arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int64), typeof(String) );
		}
        protected void WriteEvent( int eventId, int arg1, string arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int32), typeof(String) );
		}
        protected void WriteEvent( int eventId, byte[] arg1 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Byte[]) );
		}
        protected void WriteEvent( int eventId, long arg1, byte[] arg2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Int64), typeof(Byte[]) );
		}
        protected void WriteEvent( int eventId, System.Object[] args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEvent), typeof(Int32), typeof(Object[]) );
		}
        protected void WriteEventWithRelatedActivityId( int eventId, System.Guid relatedActivityId, System.Object[] args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteEventWithRelatedActivityId), typeof(Int32), typeof(Guid), typeof(Object[]) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        internal static System.Diagnostics.Tracing.EventOpcode GetOpcodeWithDefault( System.Diagnostics.Tracing.EventOpcode opcode, string eventName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetOpcodeWithDefault), typeof(EventOpcode), typeof(String) );
            return default( System.Diagnostics.Tracing.EventOpcode );

		}
        internal void SendCommand( System.Diagnostics.Tracing.EventListener listener, int perEventSourceSessionId, int etwSessionId, System.Diagnostics.Tracing.EventCommand command, bool enable, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary<string, string> commandArguments ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendCommand), typeof(EventListener), typeof(Int32), typeof(Int32), typeof(EventCommand), typeof(Boolean), typeof(EventLevel), typeof(EventKeywords), typeof(IDictionary<string, string>) );
		}
        internal void DoCommand( System.Diagnostics.Tracing.EventCommandEventArgs commandArgs ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DoCommand), typeof(EventCommandEventArgs) );
		}
        internal void UpdateEtwSession( int sessionIdBit, int etwSessionId, bool bEnable, string activityFilters, bool participateInSampling ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UpdateEtwSession), typeof(Int32), typeof(Int32), typeof(Boolean), typeof(String), typeof(Boolean) );
		}
        internal static bool ParseCommandArgs( System.Collections.Generic.IDictionary<string, string> commandArguments, out System.Boolean participateInSampling, out System.String activityFilters, out System.Int32 sessionIdBit ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ParseCommandArgs), typeof(IDictionary<string, string>), typeof(Boolean), typeof(String), typeof(Int32) );
            participateInSampling = default( System.Boolean ); activityFilters = default( System.String ); sessionIdBit = default( System.Int32 );

            return default( bool );

		}
        internal void UpdateKwdTriggers( bool enable ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UpdateKwdTriggers), typeof(Boolean) );
		}
        internal static System.Attribute GetCustomAttributeHelper( System.Reflection.MemberInfo member, System.Type attributeType, System.Diagnostics.Tracing.EventManifestOptions flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCustomAttributeHelper), typeof(MemberInfo), typeof(Type), typeof(EventManifestOptions) );
            return default( System.Attribute );

		}
        internal void AddListener( System.Diagnostics.Tracing.EventListener listener ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddListener), typeof(EventListener) );
		}
        internal void ReportOutOfBandMessage( string msg, bool flush ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReportOutOfBandMessage), typeof(String), typeof(Boolean) );
		}
        public struct EventData {


        }
    }
}