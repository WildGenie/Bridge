// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Diagnostics.Eventing.Reader;
using System.Globalization;
using System.Collections.Generic;
using System.Diagnostics.Eventing;
using System.Security;

namespace System.Diagnostics.Eventing.Reader {
    public class EventLogSession: System.IDisposable {

        public static System.Diagnostics.Eventing.Reader.EventLogSession GlobalSession {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GlobalSession));
				return default (EventLogSession);
			}
		}
        public EventLogSession(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventLogSession));
            }
        public EventLogSession( string server )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventLogSession), typeof(String));
            }
        public EventLogSession( string server, string domain, string user, System.Security.SecureString password, System.Diagnostics.Eventing.Reader.SessionAuthentication logOnType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventLogSession), typeof(String), typeof(String), typeof(String), typeof(SecureString), typeof(SessionAuthentication));
            }
        public void CancelCurrentOperations() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancelCurrentOperations) );
		}
        public void ClearLog( string logName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClearLog), typeof(String) );
		}
        public void ClearLog( string logName, string backupPath ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClearLog), typeof(String), typeof(String) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public void ExportLog( string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportLog), typeof(String), typeof(PathType), typeof(String), typeof(String) );
		}
        public void ExportLog( string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportLog), typeof(String), typeof(PathType), typeof(String), typeof(String), typeof(Boolean) );
		}
        public void ExportLogAndMessages( string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportLogAndMessages), typeof(String), typeof(PathType), typeof(String), typeof(String) );
		}
        public void ExportLogAndMessages( string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors, System.Globalization.CultureInfo targetCultureInfo ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportLogAndMessages), typeof(String), typeof(PathType), typeof(String), typeof(String), typeof(Boolean), typeof(CultureInfo) );
		}
        public System.Diagnostics.Eventing.Reader.EventLogInformation GetLogInformation( string logName, System.Diagnostics.Eventing.Reader.PathType pathType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLogInformation), typeof(String), typeof(PathType) );
            return default( System.Diagnostics.Eventing.Reader.EventLogInformation );

		}
        public System.Collections.Generic.IEnumerable<string> GetLogNames() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLogNames) );
            return default( System.Collections.Generic.IEnumerable<string> );

		}
        public System.Collections.Generic.IEnumerable<string> GetProviderNames() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProviderNames) );
            return default( System.Collections.Generic.IEnumerable<string> );

		}
    }
}