// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System.Security.Principal;
using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Security;
using System.Collections;

namespace System.Security.Principal {
    public class WindowsIdentity: System.Security.Claims.ClaimsIdentity, System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Runtime.Serialization.ISerializable {

        public override string AuthenticationType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticationType));
				return default (String);
			}
		}
        public virtual bool IsAnonymous {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAnonymous));
				return default (Boolean);
			}
		}
        public override bool IsAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAuthenticated));
				return default (Boolean);
			}
		}
        public virtual bool IsGuest {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsGuest));
				return default (Boolean);
			}
		}
        public virtual bool IsSystem {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSystem));
				return default (Boolean);
			}
		}
        public override string Name {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Name));
				return default (String);
			}
		}
        public virtual System.IntPtr Token {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Token));
				return default (IntPtr);
			}
		}
        public System.Security.Principal.IdentityReferenceCollection Groups {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Groups));
				return default (IdentityReferenceCollection);
			}
		}
        public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ImpersonationLevel));
				return default (TokenImpersonationLevel);
			}
		}
        public System.Security.Principal.SecurityIdentifier Owner {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Owner));
				return default (SecurityIdentifier);
			}
		}
        public System.Security.Principal.SecurityIdentifier User {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(User));
				return default (SecurityIdentifier);
			}
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeviceClaims));
				return default (IEnumerable<Claim>);
			}
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserClaims));
				return default (IEnumerable<Claim>);
			}
		}
        public WindowsIdentity( System.IntPtr userToken ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(IntPtr));
            }
        public WindowsIdentity( System.IntPtr userToken, string type ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(IntPtr), typeof(String));
            }
        public WindowsIdentity( System.IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(IntPtr), typeof(String), typeof(WindowsAccountType));
            }
        public WindowsIdentity( System.IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(IntPtr), typeof(String), typeof(WindowsAccountType), typeof(Boolean));
            }
        public WindowsIdentity( string sUserPrincipalName ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(String));
            }
        public WindowsIdentity( string sUserPrincipalName, string type ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(String), typeof(String));
            }
        public WindowsIdentity( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) : base( default( System.Security.Principal.IIdentity ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WindowsIdentity), typeof(SerializationInfo), typeof(StreamingContext));
            }
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public static System.Security.Principal.WindowsIdentity GetAnonymous() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAnonymous) );
            return default( System.Security.Principal.WindowsIdentity );

		}
        public static System.Security.Principal.WindowsIdentity GetCurrent() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCurrent) );
            return default( System.Security.Principal.WindowsIdentity );

		}
        public static System.Security.Principal.WindowsIdentity GetCurrent( bool ifImpersonating ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCurrent), typeof(Boolean) );
            return default( System.Security.Principal.WindowsIdentity );

		}
        public static System.Security.Principal.WindowsIdentity GetCurrent( System.Security.Principal.TokenAccessLevels desiredAccess ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCurrent), typeof(TokenAccessLevels) );
            return default( System.Security.Principal.WindowsIdentity );

		}
        public virtual System.Security.Principal.WindowsImpersonationContext Impersonate() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Impersonate) );
            return default( System.Security.Principal.WindowsImpersonationContext );

		}
        public static System.Security.Principal.WindowsImpersonationContext Impersonate( System.IntPtr userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Impersonate), typeof(IntPtr) );
            return default( System.Security.Principal.WindowsImpersonationContext );

		}
        internal System.Security.Claims.ClaimsIdentity CloneAsBase() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CloneAsBase) );
            return default( System.Security.Claims.ClaimsIdentity );

		}
        internal System.IntPtr GetTokenInternal() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTokenInternal) );
            return default( System.IntPtr );

		}
        internal static string[][] _GetRoles( System.IntPtr token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(_GetRoles), typeof(IntPtr) );
            return default( string[][] );

		}
        internal static System.IntPtr GetCurrentToken() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCurrentToken) );
            return default( System.IntPtr );

		}
        void @System.Runtime.Serialization.IDeserializationCallback.OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Runtime.Serialization.IDeserializationCallback.OnDeserialization), typeof(Object) );
		}
    }
}