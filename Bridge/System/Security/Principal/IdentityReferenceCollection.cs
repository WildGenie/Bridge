// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Collections.Generic;
using System;
using System.Security.Principal;
using System.Security;

namespace System.Security.Principal {
    public class IdentityReferenceCollection : IEnumerable
    {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public virtual bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        public System.Security.Principal.IdentityReference this[int index] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( System.Security.Principal.IdentityReference );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public IdentityReferenceCollection(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IdentityReferenceCollection));
            }
        public IdentityReferenceCollection( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IdentityReferenceCollection), typeof(Int32));
            }
        public void Add( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(IdentityReference) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public bool Contains( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(IdentityReference) );
            return default( bool );

		}
        public void CopyTo( System.Security.Principal.IdentityReference[] array, int offset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(IdentityReference[]), typeof(Int32) );
		}
        public System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference> GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<System.Security.Principal.IdentityReference> );

		}
        public bool Remove( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(IdentityReference) );
            return default( bool );

		}

        public System.Security.Principal.IdentityReferenceCollection Translate( System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Translate), typeof(Type) );
            return default( System.Security.Principal.IdentityReferenceCollection );

		}
        public System.Security.Principal.IdentityReferenceCollection Translate( System.Type targetType, bool forceSuccess ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Translate), typeof(Type), typeof(Boolean) );
            return default( System.Security.Principal.IdentityReferenceCollection );

		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
    }
}