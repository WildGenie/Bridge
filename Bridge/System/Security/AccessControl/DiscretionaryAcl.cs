// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System;
using System.Security.AccessControl;
using System.Security.Principal;

namespace System.Security.AccessControl {
    public class DiscretionaryAcl: System.Security.AccessControl.CommonAcl {

        public DiscretionaryAcl( bool isContainer, bool isDS, int capacity )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DiscretionaryAcl), typeof(Boolean), typeof(Boolean), typeof(Int32));
            }
        public DiscretionaryAcl( bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DiscretionaryAcl), typeof(Boolean), typeof(Boolean), typeof(RawAcl));
            }
        public DiscretionaryAcl( bool isContainer, bool isDS, byte revision, int capacity )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DiscretionaryAcl), typeof(Boolean), typeof(Boolean), typeof(Byte), typeof(Int32));
            }
        public void AddAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags) ); 
		}
        public void AddAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(ObjectAceFlags), typeof(Guid), typeof(Guid) ); 
		}
        public void AddAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(ObjectAccessRule) ); 
		}
        public bool RemoveAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags) );
            return default( bool );
        
		}
        public bool RemoveAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(ObjectAceFlags), typeof(Guid), typeof(Guid) );
            return default( bool );
        
		}
        public bool RemoveAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(ObjectAccessRule) );
            return default( bool );
        
		}
        public void RemoveAccessSpecific( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessSpecific), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags) ); 
		}
        public void RemoveAccessSpecific( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessSpecific), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(ObjectAceFlags), typeof(Guid), typeof(Guid) ); 
		}
        public void RemoveAccessSpecific( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessSpecific), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(ObjectAccessRule) ); 
		}
        public void SetAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags) ); 
		}
        public void SetAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, System.Guid objectType, System.Guid inheritedObjectType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(Int32), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(ObjectAceFlags), typeof(Guid), typeof(Guid) ); 
		}
        public void SetAccess( System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccess), typeof(AccessControlType), typeof(SecurityIdentifier), typeof(ObjectAccessRule) ); 
		}
        internal override void ApplyCanonicalSortToExplicitAces() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ApplyCanonicalSortToExplicitAces) ); 
		}
        internal override int GetAceInsertPosition( System.Security.AccessControl.AceQualifier aceQualifier ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAceInsertPosition), typeof(AceQualifier) );
            return default( int );
        
		}
        internal override bool IsAceMeaningless( System.Security.AccessControl.GenericAce ace ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAceMeaningless), typeof(GenericAce) );
            return default( bool );
        
		}
    }
}