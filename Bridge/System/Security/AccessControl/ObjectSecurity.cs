// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security.AccessControl;
using System.Threading;
using System;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Security;

namespace System.Security.AccessControl {
    public abstract class ObjectSecurity {
        public abstract System.Type AccessRightType { get; }

        public abstract System.Type AccessRuleType { get; }

        public abstract System.Type AuditRuleType { get; }

        public bool AreAccessRulesCanonical {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AreAccessRulesCanonical));
				return default (Boolean);
			}
		}
        public bool AreAccessRulesProtected {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AreAccessRulesProtected));
				return default (Boolean);
			}
		}
        public bool AreAuditRulesCanonical {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AreAuditRulesCanonical));
				return default (Boolean);
			}
		}
        public bool AreAuditRulesProtected {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AreAuditRulesProtected));
				return default (Boolean);
			}
		}
        internal System.Security.AccessControl.AccessControlSections AccessControlSectionsModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AccessControlSectionsModified));
				return default (AccessControlSections);
			}
		}
        internal bool AccessRulesModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AccessRulesModified));
				return default (Boolean);
			}
		}
        internal bool AuditRulesModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuditRulesModified));
				return default (Boolean);
			}
		}
        internal bool GroupModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GroupModified));
				return default (Boolean);
			}
		}
        internal bool IsContainer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsContainer));
				return default (Boolean);
			}
		}
        internal bool IsDS {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDS));
				return default (Boolean);
			}
		}
        internal bool OwnerModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OwnerModified));
				return default (Boolean);
			}
		}
        public abstract System.Security.AccessControl.AccessRule AccessRuleFactory( System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type );

        public abstract System.Security.AccessControl.AuditRule AuditRuleFactory( System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags );

        public System.Security.Principal.IdentityReference GetGroup( System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetGroup), typeof(Type) );
            return default( System.Security.Principal.IdentityReference );

		}
        public System.Security.Principal.IdentityReference GetOwner( System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetOwner), typeof(Type) );
            return default( System.Security.Principal.IdentityReference );

		}
        public byte[][] GetSecurityDescriptorBinaryForm() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSecurityDescriptorBinaryForm) );
            return default( byte[][] );

		}
        public string GetSecurityDescriptorSddlForm( System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSecurityDescriptorSddlForm), typeof(AccessControlSections) );
            return default( string );

		}
        public static bool IsSddlConversionSupported() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSddlConversionSupported) );
            return default( bool );

		}
        public virtual bool ModifyAccessRule( System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out System.Boolean modified ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ModifyAccessRule), typeof(AccessControlModification), typeof(AccessRule), typeof(Boolean) );
            modified = default( System.Boolean );

            return default( bool );

		}
        public virtual bool ModifyAuditRule( System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out System.Boolean modified ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ModifyAuditRule), typeof(AccessControlModification), typeof(AuditRule), typeof(Boolean) );
            modified = default( System.Boolean );

            return default( bool );

		}
        public virtual void PurgeAccessRules( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PurgeAccessRules), typeof(IdentityReference) );
		}
        public virtual void PurgeAuditRules( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PurgeAuditRules), typeof(IdentityReference) );
		}
        public void SetAccessRuleProtection( bool isProtected, bool preserveInheritance ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccessRuleProtection), typeof(Boolean), typeof(Boolean) );
		}
        public void SetAuditRuleProtection( bool isProtected, bool preserveInheritance ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAuditRuleProtection), typeof(Boolean), typeof(Boolean) );
		}
        public void SetGroup( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetGroup), typeof(IdentityReference) );
		}
        public void SetOwner( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetOwner), typeof(IdentityReference) );
		}
        public void SetSecurityDescriptorBinaryForm( byte[] binaryForm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSecurityDescriptorBinaryForm), typeof(Byte[]) );
		}
        public void SetSecurityDescriptorBinaryForm( byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSecurityDescriptorBinaryForm), typeof(Byte[]), typeof(AccessControlSections) );
		}
        public void SetSecurityDescriptorSddlForm( string sddlForm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSecurityDescriptorSddlForm), typeof(String) );
		}
        public void SetSecurityDescriptorSddlForm( string sddlForm, System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSecurityDescriptorSddlForm), typeof(String), typeof(AccessControlSections) );
		}
        protected abstract bool ModifyAccess( System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out System.Boolean modified );

        protected abstract bool ModifyAudit( System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out System.Boolean modified );

        protected virtual void Persist( System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Persist), typeof(SafeHandle), typeof(AccessControlSections) );
		}
        protected virtual void Persist( string name, System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Persist), typeof(String), typeof(AccessControlSections) );
		}
        protected virtual void Persist( bool enableOwnershipPrivilege, string name, System.Security.AccessControl.AccessControlSections includeSections ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Persist), typeof(Boolean), typeof(String), typeof(AccessControlSections) );
		}
        protected void ReadLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadLock) );
		}
        protected void ReadUnlock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadUnlock) );
		}
        protected void WriteLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteLock) );
		}
        protected void WriteUnlock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteUnlock) );
		}
        internal System.Security.AccessControl.AuthorizationRuleCollection InternalGetAccessRules( bool includeExplicit, bool includeInherited, System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalGetAccessRules), typeof(Boolean), typeof(Boolean), typeof(Type) );
            return default( System.Security.AccessControl.AuthorizationRuleCollection );

		}
        internal virtual System.Security.AccessControl.AccessRule InternalAccessRuleFactory( System.Security.AccessControl.QualifiedAce ace, System.Type targetType, System.Security.AccessControl.AccessControlType type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalAccessRuleFactory), typeof(QualifiedAce), typeof(Type), typeof(AccessControlType) );
            return default( System.Security.AccessControl.AccessRule );

		}
        internal System.Security.AccessControl.AuthorizationRuleCollection InternalGetAuditRules( bool includeExplicit, bool includeInherited, System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalGetAuditRules), typeof(Boolean), typeof(Boolean), typeof(Type) );
            return default( System.Security.AccessControl.AuthorizationRuleCollection );

		}
        internal virtual System.Security.AccessControl.AuditRule InternalAuditRuleFactory( System.Security.AccessControl.QualifiedAce ace, System.Type targetType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalAuditRuleFactory), typeof(QualifiedAce), typeof(Type) );
            return default( System.Security.AccessControl.AuditRule );

		}
        internal static System.Security.Principal.SecurityIdentifier SidFromIR( System.Security.Principal.IdentityReference identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SidFromIR), typeof(IdentityReference) );
            return default( System.Security.Principal.SecurityIdentifier );

		}
    }
}