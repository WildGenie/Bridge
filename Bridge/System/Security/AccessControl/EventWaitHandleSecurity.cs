// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;

namespace System.Security.AccessControl {
    public class EventWaitHandleSecurity: System.Security.AccessControl.NativeObjectSecurity {

        public override System.Type AccessRightType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AccessRightType));
				return default (Type);
			}
		}
        public override System.Type AccessRuleType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AccessRuleType));
				return default (Type);
			}
		}
        public override System.Type AuditRuleType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuditRuleType));
				return default (Type);
			}
		}
        public override System.Security.AccessControl.AccessRule AccessRuleFactory( System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AccessRuleFactory), typeof(IdentityReference), typeof(Int32), typeof(Boolean), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(AccessControlType) );
            return default( System.Security.AccessControl.AccessRule );

		}
        public void AddAccessRule( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAccessRule), typeof(EventWaitHandleAccessRule) );
		}
        public bool RemoveAccessRule( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessRule), typeof(EventWaitHandleAccessRule) );
            return default( bool );

		}
        public void RemoveAccessRuleAll( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessRuleAll), typeof(EventWaitHandleAccessRule) );
		}
        public void RemoveAccessRuleSpecific( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAccessRuleSpecific), typeof(EventWaitHandleAccessRule) );
		}
        public void ResetAccessRule( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResetAccessRule), typeof(EventWaitHandleAccessRule) );
		}
        public void SetAccessRule( System.Security.AccessControl.EventWaitHandleAccessRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccessRule), typeof(EventWaitHandleAccessRule) );
		}
        public override System.Security.AccessControl.AuditRule AuditRuleFactory( System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuditRuleFactory), typeof(IdentityReference), typeof(Int32), typeof(Boolean), typeof(InheritanceFlags), typeof(PropagationFlags), typeof(AuditFlags) );
            return default( System.Security.AccessControl.AuditRule );

		}
        public void AddAuditRule( System.Security.AccessControl.EventWaitHandleAuditRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAuditRule), typeof(EventWaitHandleAuditRule) );
		}
        public bool RemoveAuditRule( System.Security.AccessControl.EventWaitHandleAuditRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAuditRule), typeof(EventWaitHandleAuditRule) );
            return default( bool );

		}
        public void RemoveAuditRuleAll( System.Security.AccessControl.EventWaitHandleAuditRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAuditRuleAll), typeof(EventWaitHandleAuditRule) );
		}
        public void RemoveAuditRuleSpecific( System.Security.AccessControl.EventWaitHandleAuditRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAuditRuleSpecific), typeof(EventWaitHandleAuditRule) );
		}
        public void SetAuditRule( System.Security.AccessControl.EventWaitHandleAuditRule rule ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAuditRule), typeof(EventWaitHandleAuditRule) );
		}
        internal void Persist( System.Runtime.InteropServices.SafeHandle handle ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Persist), typeof(SafeHandle) );
		}
    }
}