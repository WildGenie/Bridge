// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security.Policy;
using System.Security;
using System.Reflection;
using System;

namespace System.Security {
    public class HostSecurityManager {

        public virtual System.Security.Policy.PolicyLevel DomainPolicy { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DomainPolicy));
				return default (PolicyLevel);
			}
		}
        public virtual System.Security.HostSecurityManagerOptions Flags { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Flags));
				return default (HostSecurityManagerOptions);
			}
		}
        public virtual System.Security.Policy.ApplicationTrust DetermineApplicationTrust( System.Security.Policy.Evidence applicationEvidence, System.Security.Policy.Evidence activatorEvidence, System.Security.Policy.TrustManagerContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DetermineApplicationTrust), typeof(Evidence), typeof(Evidence), typeof(TrustManagerContext) );
            return default( System.Security.Policy.ApplicationTrust );
        
		}
        public virtual System.Security.Policy.Evidence ProvideAppDomainEvidence( System.Security.Policy.Evidence inputEvidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProvideAppDomainEvidence), typeof(Evidence) );
            return default( System.Security.Policy.Evidence );
        
		}
        public virtual System.Security.Policy.Evidence ProvideAssemblyEvidence( System.Reflection.Assembly loadedAssembly, System.Security.Policy.Evidence inputEvidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProvideAssemblyEvidence), typeof(Assembly), typeof(Evidence) );
            return default( System.Security.Policy.Evidence );
        
		}
        public virtual System.Security.PermissionSet ResolvePolicy( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicy), typeof(Evidence) );
            return default( System.Security.PermissionSet );
        
		}
        public virtual System.Security.Policy.EvidenceBase GenerateAppDomainEvidence( System.Type evidenceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateAppDomainEvidence), typeof(Type) );
            return default( System.Security.Policy.EvidenceBase );
        
		}
        public virtual System.Security.Policy.EvidenceBase GenerateAssemblyEvidence( System.Type evidenceType, System.Reflection.Assembly assembly ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateAssemblyEvidence), typeof(Type), typeof(Assembly) );
            return default( System.Security.Policy.EvidenceBase );
        
		}
        public virtual System.Type[][] GetHostSuppliedAppDomainEvidenceTypes() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostSuppliedAppDomainEvidenceTypes) );
            return default( System.Type[][] );
        
		}
        public virtual System.Type[][] GetHostSuppliedAssemblyEvidenceTypes( System.Reflection.Assembly assembly ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostSuppliedAssemblyEvidenceTypes), typeof(Assembly) );
            return default( System.Type[][] );
        
		}
    }
}