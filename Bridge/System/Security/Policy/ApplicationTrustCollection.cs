// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System;
using System.Security.Policy;
using System.Security;

namespace System.Security.Policy {
    public class ApplicationTrustCollection: System.Collections.ICollection {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        public System.Security.Policy.ApplicationTrust this[int index] {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
				return default (ApplicationTrust);
			}
		}
        public int Add( System.Security.Policy.ApplicationTrust trust ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(ApplicationTrust) );
            return default( int );

		}
        public void AddRange( System.Security.Policy.ApplicationTrust[] trusts ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(ApplicationTrust[]) );
		}
        public void AddRange( System.Security.Policy.ApplicationTrustCollection trusts ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(ApplicationTrustCollection) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public void CopyTo( System.Security.Policy.ApplicationTrust[] array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(ApplicationTrust[]), typeof(Int32) );
		}
        public System.Security.Policy.ApplicationTrustCollection Find( System.ApplicationIdentity applicationIdentity, System.Security.Policy.ApplicationVersionMatch versionMatch ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Find), typeof(ApplicationIdentity), typeof(ApplicationVersionMatch) );
            return default( System.Security.Policy.ApplicationTrustCollection );

		}
        public System.Security.Policy.ApplicationTrustEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Security.Policy.ApplicationTrustEnumerator );

		}
        public void Remove( System.Security.Policy.ApplicationTrust trust ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(ApplicationTrust) );
		}
        public void Remove( System.ApplicationIdentity applicationIdentity, System.Security.Policy.ApplicationVersionMatch versionMatch ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(ApplicationIdentity), typeof(ApplicationVersionMatch) );
		}
        public void RemoveRange( System.Security.Policy.ApplicationTrust[] trusts ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveRange), typeof(ApplicationTrust[]) );
		}
        public void RemoveRange( System.Security.Policy.ApplicationTrustCollection trusts ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveRange), typeof(ApplicationTrustCollection) );
		}
        internal void RemoveAllInstances( System.Security.Policy.ApplicationTrust trust ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAllInstances), typeof(ApplicationTrust) );
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
    }
}