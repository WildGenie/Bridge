// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System;
using System.Reflection;
using System.Security.Policy;

namespace System.Security.Policy {
    public class Evidence: System.Collections.ICollection {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public bool Locked { get; set; }
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        internal System.Collections.ArrayList HostEvidenceList {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HostEvidenceList));
				return default (ArrayList);
			}
		}
        internal System.Collections.ArrayList AssemblyEvidenceList {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AssemblyEvidenceList));
				return default (ArrayList);
			}
		}
        public Evidence(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Evidence));
            }
        public Evidence( System.Security.Policy.Evidence evidence )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Evidence), typeof(Evidence));
            }
        public Evidence( System.Object[] hostEvidence, System.Object[] assemblyEvidence )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Evidence), typeof(Object[]), typeof(Object[]));
            }
        public Evidence( System.Security.Policy.EvidenceBase[] hostEvidence, System.Security.Policy.EvidenceBase[] assemblyEvidence )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Evidence), typeof(EvidenceBase[]), typeof(EvidenceBase[]));
            }
        public void AddAssembly( System.Object id ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAssembly), typeof(Object) );
		}
        public void AddHost( System.Object id ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddHost), typeof(Object) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public System.Security.Policy.Evidence Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Security.Policy.Evidence );

		}
        public void CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        public System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public System.Collections.IEnumerator GetAssemblyEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAssemblyEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public System.Collections.IEnumerator GetHostEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public void Merge( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Merge), typeof(Evidence) );
		}
        public void RemoveType( System.Type t ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveType), typeof(Type) );
		}
        internal static System.Security.Policy.Evidence GetDefaultHostEvidence( System.Reflection.Assembly a ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDefaultHostEvidence), typeof(Assembly) );
            return default( System.Security.Policy.Evidence );

		}
        public void AddAssemblyEvidence<T>( T evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddAssemblyEvidence), typeof(T) );
		}
        public void AddHostEvidence<T>( T evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddHostEvidence), typeof(T) );
		}
        public T GetAssemblyEvidence<T>() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAssemblyEvidence) );
            return default( T );

		}
        public T GetHostEvidence<T>() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEvidence) );
            return default( T );

		}
    }
}