// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security;
using System.Security.Permissions;
using System;
using System.Collections;

namespace System.Security.Permissions {
    public abstract class ResourcePermissionBase: System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission {

        internal const string Any = "*";

        internal const string Local = ".";

        internal System.Type PermissionAccessType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PermissionAccessType));
				return default (Type);
			}
		}
        internal string[][] TagNames {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TagNames));
				return default (String[][]);
			}
		}
        protected void AddPermissionAccess( System.Security.Permissions.ResourcePermissionBaseEntry entry ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddPermissionAccess), typeof(ResourcePermissionBaseEntry) );
		}
        protected void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public override System.Security.IPermission Copy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Copy) );
            return default( System.Security.IPermission );

		}
        public override void FromXml( System.Security.SecurityElement securityElement ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXml), typeof(SecurityElement) );
		}
        protected System.Security.Permissions.ResourcePermissionBaseEntry[][] GetPermissionEntries() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPermissionEntries) );
            return default( System.Security.Permissions.ResourcePermissionBaseEntry[][] );

		}
        public override System.Security.IPermission Intersect( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Intersect), typeof(IPermission) );
            return default( System.Security.IPermission );

		}
        public override bool IsSubsetOf( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSubsetOf), typeof(IPermission) );
            return default( bool );

		}
        public bool IsUnrestricted() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsUnrestricted) );
            return default( bool );

		}
        protected void RemovePermissionAccess( System.Security.Permissions.ResourcePermissionBaseEntry entry ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemovePermissionAccess), typeof(ResourcePermissionBaseEntry) );
		}
        public override System.Security.SecurityElement ToXml() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXml) );
            return default( System.Security.SecurityElement );

		}
        public override System.Security.IPermission Union( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Union), typeof(IPermission) );
            return default( System.Security.IPermission );

		}
        internal void CheckEntry( System.Security.Permissions.ResourcePermissionBaseEntry entry ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckEntry), typeof(ResourcePermissionBaseEntry) );
		}
        internal bool Equals( System.Security.Permissions.ResourcePermissionBaseEntry entry1, System.Security.Permissions.ResourcePermissionBaseEntry entry2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(ResourcePermissionBaseEntry), typeof(ResourcePermissionBaseEntry) );
            return default( bool );

		}
        internal bool Exists( System.Security.Permissions.ResourcePermissionBaseEntry entry ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Exists), typeof(ResourcePermissionBaseEntry) );
            return default( bool );

		}
        internal static void ValidateMachineName( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ValidateMachineName), typeof(String) );
		}
        internal static System.Security.Permissions.ResourcePermissionBase CreateFromType( System.Type type, bool unrestricted ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromType), typeof(Type), typeof(Boolean) );
            return default( System.Security.Permissions.ResourcePermissionBase );

		}
    }
}