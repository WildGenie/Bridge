// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security.Principal;
using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.IO;
using System.Collections;
using System.Runtime.Serialization;
using System.Security;

namespace System.Security.Claims {
    public class ClaimsPrincipal: System.Security.Principal.IPrincipal {

        public static System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity> PrimaryIdentitySelector { get; set; }
        public static System.Func<System.Security.Claims.ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
        internal virtual byte[][] CustomSerializationData {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CustomSerializationData));
				return default (Byte[][]);
			}
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claims));
				return default (IEnumerable<Claim>);
			}
		}
        public static System.Security.Claims.ClaimsPrincipal Current {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Current));
				return default (ClaimsPrincipal);
			}
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> Identities {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Identities));
				return default (IEnumerable<ClaimsIdentity>);
			}
		}
        public virtual System.Security.Principal.IIdentity Identity {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Identity));
				return default (IIdentity);
			}
		}
        public ClaimsPrincipal(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsPrincipal));
            }
        public ClaimsPrincipal( System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsPrincipal), typeof(IEnumerable<ClaimsIdentity>));
            }
        public ClaimsPrincipal( System.Security.Principal.IIdentity identity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsPrincipal), typeof(IIdentity));
            }
        public ClaimsPrincipal( System.Security.Principal.IPrincipal principal )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsPrincipal), typeof(IPrincipal));
            }
        public ClaimsPrincipal( System.IO.BinaryReader reader )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsPrincipal), typeof(BinaryReader));
            }
        public virtual System.Security.Claims.ClaimsPrincipal Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Security.Claims.ClaimsPrincipal );

		}
        protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity( System.IO.BinaryReader reader ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateClaimsIdentity), typeof(BinaryReader) );
            return default( System.Security.Claims.ClaimsIdentity );

		}
        protected virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public virtual void AddIdentity( System.Security.Claims.ClaimsIdentity identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddIdentity), typeof(ClaimsIdentity) );
		}
        public virtual void AddIdentities( System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity> identities ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddIdentities), typeof(IEnumerable<ClaimsIdentity>) );
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAll), typeof(Predicate<Claim>) );
            return default( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> );

		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll( string type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAll), typeof(String) );
            return default( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> );

		}
        public virtual System.Security.Claims.Claim FindFirst( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindFirst), typeof(Predicate<Claim>) );
            return default( System.Security.Claims.Claim );

		}
        public virtual System.Security.Claims.Claim FindFirst( string type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindFirst), typeof(String) );
            return default( System.Security.Claims.Claim );

		}
        public virtual bool HasClaim( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasClaim), typeof(Predicate<Claim>) );
            return default( bool );

		}
        public virtual bool HasClaim( string type, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasClaim), typeof(String), typeof(String) );
            return default( bool );

		}
        public virtual bool IsInRole( string role ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsInRole), typeof(String) );
            return default( bool );

		}
        public virtual void WriteTo( System.IO.BinaryWriter writer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter) );
		}
        protected virtual void WriteTo( System.IO.BinaryWriter writer, byte[] userData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter), typeof(Byte[]) );
		}
    }
}