// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.IO;
using System.Collections;
using System.Security;

namespace System.Security.Claims {
    public class Claim {

        internal virtual byte[][] CustomSerializationData {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CustomSerializationData));
				return default (Byte[][]);
			}
		}
        public string Issuer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Issuer));
				return default (String);
			}
		}
        public string OriginalIssuer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OriginalIssuer));
				return default (String);
			}
		}
        public System.Collections.Generic.IDictionary<string, string> Properties {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Properties));
				return default (IDictionary<string, string>);
			}
		}
        public System.Security.Claims.ClaimsIdentity Subject {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Subject));
				return default (ClaimsIdentity);
			}
		}
        public string Type {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Type));
				return default (String);
			}
		}
        public string Value {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Value));
				return default (String);
			}
		}
        public string ValueType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ValueType));
				return default (String);
			}
		}
        public Claim( System.IO.BinaryReader reader )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(BinaryReader));
            }
        public Claim( System.IO.BinaryReader reader, System.Security.Claims.ClaimsIdentity subject )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(BinaryReader), typeof(ClaimsIdentity));
            }
        public Claim( string type, string value )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(String), typeof(String));
            }
        public Claim( string type, string value, string valueType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(String), typeof(String), typeof(String));
            }
        public Claim( string type, string value, string valueType, string issuer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(String), typeof(String), typeof(String), typeof(String));
            }
        public Claim( string type, string value, string valueType, string issuer, string originalIssuer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(String), typeof(String), typeof(String), typeof(String), typeof(String));
            }
        public Claim( string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claim), typeof(String), typeof(String), typeof(String), typeof(String), typeof(String), typeof(ClaimsIdentity));
            }
        public virtual System.Security.Claims.Claim Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Security.Claims.Claim );

		}
        public virtual System.Security.Claims.Claim Clone( System.Security.Claims.ClaimsIdentity identity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone), typeof(ClaimsIdentity) );
            return default( System.Security.Claims.Claim );

		}
        public virtual void WriteTo( System.IO.BinaryWriter writer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter) );
		}
        protected virtual void WriteTo( System.IO.BinaryWriter writer, byte[] userData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter), typeof(Byte[]) );
		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
    }
}