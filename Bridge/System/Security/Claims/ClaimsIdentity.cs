// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security.Principal;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Security.Claims;
using System.IO;
using System.Security;
using System.Collections;
using System.Runtime.Serialization;

namespace System.Security.Claims {
    public class ClaimsIdentity: System.Security.Principal.IIdentity {

        internal const string DefaultIssuer = "LOCAL AUTHORITY";

        internal const string DefaultNameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name";

        internal const string DefaultRoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role";

        public virtual string AuthenticationType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticationType));
				return default (String);
			}
		}
        public virtual bool IsAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAuthenticated));
				return default (Boolean);
			}
		}
        public System.Security.Claims.ClaimsIdentity Actor { get; set; }
        public System.Object BootstrapContext { get; set; }
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Claims));
				return default (IEnumerable<Claim>);
			}
		}
        internal virtual byte[][] CustomSerializationData {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CustomSerializationData));
				return default (Byte[][]);
			}
		}
        internal System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>> ExternalClaims {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExternalClaims));
				return default (System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>>);
			}
		}
        public string Label { get; set; }
        public virtual string Name {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Name));
				return default (String);
			}
		}
        public string NameClaimType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NameClaimType));
				return default (String);
			}
		}
        public string RoleClaimType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RoleClaimType));
				return default (String);
			}
		}
        public ClaimsIdentity(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity));
            }
        public ClaimsIdentity( System.Security.Principal.IIdentity identity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IIdentity));
            }
        public ClaimsIdentity( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IEnumerable<Claim>));
            }
        public ClaimsIdentity( string authenticationType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(String));
            }
        public ClaimsIdentity( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IEnumerable<Claim>), typeof(String));
            }
        public ClaimsIdentity( System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IIdentity), typeof(IEnumerable<Claim>));
            }
        public ClaimsIdentity( string authenticationType, string nameType, string roleType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(String), typeof(String), typeof(String));
            }
        public ClaimsIdentity( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IEnumerable<Claim>), typeof(String), typeof(String), typeof(String));
            }
        public ClaimsIdentity( System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(IIdentity), typeof(IEnumerable<Claim>), typeof(String), typeof(String), typeof(String));
            }
        public ClaimsIdentity( System.IO.BinaryReader reader )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClaimsIdentity), typeof(BinaryReader));
            }
        public virtual System.Security.Claims.ClaimsIdentity Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Security.Claims.ClaimsIdentity );

		}
        public virtual void AddClaim( System.Security.Claims.Claim claim ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddClaim), typeof(Claim) );
		}
        public virtual void AddClaims( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddClaims), typeof(IEnumerable<Claim>) );
		}
        public virtual bool TryRemoveClaim( System.Security.Claims.Claim claim ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryRemoveClaim), typeof(Claim) );
            return default( bool );

		}
        public virtual void RemoveClaim( System.Security.Claims.Claim claim ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveClaim), typeof(Claim) );
		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAll), typeof(Predicate<Claim>) );
            return default( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> );

		}
        public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll( string type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindAll), typeof(String) );
            return default( System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> );

		}
        public virtual bool HasClaim( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasClaim), typeof(Predicate<Claim>) );
            return default( bool );

		}
        public virtual bool HasClaim( string type, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasClaim), typeof(String), typeof(String) );
            return default( bool );

		}
        public virtual System.Security.Claims.Claim FindFirst( System.Predicate<System.Security.Claims.Claim> match ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindFirst), typeof(Predicate<Claim>) );
            return default( System.Security.Claims.Claim );

		}
        public virtual System.Security.Claims.Claim FindFirst( string type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindFirst), typeof(String) );
            return default( System.Security.Claims.Claim );

		}
        protected virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        protected virtual System.Security.Claims.Claim CreateClaim( System.IO.BinaryReader reader ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateClaim), typeof(BinaryReader) );
            return default( System.Security.Claims.Claim );

		}
        public virtual void WriteTo( System.IO.BinaryWriter writer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter) );
		}
        protected virtual void WriteTo( System.IO.BinaryWriter writer, byte[] userData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteTo), typeof(BinaryWriter), typeof(Byte[]) );
		}
    }
}