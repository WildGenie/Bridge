// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.IO;
using System.Security;

namespace System.Security.Cryptography {
    public class RSACryptoServiceProvider: System.Security.Cryptography.RSA, System.Security.Cryptography.ICspAsymmetricAlgorithm {

        public override string SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (String);
			}
		}
        public static bool UseMachineKeyStore { get; set; }
        public override string KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (String);
			}
		}
        public override int KeySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeySize));
				return default (Int32);
			}
		}
        public bool PersistKeyInCsp { get; set; }
        public bool PublicOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PublicOnly));
				return default (Boolean);
			}
		}
        public virtual System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CspKeyContainerInfo));
				return default (CspKeyContainerInfo);
			}
		}
        public RSACryptoServiceProvider(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RSACryptoServiceProvider));
            }
        public RSACryptoServiceProvider( System.Security.Cryptography.CspParameters parameters )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RSACryptoServiceProvider), typeof(CspParameters));
            }
        public RSACryptoServiceProvider( int dwKeySize )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RSACryptoServiceProvider), typeof(Int32));
            }
        public RSACryptoServiceProvider( int dwKeySize, System.Security.Cryptography.CspParameters parameters )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RSACryptoServiceProvider), typeof(Int32), typeof(CspParameters));
            }
        protected override byte[][] HashData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        protected override byte[][] HashData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public override byte[][] Encrypt( byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Encrypt), typeof(Byte[]), typeof(RSAEncryptionPadding) );
            return default( byte[][] );

		}
        public override byte[][] Decrypt( byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decrypt), typeof(Byte[]), typeof(RSAEncryptionPadding) );
            return default( byte[][] );

		}
        public override byte[][] SignHash( byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignHash), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( byte[][] );

		}
        public override bool VerifyHash( byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyHash), typeof(Byte[]), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( bool );

		}
        public byte[][] Decrypt( byte[] rgb, bool fOAEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decrypt), typeof(Byte[]), typeof(Boolean) );
            return default( byte[][] );

		}
        public override byte[][] DecryptValue( byte[] rgb ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DecryptValue), typeof(Byte[]) );
            return default( byte[][] );

		}
        public byte[][] Encrypt( byte[] rgb, bool fOAEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Encrypt), typeof(Byte[]), typeof(Boolean) );
            return default( byte[][] );

		}
        public override byte[][] EncryptValue( byte[] rgb ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EncryptValue), typeof(Byte[]) );
            return default( byte[][] );

		}
        public override System.Security.Cryptography.RSAParameters ExportParameters( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportParameters), typeof(Boolean) );
            return default( System.Security.Cryptography.RSAParameters );

		}
        public override void ImportParameters( System.Security.Cryptography.RSAParameters parameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ImportParameters), typeof(RSAParameters) );
		}
        public byte[][] SignData( byte[] buffer, System.Object halg ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Object) );
            return default( byte[][] );

		}
        public byte[][] SignData( System.IO.Stream inputStream, System.Object halg ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Stream), typeof(Object) );
            return default( byte[][] );

		}
        public byte[][] SignData( byte[] buffer, int offset, int count, System.Object halg ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(Object) );
            return default( byte[][] );

		}
        public byte[][] SignHash( byte[] rgbHash, string str ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignHash), typeof(Byte[]), typeof(String) );
            return default( byte[][] );

		}
        public bool VerifyData( byte[] buffer, System.Object halg, byte[] signature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Object), typeof(Byte[]) );
            return default( bool );

		}
        public bool VerifyHash( byte[] rgbHash, string str, byte[] rgbSignature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyHash), typeof(Byte[]), typeof(String), typeof(Byte[]) );
            return default( bool );

		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public byte[][] ExportCspBlob( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportCspBlob), typeof(Boolean) );
            return default( byte[][] );

		}
        public void ImportCspBlob( byte[] keyBlob ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ImportCspBlob), typeof(Byte[]) );
		}
    }
}