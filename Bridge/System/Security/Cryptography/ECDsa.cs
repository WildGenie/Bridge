// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.IO;

namespace System.Security.Cryptography {
    public abstract class ECDsa: System.Security.Cryptography.AsymmetricAlgorithm {

        public override string KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (String);
			}
		}
        public override string SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (String);
			}
		}
        public new static System.Security.Cryptography.ECDsa Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.ECDsa );

		}
        public new static System.Security.Cryptography.ECDsa Create( string algorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.ECDsa );

		}
        public static System.Security.Cryptography.ECDsa Create( System.Security.Cryptography.ECCurve curve ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(ECCurve) );
            return default( System.Security.Cryptography.ECDsa );

		}
        public static System.Security.Cryptography.ECDsa Create( System.Security.Cryptography.ECParameters parameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(ECParameters) );
            return default( System.Security.Cryptography.ECDsa );

		}
        public abstract byte[][] SignHash( byte[] hash );

        public abstract bool VerifyHash( byte[] hash, byte[] signature );

        protected virtual byte[][] HashData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        protected virtual byte[][] HashData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public bool VerifyData( byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public virtual bool VerifyData( byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public bool VerifyData( System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Stream), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public virtual System.Security.Cryptography.ECParameters ExportParameters( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportParameters), typeof(Boolean) );
            return default( System.Security.Cryptography.ECParameters );

		}
        public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportExplicitParameters), typeof(Boolean) );
            return default( System.Security.Cryptography.ECParameters );

		}
        public virtual void ImportParameters( System.Security.Cryptography.ECParameters parameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ImportParameters), typeof(ECParameters) );
		}
        public virtual void GenerateKey( System.Security.Cryptography.ECCurve curve ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateKey), typeof(ECCurve) );
		}
        internal static System.Exception HashAlgorithmNameNullOrEmpty() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashAlgorithmNameNullOrEmpty) );
            return default( System.Exception );

		}
    }
}