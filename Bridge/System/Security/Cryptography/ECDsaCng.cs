// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.IO;
using System.Security;

namespace System.Security.Cryptography {
    public class ECDsaCng: System.Security.Cryptography.ECDsa {

        public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
        public System.Security.Cryptography.CngKey Key { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Key));
				return default (CngKey);
			}
		}
        public ECDsaCng(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaCng));
            }
        public ECDsaCng( int keySize )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaCng), typeof(Int32));
            }
        public ECDsaCng( System.Security.Cryptography.CngKey key )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaCng), typeof(CngKey));
            }
        public ECDsaCng( System.Security.Cryptography.ECCurve curve )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaCng), typeof(ECCurve));
            }
        public override byte[][] SignHash( byte[] hash ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignHash), typeof(Byte[]) );
            return default( byte[][] );
        
		}
        public override bool VerifyHash( byte[] hash, byte[] signature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyHash), typeof(Byte[]), typeof(Byte[]) );
            return default( bool );
        
		}
        public void FromXmlString( string xml, System.Security.Cryptography.ECKeyXmlFormat format ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXmlString), typeof(String), typeof(ECKeyXmlFormat) ); 
		}
        public byte[][] SignData( byte[] data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]) );
            return default( byte[][] );
        
		}
        public byte[][] SignData( System.IO.Stream data ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Stream) );
            return default( byte[][] );
        
		}
        public byte[][] SignData( byte[] data, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            return default( byte[][] );
        
		}
        public string ToXmlString( System.Security.Cryptography.ECKeyXmlFormat format ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXmlString), typeof(ECKeyXmlFormat) );
            return default( string );
        
		}
        public bool VerifyData( byte[] data, byte[] signature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Byte[]) );
            return default( bool );
        
		}
        public bool VerifyData( System.IO.Stream data, byte[] signature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Stream), typeof(Byte[]) );
            return default( bool );
        
		}
        public bool VerifyData( byte[] data, int offset, int count, byte[] signature ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(Byte[]) );
            return default( bool );
        
		}
    }
}