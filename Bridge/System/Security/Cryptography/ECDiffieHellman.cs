// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {
    public abstract class ECDiffieHellman: System.Security.Cryptography.AsymmetricAlgorithm {

        public override string KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (String);
			}
		}
        public override string SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (String);
			}
		}
        public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }

        public new static System.Security.Cryptography.ECDiffieHellman Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.ECDiffieHellman );

		}
        public new static System.Security.Cryptography.ECDiffieHellman Create( string algorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.ECDiffieHellman );

		}
        public static System.Security.Cryptography.ECDiffieHellman Create( System.Security.Cryptography.ECCurve curve ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(ECCurve) );
            return default( System.Security.Cryptography.ECDiffieHellman );

		}
        public static System.Security.Cryptography.ECDiffieHellman Create( System.Security.Cryptography.ECParameters parameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(ECParameters) );
            return default( System.Security.Cryptography.ECDiffieHellman );

		}
        public virtual byte[][] DeriveKeyMaterial( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyMaterial), typeof(ECDiffieHellmanPublicKey) );
            return default( byte[][] );

		}
        public byte[][] DeriveKeyFromHash( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyFromHash), typeof(ECDiffieHellmanPublicKey), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] DeriveKeyFromHash( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyFromHash), typeof(ECDiffieHellmanPublicKey), typeof(HashAlgorithmName), typeof(Byte[]), typeof(Byte[]) );
            return default( byte[][] );

		}
        public byte[][] DeriveKeyFromHmac( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyFromHmac), typeof(ECDiffieHellmanPublicKey), typeof(HashAlgorithmName), typeof(Byte[]) );
            return default( byte[][] );

		}
        public virtual byte[][] DeriveKeyFromHmac( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyFromHmac), typeof(ECDiffieHellmanPublicKey), typeof(HashAlgorithmName), typeof(Byte[]), typeof(Byte[]), typeof(Byte[]) );
            return default( byte[][] );

		}
        public virtual byte[][] DeriveKeyTls( System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeriveKeyTls), typeof(ECDiffieHellmanPublicKey), typeof(Byte[]), typeof(Byte[]) );
            return default( byte[][] );

		}
        public virtual System.Security.Cryptography.ECParameters ExportParameters( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportParameters), typeof(Boolean) );
            return default( System.Security.Cryptography.ECParameters );

		}
        public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportExplicitParameters), typeof(Boolean) );
            return default( System.Security.Cryptography.ECParameters );

		}
        public virtual void ImportParameters( System.Security.Cryptography.ECParameters parameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ImportParameters), typeof(ECParameters) );
		}
        public virtual void GenerateKey( System.Security.Cryptography.ECCurve curve ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GenerateKey), typeof(ECCurve) );
		}
    }
}