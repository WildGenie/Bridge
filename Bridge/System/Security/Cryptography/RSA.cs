// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.IO;

namespace System.Security.Cryptography {
    public abstract class RSA: System.Security.Cryptography.AsymmetricAlgorithm {

        public override string KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (String);
			}
		}
        public override string SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (String);
			}
		}
        public new static System.Security.Cryptography.RSA Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.RSA );

		}
        public new static System.Security.Cryptography.RSA Create( string algName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.RSA );

		}
        public virtual byte[][] Encrypt( byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Encrypt), typeof(Byte[]), typeof(RSAEncryptionPadding) );
            return default( byte[][] );

		}
        public virtual byte[][] Decrypt( byte[] data, System.Security.Cryptography.RSAEncryptionPadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decrypt), typeof(Byte[]), typeof(RSAEncryptionPadding) );
            return default( byte[][] );

		}
        public virtual byte[][] SignHash( byte[] hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignHash), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( byte[][] );

		}
        public virtual bool VerifyHash( byte[] hash, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyHash), typeof(Byte[]), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( bool );

		}
        protected virtual byte[][] HashData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        protected virtual byte[][] HashData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public byte[][] SignData( byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Stream), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( byte[][] );

		}
        public bool VerifyData( byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( bool );

		}
        public virtual bool VerifyData( byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( bool );

		}
        public bool VerifyData( System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Stream), typeof(Byte[]), typeof(HashAlgorithmName), typeof(RSASignaturePadding) );
            return default( bool );

		}
        internal static System.Exception HashAlgorithmNameNullOrEmpty() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashAlgorithmNameNullOrEmpty) );
            return default( System.Exception );

		}
        public virtual byte[][] DecryptValue( byte[] rgb ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DecryptValue), typeof(Byte[]) );
            return default( byte[][] );

		}
        public virtual byte[][] EncryptValue( byte[] rgb ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EncryptValue), typeof(Byte[]) );
            return default( byte[][] );

		}
        public override void FromXmlString( string xmlString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXmlString), typeof(String) );
		}
        public override string ToXmlString( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXmlString), typeof(Boolean) );
            return default( string );

		}
        public abstract System.Security.Cryptography.RSAParameters ExportParameters( bool includePrivateParameters );

        public abstract void ImportParameters( System.Security.Cryptography.RSAParameters parameters );

    }
}