// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {
    public abstract class AsymmetricAlgorithm: System.IDisposable {

        public virtual int KeySize { get; set; }
        public virtual System.Security.Cryptography.KeySizes[][] LegalKeySizes {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LegalKeySizes));
				return default (KeySizes[][]);
			}
		}
        public virtual string SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (String);
			}
		}
        public virtual string KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (String);
			}
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public static System.Security.Cryptography.AsymmetricAlgorithm Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.AsymmetricAlgorithm );

		}
        public static System.Security.Cryptography.AsymmetricAlgorithm Create( string algName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.AsymmetricAlgorithm );

		}
        public virtual void FromXmlString( string xmlString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXmlString), typeof(String) );
		}
        public virtual string ToXmlString( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXmlString), typeof(Boolean) );
            return default( string );

		}
    }
}