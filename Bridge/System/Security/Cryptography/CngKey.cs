// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {
    public class CngKey: System.IDisposable {

        public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AlgorithmGroup));
				return default (CngAlgorithmGroup);
			}
		}
        public System.Security.Cryptography.CngAlgorithm Algorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Algorithm));
				return default (CngAlgorithm);
			}
		}
        public System.Security.Cryptography.CngExportPolicies ExportPolicy {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExportPolicy));
				return default (CngExportPolicies);
			}
		}
        public bool IsEphemeral {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEphemeral));
				return default (Boolean);
			}
		}
        public bool IsMachineKey {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsMachineKey));
				return default (Boolean);
			}
		}
        public string KeyName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyName));
				return default (String);
			}
		}
        public int KeySize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeySize));
				return default (Int32);
			}
		}
        public System.Security.Cryptography.CngKeyUsages KeyUsage {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyUsage));
				return default (CngKeyUsages);
			}
		}
        public System.IntPtr ParentWindowHandle { get; set; }
        public System.Security.Cryptography.CngProvider Provider {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Provider));
				return default (CngProvider);
			}
		}
        public string UniqueName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UniqueName));
				return default (String);
			}
		}
        public System.Security.Cryptography.CngUIPolicy UIPolicy {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UIPolicy));
				return default (CngUIPolicy);
			}
		}
        public static System.Security.Cryptography.CngKey Create( System.Security.Cryptography.CngAlgorithm algorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(CngAlgorithm) );
            return default( System.Security.Cryptography.CngKey );

		}
        public static System.Security.Cryptography.CngKey Create( System.Security.Cryptography.CngAlgorithm algorithm, string keyName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(CngAlgorithm), typeof(String) );
            return default( System.Security.Cryptography.CngKey );

		}
        public static System.Security.Cryptography.CngKey Create( System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(CngAlgorithm), typeof(String), typeof(CngKeyCreationParameters) );
            return default( System.Security.Cryptography.CngKey );

		}
        public void Delete() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Delete) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public static bool Exists( string keyName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Exists), typeof(String) );
            return default( bool );

		}
        public static bool Exists( string keyName, System.Security.Cryptography.CngProvider provider ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Exists), typeof(String), typeof(CngProvider) );
            return default( bool );

		}
        public static bool Exists( string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Exists), typeof(String), typeof(CngProvider), typeof(CngKeyOpenOptions) );
            return default( bool );

		}
        public static System.Security.Cryptography.CngKey Import( byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(CngKeyBlobFormat) );
            return default( System.Security.Cryptography.CngKey );

		}
        public static System.Security.Cryptography.CngKey Import( byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(CngKeyBlobFormat), typeof(CngProvider) );
            return default( System.Security.Cryptography.CngKey );

		}
        public byte[][] Export( System.Security.Cryptography.CngKeyBlobFormat format ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(CngKeyBlobFormat) );
            return default( byte[][] );

		}
        public System.Security.Cryptography.CngProperty GetProperty( string name, System.Security.Cryptography.CngPropertyOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProperty), typeof(String), typeof(CngPropertyOptions) );
            return default( System.Security.Cryptography.CngProperty );

		}
        public bool HasProperty( string name, System.Security.Cryptography.CngPropertyOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasProperty), typeof(String), typeof(CngPropertyOptions) );
            return default( bool );

		}
        public static System.Security.Cryptography.CngKey Open( string keyName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Open), typeof(String) );
            return default( System.Security.Cryptography.CngKey );

		}
        public static System.Security.Cryptography.CngKey Open( string keyName, System.Security.Cryptography.CngProvider provider ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Open), typeof(String), typeof(CngProvider) );
            return default( System.Security.Cryptography.CngKey );

		}
        public static System.Security.Cryptography.CngKey Open( string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Open), typeof(String), typeof(CngProvider), typeof(CngKeyOpenOptions) );
            return default( System.Security.Cryptography.CngKey );

		}

        public void SetProperty( System.Security.Cryptography.CngProperty property ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetProperty), typeof(CngProperty) );
		}
    }
}