// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {
    public struct ECCurve {

        internal byte[] A;

        internal byte[] B;

        internal byte[] Cofactor;

        internal System.Security.Cryptography.ECCurve.ECCurveType CurveType;

        internal System.Security.Cryptography.ECPoint G;

        internal System.Nullable<System.Security.Cryptography.HashAlgorithmName> Hash;

        internal byte[] Order;

        internal byte[] Polynomial;

        internal byte[] Prime;

        internal byte[] Seed;

        public bool IsCharacteristic2 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsCharacteristic2));
				return default (Boolean);
			}
		}
        public bool IsExplicit { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsExplicit));
				return default (Boolean);
			}
		}
        public bool IsNamed { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsNamed));
				return default (Boolean);
			}
		}
        public bool IsPrime { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsPrime));
				return default (Boolean);
			}
		}
        public System.Security.Cryptography.Oid Oid { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Oid));
				return default (Oid);
			}
		}
        public static System.Security.Cryptography.ECCurve CreateFromFriendlyName( string oidFriendlyName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromFriendlyName), typeof(String) );
            return default( System.Security.Cryptography.ECCurve );
        
		}
        public static System.Security.Cryptography.ECCurve CreateFromOid( System.Security.Cryptography.Oid curveOid ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromOid), typeof(Oid) );
            return default( System.Security.Cryptography.ECCurve );
        
		}
        public static System.Security.Cryptography.ECCurve CreateFromValue( string oidValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromValue), typeof(String) );
            return default( System.Security.Cryptography.ECCurve );
        
		}
        public void Validate() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Validate) ); 
		}
        public enum ECCurveType {
            Implicit = 0,
            PrimeShortWeierstrass = 1,
            PrimeTwistedEdwards = 2,
            PrimeMontgomery = 3,
            Characteristic2 = 4,
            Named = 5
        }
        public static class NamedCurves {

        public static System.Security.Cryptography.ECCurve brainpoolP160r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP160r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP160t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP160t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP192r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP192r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP192t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP192t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP224r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP224r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP224t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP224t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP256r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP256r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP256t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP256t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP320r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP320r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP320t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP320t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP384r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP384r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP384t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP384t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP512r1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP512r1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve brainpoolP512t1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(brainpoolP512t1));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve nistP256 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(nistP256));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve nistP384 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(nistP384));
				return default (ECCurve);
			}
		}
        public static System.Security.Cryptography.ECCurve nistP521 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(nistP521));
				return default (ECCurve);
			}
		}
        }
    }
}