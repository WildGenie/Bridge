// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {
    public class CngAlgorithm: System.IEquatable<System.Security.Cryptography.CngAlgorithm> {

        public string Algorithm { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Algorithm));
				return default (String);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm Rsa { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Rsa));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDiffieHellman { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDiffieHellman));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP256 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDiffieHellmanP256));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP384 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDiffieHellmanP384));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDiffieHellmanP521 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDiffieHellmanP521));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDsa { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsa));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDsaP256 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaP256));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDsaP384 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaP384));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm ECDsaP521 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ECDsaP521));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm MD5 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MD5));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm Sha1 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sha1));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm Sha256 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sha256));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm Sha384 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sha384));
				return default (CngAlgorithm);
			}
		}
        public static System.Security.Cryptography.CngAlgorithm Sha512 { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sha512));
				return default (CngAlgorithm);
			}
		}
        public CngAlgorithm( string algorithm )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CngAlgorithm), typeof(String));
            }
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );
        
		}
        public bool Equals( System.Security.Cryptography.CngAlgorithm other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(CngAlgorithm) );
            return default( bool );
        
		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );
        
		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );
        
		}
    }
}