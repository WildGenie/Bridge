// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading.Tasks;
using System.Threading;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace System.Security.Cryptography {

    public class CryptoStream : Stream {
        public CryptoStream( Stream stream, ICryptoTransform transform, CryptoStreamMode mode ) { }
        public CryptoStream() { }

        public override bool CanRead => default( bool );

        public override bool CanSeek => default( bool );

        public override bool CanWrite => default( bool );

        public override long Length => default( long );

        public override long Position {
            get => default( long );
            set { }
        }

        public bool HasFlushedFinalBlock => default( bool );

        public void FlushFinalBlock() { }
        public override void Flush() { }

        //This method not implemented in Bridge, so I comment  override
        public /*override*/ Task FlushAsync( CancellationToken cancellationToken ) {
            return default( Task );
        }

        public override long Seek( long offset, SeekOrigin origin ) {
            return default( long );
        }

        public override void SetLength( long value ) { }

        public override int Read( [ In ] [ Out ] byte[] buffer, int offset, int count ) {
            buffer = default( byte[] );
            return default( int );
        }

        //This method not implemented in Bridge, so I comment  override
        public /*override*/ Task<int> ReadAsync( byte[] buffer, int offset, int count,
            CancellationToken cancellationToken ) {
            return default( Task<int> );
        }

        public override void Write( byte[] buffer, int offset, int count ) { }

        //This method not implemented in Bridge, so I comment  override
        public /*override*/
            Task WriteAsync( byte[] buffer, int offset, int count, CancellationToken cancellationToken ) {
            return default( Task );
        }

        public void Clear() { }
    }

}
