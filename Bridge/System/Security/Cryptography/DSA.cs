// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.IO;

namespace System.Security.Cryptography {
    public abstract class DSA: System.Security.Cryptography.AsymmetricAlgorithm {

        public new static System.Security.Cryptography.DSA Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.DSA );

		}
        public new static System.Security.Cryptography.DSA Create( string algName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.DSA );

		}
        public abstract byte[][] CreateSignature( byte[] rgbHash );

        public abstract bool VerifySignature( byte[] rgbHash, byte[] rgbSignature );

        protected virtual byte[][] HashData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        protected virtual byte[][] HashData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public byte[][] SignData( byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public virtual byte[][] SignData( System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignData), typeof(Stream), typeof(HashAlgorithmName) );
            return default( byte[][] );

		}
        public bool VerifyData( byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public virtual bool VerifyData( byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public virtual bool VerifyData( System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerifyData), typeof(Stream), typeof(Byte[]), typeof(HashAlgorithmName) );
            return default( bool );

		}
        public override void FromXmlString( string xmlString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXmlString), typeof(String) );
		}
        public override string ToXmlString( bool includePrivateParameters ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXmlString), typeof(Boolean) );
            return default( string );

		}
        public abstract System.Security.Cryptography.DSAParameters ExportParameters( bool includePrivateParameters );

        public abstract void ImportParameters( System.Security.Cryptography.DSAParameters parameters );

        internal static System.Exception HashAlgorithmNameNullOrEmpty() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashAlgorithmNameNullOrEmpty) );
            return default( System.Exception );

		}
    }
}