// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography {

    public abstract class SymmetricAlgorithm : IDisposable {
        public virtual int BlockSize {
            get => default( int );
            set { }
        }

        public virtual int FeedbackSize {
            get => default( int );
            set { }
        }

        public virtual byte[] IV {
            get => default( byte[] );
            set { }
        }

        public virtual byte[] Key {
            get => default( byte[] );
            set { }
        }

        public virtual KeySizes[] LegalBlockSizes => default( KeySizes[] );

        public virtual KeySizes[] LegalKeySizes => default( KeySizes[] );

        public virtual int KeySize {
            get => default( int );
            set { }
        }

        public virtual CipherMode Mode {
            get => default( CipherMode );
            set { }
        }

        public virtual PaddingMode Padding {
            get => default( PaddingMode );
            set { }
        }

        public void Dispose() { }
        public void Clear() { }

        public bool ValidKeySize( int bitLength ) {
            return default( bool );
        }

        public static SymmetricAlgorithm Create() {
            return default( SymmetricAlgorithm );
        }

        public static SymmetricAlgorithm Create( string algName ) {
            return default( SymmetricAlgorithm );
        }

        public virtual ICryptoTransform CreateEncryptor() {
            return default( ICryptoTransform );
        }

        public abstract ICryptoTransform CreateEncryptor( byte[] rgbKey, byte[] rgbIV );

        public virtual ICryptoTransform CreateDecryptor() {
            return default( ICryptoTransform );
        }

        public abstract ICryptoTransform CreateDecryptor( byte[] rgbKey, byte[] rgbIV );
        public abstract void GenerateKey();
        public abstract void GenerateIV();
    }

}
