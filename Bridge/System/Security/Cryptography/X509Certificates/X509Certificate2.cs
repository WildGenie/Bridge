// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography.X509Certificates {
    public class X509Certificate2: System.Security.Cryptography.X509Certificates.X509Certificate {

        public bool Archived { get; set; }
        public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Extensions));
				return default (X509ExtensionCollection);
			}
		}
        public string FriendlyName { get; set; }
        public bool HasPrivateKey {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasPrivateKey));
				return default (Boolean);
			}
		}
        public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IssuerName));
				return default (X500DistinguishedName);
			}
		}
        public System.DateTime NotAfter {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NotAfter));
				return default (DateTime);
			}
		}
        public System.DateTime NotBefore {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NotBefore));
				return default (DateTime);
			}
		}
        public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }
        public System.Security.Cryptography.X509Certificates.PublicKey PublicKey {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PublicKey));
				return default (PublicKey);
			}
		}
        public byte[][] RawData {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RawData));
				return default (Byte[][]);
			}
		}
        public string SerialNumber {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialNumber));
				return default (String);
			}
		}
        public System.Security.Cryptography.Oid SignatureAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureAlgorithm));
				return default (Oid);
			}
		}
        public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SubjectName));
				return default (X500DistinguishedName);
			}
		}
        public string Thumbprint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Thumbprint));
				return default (String);
			}
		}
        public int Version {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Version));
				return default (Int32);
			}
		}

        public X509Certificate2(  ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2));
            }
        public X509Certificate2( byte[] rawData ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(Byte[]));
            }
        public X509Certificate2( byte[] rawData, string password ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(Byte[]), typeof(String));
            }
        public X509Certificate2( byte[] rawData, System.Security.SecureString password ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(Byte[]), typeof(SecureString));
            }
        public X509Certificate2( byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(Byte[]), typeof(String), typeof(X509KeyStorageFlags));
            }
        public X509Certificate2( byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(Byte[]), typeof(SecureString), typeof(X509KeyStorageFlags));
            }
        public X509Certificate2( string fileName ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(String));
            }
        public X509Certificate2( string fileName, string password ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(String), typeof(String));
            }
        public X509Certificate2( string fileName, System.Security.SecureString password ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(String), typeof(SecureString));
            }
        public X509Certificate2( string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(String), typeof(String), typeof(X509KeyStorageFlags));
            }
        public X509Certificate2( string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(String), typeof(SecureString), typeof(X509KeyStorageFlags));
            }
        public X509Certificate2( System.IntPtr handle ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(IntPtr));
            }
        public X509Certificate2( System.Security.Cryptography.X509Certificates.X509Certificate certificate ) : base( default( byte[] ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate2), typeof(X509Certificate));
            }
        public string GetNameInfo( System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetNameInfo), typeof(X509NameType), typeof(Boolean) );
            return default( string );

		}
        public override void Import( byte[] rawData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]) );
		}
        public override void Import( byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(String), typeof(X509KeyStorageFlags) );
		}
        public override void Import( byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(SecureString), typeof(X509KeyStorageFlags) );
		}
        public override void Import( string fileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String) );
		}
        public override void Import( string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String), typeof(String), typeof(X509KeyStorageFlags) );
		}
        public override void Import( string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String), typeof(SecureString), typeof(X509KeyStorageFlags) );
		}
        public override byte[][] Export( System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(X509ContentType), typeof(String) );
            return default( byte[][] );

		}
        public override void Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) );
		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public override string ToString( bool verbose ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean) );
            return default( string );

		}
        public bool Verify() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Verify) );
            return default( bool );

		}
        public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType( byte[] rawData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCertContentType), typeof(Byte[]) );
            return default( System.Security.Cryptography.X509Certificates.X509ContentType );

		}
        public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType( string fileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCertContentType), typeof(String) );
            return default( System.Security.Cryptography.X509Certificates.X509ContentType );

		}
    }
}