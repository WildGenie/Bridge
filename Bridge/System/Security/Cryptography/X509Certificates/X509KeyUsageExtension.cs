// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;

namespace System.Security.Cryptography.X509Certificates {
    public class X509KeyUsageExtension: System.Security.Cryptography.X509Certificates.X509Extension {

        internal const string oid = "2.5.29.15";

        internal const string friendlyName = "Key Usage";

        internal const System.Security.Cryptography.X509Certificates.X509KeyUsageFlags all = System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.EncipherOnly | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. CrlSign | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. KeyCertSign | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. KeyAgreement | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. DataEncipherment | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. KeyEncipherment | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. NonRepudiation | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. DigitalSignature | System.Security.Cryptography.X509Certificates.X509KeyUsageFlags. DecipherOnly;

        public System.Security.Cryptography.X509Certificates.X509KeyUsageFlags KeyUsages {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyUsages));
				return default (X509KeyUsageFlags);
			}
		}
        public X509KeyUsageExtension(  ) : base( default( System.Security.Cryptography.AsnEncodedData ), default( bool ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509KeyUsageExtension));
            }
        public X509KeyUsageExtension( System.Security.Cryptography.AsnEncodedData encodedKeyUsage, bool critical ) : base( default( System.Security.Cryptography.AsnEncodedData ), default( bool ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509KeyUsageExtension), typeof(AsnEncodedData), typeof(Boolean));
            }
        public X509KeyUsageExtension( System.Security.Cryptography.X509Certificates.X509KeyUsageFlags keyUsages, bool critical ) : base( default( System.Security.Cryptography.AsnEncodedData ), default( bool ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509KeyUsageExtension), typeof(X509KeyUsageFlags), typeof(Boolean));
            }
        public override void CopyFrom( System.Security.Cryptography.AsnEncodedData asnEncodedData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyFrom), typeof(AsnEncodedData) );
		}
        internal System.Security.Cryptography.X509Certificates.X509KeyUsageFlags GetValidFlags( System.Security.Cryptography.X509Certificates.X509KeyUsageFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetValidFlags), typeof(X509KeyUsageFlags) );
            return default( System.Security.Cryptography.X509Certificates.X509KeyUsageFlags );

		}
        internal byte[][] Encode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Encode) );
            return default( byte[][] );

		}
        internal override string ToString( bool multiLine ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean) );
            return default( string );

		}
    }
}