// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;
using System.Security;

namespace System.Security.Cryptography.X509Certificates {
    public class AuthenticodeSignatureInformation {

        public string Description { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Description));
				return default (String);
			}
		}
        public System.Uri DescriptionUrl { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DescriptionUrl));
				return default (Uri);
			}
		}
        public string HashAlgorithm { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashAlgorithm));
				return default (String);
			}
		}
        public int HResult { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HResult));
				return default (Int32);
			}
		}
        public System.Security.Cryptography.X509Certificates.X509Chain SignatureChain { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignatureChain));
				return default (X509Chain);
			}
		}
        public System.Security.Cryptography.X509Certificates.X509Certificate2 SigningCertificate { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SigningCertificate));
				return default (X509Certificate2);
			}
		}
        public System.Security.Cryptography.X509Certificates.TimestampInformation Timestamp { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Timestamp));
				return default (TimestampInformation);
			}
		}
        public System.Security.Cryptography.X509Certificates.TrustStatus TrustStatus { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TrustStatus));
				return default (TrustStatus);
			}
		}
        public System.Security.Cryptography.SignatureVerificationResult VerificationResult { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(VerificationResult));
				return default (SignatureVerificationResult);
			}
		}
    }
}