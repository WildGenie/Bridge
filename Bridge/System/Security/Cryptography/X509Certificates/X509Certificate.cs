// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;
using System.Security.Cryptography.X509Certificates;
using System.Security;
using System.Security.Cryptography;

namespace System.Security.Cryptography.X509Certificates {
    public class X509Certificate: System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Runtime.Serialization.ISerializable {

        internal bool IsValid {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsValid));
				return default (Boolean);
			}
		}
        public string Issuer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Issuer));
				return default (String);
			}
		}
        public string Subject {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Subject));
				return default (String);
			}
		}
        public System.IntPtr Handle {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Handle));
				return default (IntPtr);
			}
		}
        public X509Certificate( byte[] data )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(Byte[]));
            }
        public X509Certificate( System.IntPtr handle )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(IntPtr));
            }
        public X509Certificate( System.Security.Cryptography.X509Certificates.X509Certificate cert )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(X509Certificate));
            }
        public X509Certificate(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate));
            }
        public X509Certificate( byte[] rawData, string password )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(Byte[]), typeof(String));
            }
        public X509Certificate( byte[] rawData, System.Security.SecureString password )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(Byte[]), typeof(SecureString));
            }
        public X509Certificate( byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(Byte[]), typeof(String), typeof(X509KeyStorageFlags));
            }
        public X509Certificate( byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(Byte[]), typeof(SecureString), typeof(X509KeyStorageFlags));
            }
        public X509Certificate( string fileName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(String));
            }
        public X509Certificate( string fileName, string password )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(String), typeof(String));
            }
        public X509Certificate( string fileName, System.Security.SecureString password )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(String), typeof(SecureString));
            }
        public X509Certificate( string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(String), typeof(String), typeof(X509KeyStorageFlags));
            }
        public X509Certificate( string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(String), typeof(SecureString), typeof(X509KeyStorageFlags));
            }
        public X509Certificate( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(X509Certificate), typeof(SerializationInfo), typeof(StreamingContext));
            }
        public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromCertFile( string filename ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromCertFile), typeof(String) );
            return default( System.Security.Cryptography.X509Certificates.X509Certificate );

		}
        public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromSignedFile( string filename ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFromSignedFile), typeof(String) );
            return default( System.Security.Cryptography.X509Certificates.X509Certificate );

		}
        internal void ThrowIfContextInvalid() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowIfContextInvalid) );
		}
        public virtual bool Equals( System.Security.Cryptography.X509Certificates.X509Certificate other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(X509Certificate) );
            return default( bool );

		}
        public virtual byte[][] GetCertHash() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCertHash) );
            return default( byte[][] );

		}
        public virtual string GetCertHashString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCertHashString) );
            return default( string );

		}
        public virtual string GetEffectiveDateString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEffectiveDateString) );
            return default( string );

		}
        public virtual string GetExpirationDateString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetExpirationDateString) );
            return default( string );

		}
        public virtual string GetFormat() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetFormat) );
            return default( string );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}
        public virtual string GetIssuerName() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIssuerName) );
            return default( string );

		}
        public virtual string GetKeyAlgorithm() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetKeyAlgorithm) );
            return default( string );

		}
        public virtual byte[][] GetKeyAlgorithmParameters() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetKeyAlgorithmParameters) );
            return default( byte[][] );

		}
        public virtual string GetKeyAlgorithmParametersString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetKeyAlgorithmParametersString) );
            return default( string );

		}
        public virtual string GetName() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetName) );
            return default( string );

		}
        public virtual byte[][] GetPublicKey() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPublicKey) );
            return default( byte[][] );

		}
        public virtual string GetPublicKeyString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPublicKeyString) );
            return default( string );

		}
        public virtual byte[][] GetRawCertData() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRawCertData) );
            return default( byte[][] );

		}
        public virtual string GetRawCertDataString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRawCertDataString) );
            return default( string );

		}
        public virtual byte[][] GetSerialNumber() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSerialNumber) );
            return default( byte[][] );

		}
        public virtual string GetSerialNumberString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSerialNumberString) );
            return default( string );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public virtual string ToString( bool fVerbose ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean) );
            return default( string );

		}
        protected static string FormatDate( System.DateTime date ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FormatDate), typeof(DateTime) );
            return default( string );

		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public virtual byte[][] Export( System.Security.Cryptography.X509Certificates.X509ContentType contentType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(X509ContentType) );
            return default( byte[][] );

		}
        public virtual byte[][] Export( System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(X509ContentType), typeof(String) );
            return default( byte[][] );

		}
        public virtual byte[][] Export( System.Security.Cryptography.X509Certificates.X509ContentType contentType, System.Security.SecureString password ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(X509ContentType), typeof(SecureString) );
            return default( byte[][] );

		}
        internal byte[][] Export( System.Security.Cryptography.X509Certificates.X509ContentType contentType, byte[] password ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Export), typeof(X509ContentType), typeof(Byte[]) );
            return default( byte[][] );

		}
        public virtual void Import( byte[] rawData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]) );
		}
        public virtual void Import( byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(String), typeof(X509KeyStorageFlags) );
		}
        public virtual void Import( byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(Byte[]), typeof(SecureString), typeof(X509KeyStorageFlags) );
		}
        public virtual void Import( string fileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String) );
		}
        public virtual void Import( string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String), typeof(String), typeof(X509KeyStorageFlags) );
		}
        public virtual void Import( string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Import), typeof(String), typeof(SecureString), typeof(X509KeyStorageFlags) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public virtual void Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) );
		}
        void @System.Runtime.Serialization.IDeserializationCallback.OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Runtime.Serialization.IDeserializationCallback.OnDeserialization), typeof(Object) );
		}
    }
}