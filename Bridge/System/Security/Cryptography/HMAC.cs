// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security.Cryptography;
using System;

namespace System.Security.Cryptography {
    public abstract class HMAC: System.Security.Cryptography.KeyedHashAlgorithm {

        internal int BlockSizeValue {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BlockSizeValue));
				return default (Int32);
			}
		}
        public override byte[][] Key { get; set; }
        public string HashName { get; set; }
        internal void InitializeKey( byte[] key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InitializeKey), typeof(Byte[]) );
		}
        public new static System.Security.Cryptography.HMAC Create() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create) );
            return default( System.Security.Cryptography.HMAC );

		}
        public new static System.Security.Cryptography.HMAC Create( string algorithmName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(String) );
            return default( System.Security.Cryptography.HMAC );

		}
        public void Initialize() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Initialize) );
		}
        protected void HashCore( byte[] rgb, int ib, int cb ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashCore), typeof(Byte[]), typeof(Int32), typeof(Int32) );
		}
        protected byte[][] HashFinal() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashFinal) );
            return default( byte[][] );

		}
        protected new void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        internal static System.Security.Cryptography.HashAlgorithm GetHashAlgorithmWithFipsFallback( System.Func<System.Security.Cryptography.HashAlgorithm> createStandardHashAlgorithmCallback, System.Func<System.Security.Cryptography.HashAlgorithm> createFipsHashAlgorithmCallback ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashAlgorithmWithFipsFallback), typeof(Func<System.Security.Cryptography.HashAlgorithm>), typeof(Func<System.Security.Cryptography.HashAlgorithm>) );
            return default( System.Security.Cryptography.HashAlgorithm );

		}
    }
}