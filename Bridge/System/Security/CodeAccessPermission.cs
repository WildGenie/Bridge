// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security;
using System;
using System.Security.Permissions;

namespace System.Security {
    public abstract class CodeAccessPermission: System.Security.IPermission, System.Security.IStackWalk {

        public void Assert() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Assert) );
		}
        public abstract System.Security.IPermission Copy();

        public void Demand() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Demand) );
		}
        public void Deny() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Deny) );
		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public abstract void FromXml( System.Security.SecurityElement elem );

        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}
        public abstract System.Security.IPermission Intersect( System.Security.IPermission target );

        public abstract bool IsSubsetOf( System.Security.IPermission target );

        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public abstract System.Security.SecurityElement ToXml();

        public virtual System.Security.IPermission Union( System.Security.IPermission other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Union), typeof(IPermission) );
            return default( System.Security.IPermission );

		}
        public void PermitOnly() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PermitOnly) );
		}
        public static void RevertAll() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RevertAll) );
		}
        public static void RevertAssert() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RevertAssert) );
		}
        public static void RevertDeny() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RevertDeny) );
		}
        public static void RevertPermitOnly() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RevertPermitOnly) );
		}
        internal System.Security.SecurityElement Element( int version ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Element), typeof(Int32) );
            return default( System.Security.SecurityElement );

		}
        internal static System.Security.Permissions.PermissionState CheckPermissionState( System.Security.Permissions.PermissionState state, bool allowUnrestricted ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckPermissionState), typeof(PermissionState), typeof(Boolean) );
            return default( System.Security.Permissions.PermissionState );

		}
        internal static int CheckSecurityElement( System.Security.SecurityElement se, string parameterName, int minimumVersion, int maximumVersion ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckSecurityElement), typeof(SecurityElement), typeof(String), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal static bool IsUnrestricted( System.Security.SecurityElement se ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsUnrestricted), typeof(SecurityElement) );
            return default( bool );

		}
        internal static void ThrowInvalidPermission( System.Security.IPermission target, System.Type expected ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowInvalidPermission), typeof(IPermission), typeof(Type) );
		}
    }
}