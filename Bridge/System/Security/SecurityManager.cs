// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections;
using System.Reflection;
using System.Security;
using System.Security.Policy;
using System.Security.Permissions;

namespace System.Security {
    public static class SecurityManager {

        public static bool CheckExecutionRights { get; set; }
        public static bool SecurityEnabled { get; set; }
        internal static System.Collections.IEnumerator Hierarchy {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hierarchy));
				return default (IEnumerator);
			}
		}
        internal static System.Security.Policy.PolicyLevel ResolvingPolicyLevel {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvingPolicyLevel));
				return default (PolicyLevel);
			}
		}
        internal static System.Security.IPermission UnmanagedCode {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnmanagedCode));
				return default (IPermission);
			}
		}
        internal static bool CheckElevatedPermissions() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckElevatedPermissions) );
            return default( bool );

		}
        internal static void EnsureElevatedPermissions() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnsureElevatedPermissions) );
		}
        public static void GetZoneAndOrigin( out System.Collections.ArrayList zone, out System.Collections.ArrayList origin ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetZoneAndOrigin), typeof(ArrayList), typeof(ArrayList) );
            zone = default( System.Collections.ArrayList ); origin = default( System.Collections.ArrayList );

		}
        public static bool IsGranted( System.Security.IPermission perm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsGranted), typeof(IPermission) );
            return default( bool );

		}
        internal static bool IsGranted( System.Reflection.Assembly a, System.Security.IPermission perm ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsGranted), typeof(Assembly), typeof(IPermission) );
            return default( bool );

		}
        public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile( string path, System.Security.PolicyLevelType type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LoadPolicyLevelFromFile), typeof(String), typeof(PolicyLevelType) );
            return default( System.Security.Policy.PolicyLevel );

		}
        public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString( string str, System.Security.PolicyLevelType type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LoadPolicyLevelFromString), typeof(String), typeof(PolicyLevelType) );
            return default( System.Security.Policy.PolicyLevel );

		}
        public static System.Collections.IEnumerator PolicyHierarchy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PolicyHierarchy) );
            return default( System.Collections.IEnumerator );

		}
        public static System.Security.PermissionSet ResolvePolicy( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicy), typeof(Evidence) );
            return default( System.Security.PermissionSet );

		}
        public static System.Security.PermissionSet ResolvePolicy( System.Security.Policy.Evidence[] evidences ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicy), typeof(Evidence[]) );
            return default( System.Security.PermissionSet );

		}
        public static System.Security.PermissionSet ResolveSystemPolicy( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolveSystemPolicy), typeof(Evidence) );
            return default( System.Security.PermissionSet );

		}
        public static System.Security.PermissionSet ResolvePolicy( System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicy), typeof(Evidence), typeof(PermissionSet), typeof(PermissionSet), typeof(PermissionSet), typeof(PermissionSet) );
            denied = default( System.Security.PermissionSet );

            return default( System.Security.PermissionSet );

		}
        public static System.Collections.IEnumerator ResolvePolicyGroups( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicyGroups), typeof(Evidence) );
            return default( System.Collections.IEnumerator );

		}
        public static void SavePolicy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SavePolicy) );
		}
        public static void SavePolicyLevel( System.Security.Policy.PolicyLevel level ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SavePolicyLevel), typeof(PolicyLevel) );
		}
        internal static bool ResolvePolicyLevel( ref System.Security.PermissionSet ps, System.Security.Policy.PolicyLevel pl, System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolvePolicyLevel), typeof(PermissionSet), typeof(PolicyLevel), typeof(Evidence) );
            return default( bool );

		}
        internal static void ResolveIdentityPermissions( System.Security.PermissionSet ps, System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResolveIdentityPermissions), typeof(PermissionSet), typeof(Evidence) );
		}
        internal static System.Security.PermissionSet Decode( System.IntPtr permissions, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decode), typeof(IntPtr), typeof(Int32) );
            return default( System.Security.PermissionSet );

		}
        internal static System.Security.PermissionSet Decode( byte[] encodedPermissions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Decode), typeof(Byte[]) );
            return default( System.Security.PermissionSet );

		}
        public static System.Security.PermissionSet GetStandardSandbox( System.Security.Policy.Evidence evidence ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStandardSandbox), typeof(Evidence) );
            return default( System.Security.PermissionSet );

		}
        public static bool CurrentThreadRequiresSecurityContextCapture() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentThreadRequiresSecurityContextCapture) );
            return default( bool );

		}
    }
}