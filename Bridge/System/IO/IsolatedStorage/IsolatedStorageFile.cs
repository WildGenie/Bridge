// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Policy;
using System.Threading;
using System.IO;
using System.Collections;
using System.IO.IsolatedStorage;
using System.Security;

namespace System.IO.IsolatedStorage {
    public class IsolatedStorageFile: System.IDisposable {

        public long CurrentSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentSize));
				return 0;
			}
		}
        public long MaximumSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaximumSize));
				return 0;
			}
		}
        internal string Root {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Root));
				return default (String);
			}
		}
        public long AvailableFreeSpace {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AvailableFreeSpace));
				return default (Int64);
			}
		}
        public long Quota {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Quota));
				return default (Int64);
			}
		}
        public long UsedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UsedSize));
				return default (Int64);
			}
		}
        public static bool IsEnabled {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEnabled));
				return default (Boolean);
			}
		}
        internal bool IsClosed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsClosed));
				return default (Boolean);
			}
		}
        internal bool IsDisposed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDisposed));
				return default (Boolean);
			}
		}
        public static System.Collections.IEnumerator GetEnumerator( System.IO.IsolatedStorage.IsolatedStorageScope scope ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator), typeof(IsolatedStorageScope) );
            return default( System.Collections.IEnumerator );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore( System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Security.Policy.Evidence domainEvidence, System.Type domainEvidenceType, System.Security.Policy.Evidence assemblyEvidence, System.Type assemblyEvidenceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStore), typeof(IsolatedStorageScope), typeof(Evidence), typeof(Type), typeof(Evidence), typeof(Type) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore( System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Object domainIdentity, System.Object assemblyIdentity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStore), typeof(IsolatedStorageScope), typeof(Object), typeof(Object) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore( System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Type domainEvidenceType, System.Type assemblyEvidenceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStore), typeof(IsolatedStorageScope), typeof(Type), typeof(Type) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore( System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Object applicationIdentity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStore), typeof(IsolatedStorageScope), typeof(Object) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore( System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Type applicationEvidenceType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStore), typeof(IsolatedStorageScope), typeof(Type) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForApplication() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMachineStoreForApplication) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForAssembly() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMachineStoreForAssembly) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForDomain() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMachineStoreForDomain) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForApplication() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUserStoreForApplication) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForAssembly() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUserStoreForAssembly) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForDomain() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUserStoreForDomain) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForSite() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUserStoreForSite) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFile );

		}
        public static void Remove( System.IO.IsolatedStorage.IsolatedStorageScope scope ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(IsolatedStorageScope) );
		}
        internal static string GetIsolatedStorageRoot( System.IO.IsolatedStorage.IsolatedStorageScope scope ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIsolatedStorageRoot), typeof(IsolatedStorageScope) );
            return default( string );

		}
        internal static long GetDirectorySize( System.IO.DirectoryInfo di ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDirectorySize), typeof(DirectoryInfo) );
            return 0;

		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public void CreateDirectory( string dir ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateDirectory), typeof(String) );
		}
        public void CopyFile( string sourceFileName, string destinationFileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyFile), typeof(String), typeof(String) );
		}
        public void CopyFile( string sourceFileName, string destinationFileName, bool overwrite ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyFile), typeof(String), typeof(String), typeof(Boolean) );
		}
        public System.IO.IsolatedStorage.IsolatedStorageFileStream CreateFile( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFile), typeof(String) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFileStream );

		}
        public void DeleteDirectory( string dir ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeleteDirectory), typeof(String) );
		}
        public void DeleteFile( string file ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeleteFile), typeof(String) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public bool DirectoryExists( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DirectoryExists), typeof(String) );
            return default( bool );

		}
        public bool FileExists( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FileExists), typeof(String) );
            return default( bool );

		}
        public System.DateTimeOffset GetCreationTime( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCreationTime), typeof(String) );
            return default( System.DateTimeOffset );

		}
        public System.DateTimeOffset GetLastAccessTime( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLastAccessTime), typeof(String) );
            return default( System.DateTimeOffset );

		}
        public System.DateTimeOffset GetLastWriteTime( string path ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLastWriteTime), typeof(String) );
            return default( System.DateTimeOffset );

		}
        public string[][] GetDirectoryNames( string searchPattern ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDirectoryNames), typeof(String) );
            return default( string[][] );

		}
        public string[][] GetDirectoryNames() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDirectoryNames) );
            return default( string[][] );

		}
        public string[][] GetFileNames( string searchPattern ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetFileNames), typeof(String) );
            return default( string[][] );

		}
        public string[][] GetFileNames() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetFileNames) );
            return default( string[][] );

		}
        public bool IncreaseQuotaTo( long newQuotaSize ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IncreaseQuotaTo), typeof(Int64) );
            return default( bool );

		}
        public void MoveDirectory( string sourceDirectoryName, string destinationDirectoryName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MoveDirectory), typeof(String), typeof(String) );
		}
        public void MoveFile( string sourceFileName, string destinationFileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MoveFile), typeof(String), typeof(String) );
		}
        public System.IO.IsolatedStorage.IsolatedStorageFileStream OpenFile( string path, System.IO.FileMode mode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OpenFile), typeof(String), typeof(FileMode) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFileStream );

		}
        public System.IO.IsolatedStorage.IsolatedStorageFileStream OpenFile( string path, System.IO.FileMode mode, System.IO.FileAccess access ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OpenFile), typeof(String), typeof(FileMode), typeof(FileAccess) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFileStream );

		}
        public System.IO.IsolatedStorage.IsolatedStorageFileStream OpenFile( string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OpenFile), typeof(String), typeof(FileMode), typeof(FileAccess), typeof(FileShare) );
            return default( System.IO.IsolatedStorage.IsolatedStorageFileStream );

		}
        public void Remove() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove) );
		}
        protected System.Security.Permissions.IsolatedStoragePermission GetPermission( System.Security.PermissionSet ps ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPermission), typeof(PermissionSet) );
            return default( System.Security.Permissions.IsolatedStoragePermission );

		}
        internal static System.Object GetAssemblyIdentityFromEvidence( System.Security.Policy.Evidence e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAssemblyIdentityFromEvidence), typeof(Evidence) );
            return default( System.Object );

		}
        internal static System.Object GetDomainIdentityFromEvidence( System.Security.Policy.Evidence e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDomainIdentityFromEvidence), typeof(Evidence) );
            return default( System.Object );

		}
    }
}