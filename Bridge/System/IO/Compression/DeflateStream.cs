// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.IO;
using System.IO.Compression;
using System.Runtime.Serialization;
using System.Threading;

namespace System.IO.Compression {
    public class DeflateStream: System.IO.Stream {

        public System.IO.Stream BaseStream {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseStream));
				return default (Stream);
			}
		}
        public override bool CanRead {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanRead));
				return default (Boolean);
			}
		}
        public override bool CanSeek {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanSeek));
				return default (Boolean);
			}
		}
        public override bool CanWrite {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanWrite));
				return default (Boolean);
			}
		}
        public override long Length {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Length));
				return default (Int64);
			}
		}
        public override long Position { get; set; }
        public DeflateStream( System.IO.Stream stream, System.IO.Compression.CompressionMode mode )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeflateStream), typeof(Stream), typeof(CompressionMode));
            }
        public DeflateStream( System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeflateStream), typeof(Stream), typeof(CompressionMode), typeof(Boolean));
            }
        public DeflateStream( System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeflateStream), typeof(Stream), typeof(CompressionLevel));
            }
        public DeflateStream( System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DeflateStream), typeof(Stream), typeof(CompressionLevel), typeof(Boolean));
            }
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        internal System.Threading.Tasks.ValueTask<int> ReadAsyncMemory( System.Memory<byte> destination, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadAsyncMemory), typeof(Memory<byte>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.ValueTask<int> );

		}
        internal int ReadCore( System.Span<byte> destination ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadCore), typeof(Span<byte>) );
            return default( int );

		}
        public override int Read( byte[] array, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal System.Threading.Tasks.Task WriteAsyncMemory( System.ReadOnlyMemory<byte> source, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteAsyncMemory), typeof(ReadOnlyMemory<byte>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        internal void WriteCore( System.ReadOnlySpan<byte> source ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteCore), typeof(ReadOnlySpan<byte>) );
		}
        public override void Write( byte[] array, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Byte[]), typeof(Int32), typeof(Int32) );
		}
        public override void Flush() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Flush) );
		}
        public override System.IAsyncResult BeginRead( byte[] array, int offset, int count, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginRead), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public override System.IAsyncResult BeginWrite( byte[] array, int offset, int count, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginWrite), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public override int EndRead( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndRead), typeof(IAsyncResult) );
            return default( int );

		}
        public override void EndWrite( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndWrite), typeof(IAsyncResult) );
		}
        public override long Seek( long offset, System.IO.SeekOrigin origin ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Seek), typeof(Int64), typeof(SeekOrigin) );
            return default( long );

		}
        public override void SetLength( long value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetLength), typeof(Int64) );
		}
    }
}