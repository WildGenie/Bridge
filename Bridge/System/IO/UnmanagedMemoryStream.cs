// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices;
using System.IO;
using System.Threading.Tasks;
using System.Threading;

namespace System.IO {
    public class UnmanagedMemoryStream: System.IO.Stream {

        internal bool _isOpen;

        public override bool CanRead {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanRead));
				return default (Boolean);
			}
		}
        public override bool CanSeek {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanSeek));
				return default (Boolean);
			}
		}
        public override bool CanWrite {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanWrite));
				return default (Boolean);
			}
		}
        public override long Length {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Length));
				return default (Int64);
			}
		}
        public long Capacity {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Capacity));
				return default (Int64);
			}
		}
        public override long Position { get; set; }
        public UnmanagedMemoryStream( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnmanagedMemoryStream), typeof(SafeBuffer), typeof(Int64), typeof(Int64));
            }
        public UnmanagedMemoryStream( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnmanagedMemoryStream), typeof(SafeBuffer), typeof(Int64), typeof(Int64), typeof(FileAccess));
            }
        protected void Initialize( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Initialize), typeof(SafeBuffer), typeof(Int64), typeof(Int64), typeof(FileAccess) );
		}
        internal void Initialize( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access, bool skipSecurityCheck ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Initialize), typeof(SafeBuffer), typeof(Int64), typeof(Int64), typeof(FileAccess), typeof(Boolean) );
		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public override void Flush() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Flush) );
		}
        public System.Threading.Tasks.Task FlushAsync( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FlushAsync), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public override int Read( [System.Runtime.InteropServices.InAttribute, System.Runtime.InteropServices.OutAttribute] byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            buffer = default( byte[] );

            return default( int );

		}
        public System.Threading.Tasks.Task<int> ReadAsync( byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadAsync), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<int> );

		}
        public override int ReadByte() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadByte) );
            return default( int );

		}
        public override long Seek( long offset, System.IO.SeekOrigin loc ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Seek), typeof(Int64), typeof(SeekOrigin) );
            return default( long );

		}
        public override void SetLength( long value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetLength), typeof(Int64) );
		}
        public override void Write( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Byte[]), typeof(Int32), typeof(Int32) );
		}
        public System.Threading.Tasks.Task WriteAsync( byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteAsync), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public override void WriteByte( byte value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteByte), typeof(Byte) );
		}
    }
}