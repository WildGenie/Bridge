// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.ComponentModel;
using System;
using System.IO.Ports;
using System.Text;
using System.IO;

namespace System.IO.Ports {
    public class SerialPort: System.ComponentModel.Component {

        internal const int InfiniteTimeout = -1;

        public System.IO.Stream BaseStream { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseStream));
				return default (Stream);
			}
		}
        public int BaudRate { get; set; }
        public bool BreakState { get; set; }
        public int BytesToRead { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BytesToRead));
				return default (Int32);
			}
		}
        public int BytesToWrite { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BytesToWrite));
				return default (Int32);
			}
		}
        public bool CDHolding { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CDHolding));
				return default (Boolean);
			}
		}
        public bool CtsHolding { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CtsHolding));
				return default (Boolean);
			}
		}
        public int DataBits { get; set; }
        public bool DiscardNull { get; set; }
        public bool DsrHolding { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DsrHolding));
				return default (Boolean);
			}
		}
        public bool DtrEnable { get; set; }
        public System.Text.Encoding Encoding { get; set; }
        public System.IO.Ports.Handshake Handshake { get; set; }
        public bool IsOpen { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsOpen));
				return default (Boolean);
			}
		}
        public string NewLine { get; set; }
        public System.IO.Ports.Parity Parity { get; set; }
        public byte ParityReplace { get; set; }
        public string PortName { get; set; }
        public int ReadBufferSize { get; set; }
        public int ReadTimeout { get; set; }
        public int ReceivedBytesThreshold { get; set; }
        public bool RtsEnable { get; set; }
        public System.IO.Ports.StopBits StopBits { get; set; }
        public int WriteBufferSize { get; set; }
        public int WriteTimeout { get; set; }
        internal static bool IsWindows { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsWindows));
				return default (Boolean);
			}
		}
        #pragma warning disable 67
        public event System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived;
        public event System.IO.Ports.SerialPinChangedEventHandler PinChanged;
        public event System.IO.Ports.SerialDataReceivedEventHandler DataReceived;
        #pragma warning disable 67

        public SerialPort(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort));
            }
        public SerialPort( System.ComponentModel.IContainer container )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(IContainer));
            }
        public SerialPort( string portName )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(String));
            }
        public SerialPort( string portName, int baudRate )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(String), typeof(Int32));
            }
        public SerialPort( string portName, int baudRate, System.IO.Ports.Parity parity )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(String), typeof(Int32), typeof(Parity));
            }
        public SerialPort( string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(String), typeof(Int32), typeof(Parity), typeof(Int32));
            }
        public SerialPort( string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SerialPort), typeof(String), typeof(Int32), typeof(Parity), typeof(Int32), typeof(StopBits));
            }
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) ); 
		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) ); 
		}
        public void DiscardInBuffer() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DiscardInBuffer) ); 
		}
        public void DiscardOutBuffer() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DiscardOutBuffer) ); 
		}
        public static string[][] GetPortNames() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPortNames) );
            return default( string[][] );
        
		}
        public void Open() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Open) ); 
		}
        public int Read( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            return default( int );
        
		}
        public int Read( char[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Char[]), typeof(Int32), typeof(Int32) );
            return default( int );
        
		}
        internal int read_byte() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(read_byte) );
            return default( int );
        
		}
        public int ReadByte() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadByte) );
            return default( int );
        
		}
        public int ReadChar() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadChar) );
            return default( int );
        
		}
        public string ReadExisting() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadExisting) );
            return default( string );
        
		}
        public string ReadLine() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadLine) );
            return default( string );
        
		}
        public string ReadTo( string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadTo), typeof(String) );
            return default( string );
        
		}
        public void Write( string text ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(String) ); 
		}
        public void Write( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Byte[]), typeof(Int32), typeof(Int32) ); 
		}
        public void Write( char[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Char[]), typeof(Int32), typeof(Int32) ); 
		}
        public void WriteLine( string text ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteLine), typeof(String) ); 
		}
        internal void OnErrorReceived( System.IO.Ports.SerialErrorReceivedEventArgs args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnErrorReceived), typeof(SerialErrorReceivedEventArgs) ); 
		}
        internal void OnDataReceived( System.IO.Ports.SerialDataReceivedEventArgs args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDataReceived), typeof(SerialDataReceivedEventArgs) ); 
		}
        internal void OnDataReceived( System.IO.Ports.SerialPinChangedEventArgs args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDataReceived), typeof(SerialPinChangedEventArgs) ); 
		}
    }
}