// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices;
using System.IO;

namespace System.IO {
    public class UnmanagedMemoryAccessor: System.IDisposable {

        public long Capacity {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Capacity));
				return default (Int64);
			}
		}
        public bool CanRead {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanRead));
				return default (Boolean);
			}
		}
        public bool CanWrite {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanWrite));
				return default (Boolean);
			}
		}
        internal bool IsOpen {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsOpen));
				return default (Boolean);
			}
		}
        public UnmanagedMemoryAccessor( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnmanagedMemoryAccessor), typeof(SafeBuffer), typeof(Int64), typeof(Int64));
            }
        public UnmanagedMemoryAccessor( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnmanagedMemoryAccessor), typeof(SafeBuffer), typeof(Int64), typeof(Int64), typeof(FileAccess));
            }
        protected void Initialize( System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Initialize), typeof(SafeBuffer), typeof(Int64), typeof(Int64), typeof(FileAccess) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public bool ReadBoolean( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadBoolean), typeof(Int64) );
            return default( bool );

		}
        public byte ReadByte( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadByte), typeof(Int64) );
            return default( byte );

		}
        public char ReadChar( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadChar), typeof(Int64) );
            return default( char );

		}
        public System.Int16 ReadInt16( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadInt16), typeof(Int64) );
            return default( System.Int16 );

		}
        public int ReadInt32( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadInt32), typeof(Int64) );
            return default( int );

		}
        public long ReadInt64( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadInt64), typeof(Int64) );
            return default( long );

		}
        public System.Decimal ReadDecimal( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadDecimal), typeof(Int64) );
            return default( System.Decimal );

		}
        public float ReadSingle( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadSingle), typeof(Int64) );
            return default( float );

		}
        public double ReadDouble( long position ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadDouble), typeof(Int64) );
            return default( double );

		}
        public void Read<T>( long position, out T structure )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Int64), typeof(T) );
            structure = default( T );

		}
        public int ReadArray<T>( long position, T[] array, int offset, int count )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadArray), typeof(Int64), typeof(T[]), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public void Write( long position, bool value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Boolean) );
		}
        public void Write( long position, char value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Char) );
		}
        public void Write( long position, System.Int16 value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Int16) );
		}
        public void Write( long position, int value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Int32) );
		}
        public void Write( long position, long value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Int64) );
		}
        public void Write( long position, System.Decimal value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Decimal) );
		}
        public void Write( long position, float value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Single) );
		}
        public void Write( long position, double value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(Double) );
		}
        public void Write( long position, System.Byte value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(SByte) );
		}
        public void Write<T>( long position, ref T structure )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Int64), typeof(T) );
		}
        public void WriteArray<T>( long position, T[] array, int offset, int count )
            where T : struct {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WriteArray), typeof(Int64), typeof(T[]), typeof(Int32), typeof(Int32) );
		}
    }
}