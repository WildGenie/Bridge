// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.IO.Pipes;
using System.Threading.Tasks;
using System.Threading;

namespace System.IO.Pipes {
    public class NamedPipeServerStream: System.IO.Pipes.PipeStream {

        internal const int MaxAllowedServerInstances = -1;

        public NamedPipeServerStream( string pipeName )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode), typeof(PipeOptions));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode), typeof(PipeOptions), typeof(Int32), typeof(Int32));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize, System.IO.Pipes.PipeSecurity pipeSecurity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode), typeof(PipeOptions), typeof(Int32), typeof(Int32), typeof(PipeSecurity));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize, System.IO.Pipes.PipeSecurity pipeSecurity, System.IO.HandleInheritability inheritability )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode), typeof(PipeOptions), typeof(Int32), typeof(Int32), typeof(PipeSecurity), typeof(HandleInheritability));
            }
        public NamedPipeServerStream( string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize, System.IO.Pipes.PipeSecurity pipeSecurity, System.IO.HandleInheritability inheritability, System.IO.Pipes.PipeAccessRights additionalAccessRights )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NamedPipeServerStream), typeof(String), typeof(PipeDirection), typeof(Int32), typeof(PipeTransmissionMode), typeof(PipeOptions), typeof(Int32), typeof(Int32), typeof(PipeSecurity), typeof(HandleInheritability), typeof(PipeAccessRights));
            }
        public void Disconnect() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Disconnect) );
		}
        public void RunAsClient( System.IO.Pipes.PipeStreamImpersonationWorker impersonationWorker ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RunAsClient), typeof(PipeStreamImpersonationWorker) );
		}
        public void WaitForConnection() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForConnection) );
		}
        public System.Threading.Tasks.Task WaitForConnectionAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForConnectionAsync) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task WaitForConnectionAsync( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitForConnectionAsync), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public string GetImpersonationUserName() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetImpersonationUserName) );
            return default( string );

		}
        public System.IAsyncResult BeginWaitForConnection( System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginWaitForConnection), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public void EndWaitForConnection( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndWaitForConnection), typeof(IAsyncResult) );
		}
    }
}