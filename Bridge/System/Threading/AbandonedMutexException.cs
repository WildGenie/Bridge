// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System;
using System.Threading;

namespace System.Threading {
    public class AbandonedMutexException: System.SystemException {

        public System.Threading.Mutex Mutex { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Mutex));
				return default (Mutex);
			}
		}
        public int MutexIndex { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MutexIndex));
				return default (Int32);
			}
		}
        public AbandonedMutexException(  ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException));
            }
        public AbandonedMutexException( string message ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException), typeof(String));
            }
        public AbandonedMutexException( string message, System.Exception inner ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException), typeof(String), typeof(Exception));
            }
        public AbandonedMutexException( int location, System.Threading.WaitHandle handle ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException), typeof(Int32), typeof(WaitHandle));
            }
        public AbandonedMutexException( string message, int location, System.Threading.WaitHandle handle ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException), typeof(String), typeof(Int32), typeof(WaitHandle));
            }
        public AbandonedMutexException( string message, System.Exception inner, int location, System.Threading.WaitHandle handle ) : base( default( string ) ) { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AbandonedMutexException), typeof(String), typeof(Exception), typeof(Int32), typeof(WaitHandle));
            }
    }
}