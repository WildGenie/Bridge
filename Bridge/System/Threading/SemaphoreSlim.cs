// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

namespace System.Threading {
    public class SemaphoreSlim: System.IDisposable {

        public int CurrentCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentCount));
				return default (Int32);
			}
		}
        public System.Threading.WaitHandle AvailableWaitHandle { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AvailableWaitHandle));
				return default (WaitHandle);
			}
		}
        public SemaphoreSlim( int initialCount )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SemaphoreSlim), typeof(Int32));
            }
        public SemaphoreSlim( int initialCount, int maxCount )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SemaphoreSlim), typeof(Int32), typeof(Int32));
            }
        public void Wait() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait) ); 
		}
        public void Wait( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(CancellationToken) ); 
		}
        public bool Wait( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(TimeSpan) );
            return default( bool );
        
		}
        public bool Wait( System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(TimeSpan), typeof(CancellationToken) );
            return default( bool );
        
		}
        public bool Wait( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(Int32) );
            return default( bool );
        
		}
        public bool Wait( int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(Int32), typeof(CancellationToken) );
            return default( bool );
        
		}
        public System.Threading.Tasks.Task WaitAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync) );
            return default( System.Threading.Tasks.Task );
        
		}
        public System.Threading.Tasks.Task WaitAsync( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );
        
		}
        public System.Threading.Tasks.Task<bool> WaitAsync( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync), typeof(Int32) );
            return default( System.Threading.Tasks.Task<bool> );
        
		}
        public System.Threading.Tasks.Task<bool> WaitAsync( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync), typeof(TimeSpan) );
            return default( System.Threading.Tasks.Task<bool> );
        
		}
        public System.Threading.Tasks.Task<bool> WaitAsync( System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync), typeof(TimeSpan), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<bool> );
        
		}
        public System.Threading.Tasks.Task<bool> WaitAsync( int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAsync), typeof(Int32), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<bool> );
        
		}
        public int Release() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Release) );
            return default( int );
        
		}
        public int Release( int releaseCount ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Release), typeof(Int32) );
            return default( int );
        
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) ); 
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) ); 
		}
    }
}