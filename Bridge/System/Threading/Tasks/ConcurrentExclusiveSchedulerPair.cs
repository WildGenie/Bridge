// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Concurrent;
using System.Threading.Tasks;
using System;
using System.Threading;
using System.Collections.Generic;
using System.Collections;

namespace System.Threading.Tasks {
    public class ConcurrentExclusiveSchedulerPair {

        internal static int DefaultMaxConcurrencyLevel { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DefaultMaxConcurrencyLevel));
				return default (Int32);
			}
		}
        internal System.Object ValueLock { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ValueLock));
				return default (Object);
			}
		}
        public System.Threading.Tasks.Task Completion { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Completion));
				return default (Task);
			}
		}
        internal bool CompletionRequested { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CompletionRequested));
				return default (Boolean);
			}
		}
        internal bool ReadyToComplete { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadyToComplete));
				return default (Boolean);
			}
		}
        public System.Threading.Tasks.TaskScheduler ConcurrentScheduler { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentScheduler));
				return default (TaskScheduler);
			}
		}
        public System.Threading.Tasks.TaskScheduler ExclusiveScheduler { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExclusiveScheduler));
				return default (TaskScheduler);
			}
		}
        internal int ConcurrentTaskCountForDebugger { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentTaskCountForDebugger));
				return default (Int32);
			}
		}
        internal int ExclusiveTaskCountForDebugger { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExclusiveTaskCountForDebugger));
				return default (Int32);
			}
		}
        public ConcurrentExclusiveSchedulerPair(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentExclusiveSchedulerPair));
            }
        public ConcurrentExclusiveSchedulerPair( System.Threading.Tasks.TaskScheduler taskScheduler )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentExclusiveSchedulerPair), typeof(TaskScheduler));
            }
        public ConcurrentExclusiveSchedulerPair( System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentExclusiveSchedulerPair), typeof(TaskScheduler), typeof(Int32));
            }
        public ConcurrentExclusiveSchedulerPair( System.Threading.Tasks.TaskScheduler taskScheduler, int maxConcurrencyLevel, int maxItemsPerTask )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentExclusiveSchedulerPair), typeof(TaskScheduler), typeof(Int32), typeof(Int32));
            }
        public void Complete() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Complete) ); 
		}
        internal static void ContractAssertMonitorStatus( System.Object syncObj, bool held ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContractAssertMonitorStatus), typeof(Object), typeof(Boolean) ); 
		}
        internal static System.Threading.Tasks.TaskCreationOptions GetCreationOptionsForTask( bool isReplacementReplica ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCreationOptionsForTask), typeof(Boolean) );
            return default( System.Threading.Tasks.TaskCreationOptions );
        
		}
    }
}