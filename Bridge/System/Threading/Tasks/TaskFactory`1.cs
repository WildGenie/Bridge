// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Threading;
using System.Threading.Tasks;
using System;

namespace System.Threading.Tasks {
    public class TaskFactory<TResult> {

        internal System.Threading.Tasks.TaskScheduler DefaultScheduler {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DefaultScheduler));
				return default (TaskScheduler);
			}
		}
        public System.Threading.CancellationToken CancellationToken {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancellationToken));
				return default (CancellationToken);
			}
		}
        public System.Threading.Tasks.TaskScheduler Scheduler {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Scheduler));
				return default (TaskScheduler);
			}
		}
        public System.Threading.Tasks.TaskCreationOptions CreationOptions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreationOptions));
				return default (TaskCreationOptions);
			}
		}
        public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinuationOptions));
				return default (TaskContinuationOptions);
			}
		}
        public TaskFactory(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory));
            }
        public TaskFactory( System.Threading.CancellationToken cancellationToken )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(CancellationToken));
            }
        public TaskFactory( System.Threading.Tasks.TaskScheduler scheduler )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(TaskScheduler));
            }
        public TaskFactory( System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(TaskCreationOptions), typeof(TaskContinuationOptions));
            }
        public TaskFactory( System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskContinuationOptions), typeof(TaskScheduler));
            }
        public System.Threading.Tasks.Task<TResult> StartNew( Func<TResult> function ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<TResult> function, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<System.Object, TResult> function, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<System.Object, TResult> function, System.Object state, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<System.Object, TResult> function, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew( Func<System.Object, TResult> function, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncImpl( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncImpl), typeof(IAsyncResult), typeof(Func<>), typeof(Action<>), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncImpl( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncImpl), typeof(Func<>), typeof(Func<>), typeof(Action<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncImpl), typeof(Func<>), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1, TArg2>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, TArg2 arg2, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncImpl), typeof(Func<>), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1, TArg2, TArg3>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncImpl), typeof(Func<>), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> FromAsyncTrim<TInstance, TArgs>( TInstance thisRef, TArgs args, Func<TInstance, TArgs, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<TInstance, System.IAsyncResult, TResult> endMethod )
            where TInstance : class {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsyncTrim), typeof(TInstance), typeof(TArgs), typeof(Func<>), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> ContinueWhenAllImpl<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAllImpl), typeof(Task<>), typeof(Func<>), typeof(Action), typeof(TaskContinuationOptions), typeof(CancellationToken), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> ContinueWhenAllImpl( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAllImpl), typeof(Task[]), typeof(Func<>), typeof(Action), typeof(TaskContinuationOptions), typeof(CancellationToken), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> ContinueWhenAnyImpl( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAnyImpl), typeof(Task[]), typeof(Func<>), typeof(Action<>), typeof(TaskContinuationOptions), typeof(CancellationToken), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<TResult> ContinueWhenAnyImpl<TAntecedentResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAnyImpl), typeof(Task<>), typeof(Func<>), typeof(Action<>), typeof(TaskContinuationOptions), typeof(CancellationToken), typeof(TaskScheduler));
            return default( System.Threading.Tasks.Task<TResult> );

		}
    }
}