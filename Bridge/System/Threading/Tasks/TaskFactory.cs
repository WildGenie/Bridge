// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Threading;
using System.Threading.Tasks;
using System;
using System.Collections.Generic;

namespace System.Threading.Tasks {
    public class TaskFactory {

        internal System.Threading.Tasks.TaskScheduler DefaultScheduler {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DefaultScheduler));
				return default (TaskScheduler);
			}
		}
        public System.Threading.CancellationToken CancellationToken {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancellationToken));
				return default (CancellationToken);
			}
		}
        public System.Threading.Tasks.TaskScheduler Scheduler {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Scheduler));
				return default (TaskScheduler);
			}
		}
        public System.Threading.Tasks.TaskCreationOptions CreationOptions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreationOptions));
				return default (TaskCreationOptions);
			}
		}
        public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinuationOptions));
				return default (TaskContinuationOptions);
			}
		}
        public TaskFactory(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory));
            }
        public TaskFactory( System.Threading.CancellationToken cancellationToken )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(CancellationToken));
            }
        public TaskFactory( System.Threading.Tasks.TaskScheduler scheduler )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(TaskScheduler));
            }
        public TaskFactory( System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(TaskCreationOptions), typeof(TaskContinuationOptions));
            }
        public TaskFactory( System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TaskFactory), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskContinuationOptions), typeof(TaskScheduler));
            }
        internal static void CheckCreationOptions( System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckCreationOptions), typeof(TaskCreationOptions) );
		}
        public System.Threading.Tasks.Task StartNew( System.Action action ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action action, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action action, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action<System.Object> action, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action<>), typeof(Object) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action<System.Object> action, System.Object state, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action<>), typeof(Object), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action<System.Object> action, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task StartNew( System.Action<System.Object> action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Action<>), typeof(Object), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<TResult> function ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<TResult> function, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<System.Object, TResult> function, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<System.Object, TResult> function, System.Object state, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<System.Object, TResult> function, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> StartNew<TResult>( Func<System.Object, TResult> function, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartNew), typeof(Func<>), typeof(Object), typeof(CancellationToken), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task FromAsync( System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Action<>) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync( System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Action<>), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync( System.IAsyncResult asyncResult, System.Action<System.IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Action<>), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(Object) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(Object) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1, TArg2>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(Object) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1, TArg2>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Action<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TResult>( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TResult>( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TResult>( System.IAsyncResult asyncResult, Func<System.IAsyncResult, TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(IAsyncResult), typeof(Func<>), typeof(TaskCreationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TResult>( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TResult>( System.Func<System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TResult>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TResult>( Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TResult>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TResult>( Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>( Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult> beginMethod, Func<System.IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromAsync), typeof(Func<>), typeof(Func<>), typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(Object), typeof(TaskCreationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static void CheckFromAsyncOptions( System.Threading.Tasks.TaskCreationOptions creationOptions, bool hasBeginMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckFromAsyncOptions), typeof(TaskCreationOptions), typeof(Boolean) );
		}
        internal static System.Threading.Tasks.Task<System.Threading.Tasks.Task[]> CommonCWAllLogic( System.Threading.Tasks.Task[] tasksCopy ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CommonCWAllLogic), typeof(Task[]) );
            return default( System.Threading.Tasks.Task<System.Threading.Tasks.Task[]> );

		}
        internal static System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAllLogic<T>( System.Threading.Tasks.Task tasksCopy ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CommonCWAllLogic), typeof(Task<>) );
            return default( System.Threading.Tasks.Task<System.Threading.Tasks.Task> );

		}
        public System.Threading.Tasks.Task ContinueWhenAll( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Action<>) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Action<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Action<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Action<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task> continuationAction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Action<>) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Action<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Action<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Action<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[], TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task[]), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAll), typeof(Task<>), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        internal static System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic( System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CommonCWAnyLogic), typeof(IList<>) );
            return default( System.Threading.Tasks.Task<System.Threading.Tasks.Task> );

		}
        public System.Threading.Tasks.Task ContinueWhenAny( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Action<>) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Action<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Action<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny( System.Threading.Tasks.Task[] tasks, System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Action<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult>( System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<>), typeof(Func<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>( System.Threading.Tasks.Task tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task[]), typeof(Func<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task<TResult> );

		}
        public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<TAntecedentResult>[]), typeof(Action<>) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<TAntecedentResult>[]), typeof(Action<>), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<TAntecedentResult>[]), typeof(Action<>), typeof(TaskContinuationOptions) );
            return default( System.Threading.Tasks.Task );

		}
        public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>( System.Threading.Tasks.Task tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContinueWhenAny), typeof(Task<TAntecedentResult>[]), typeof(Action<>), typeof(CancellationToken), typeof(TaskContinuationOptions), typeof(TaskScheduler) );
            return default( System.Threading.Tasks.Task );

		}
        internal static System.Threading.Tasks.Task[][] CheckMultiContinuationTasksAndCopy( System.Threading.Tasks.Task[] tasks ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckMultiContinuationTasksAndCopy), typeof(Task[]) );
            return default( System.Threading.Tasks.Task[][] );

		}
        internal static System.Threading.Tasks.Task<TResult>[] CheckMultiContinuationTasksAndCopy<TResult>( System.Threading.Tasks.Task tasks ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckMultiContinuationTasksAndCopy), typeof(Task<TResult>[]) );
            return default( System.Threading.Tasks.Task<TResult>[] );

		}
        internal static void CheckMultiTaskContinuationOptions( System.Threading.Tasks.TaskContinuationOptions continuationOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckMultiTaskContinuationOptions), typeof(TaskContinuationOptions) );
		}
        public class CompleteOnInvokePromise: System.Threading.Tasks.Task<System.Threading.Tasks.Task>{

        public CompleteOnInvokePromise( System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks ) : base( default( System.Func<Task> ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CompleteOnInvokePromise), typeof(IList<Task>));
            }
        public void Invoke( System.Threading.Tasks.Task completingTask ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Invoke), typeof(Task) );
		}
        }
    }
}