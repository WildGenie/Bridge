// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System;
using System.Threading;
using System.Collections.Generic;
using System.Collections;

namespace System.Threading.Tasks {
    public abstract class TaskScheduler {

        public virtual int MaximumConcurrencyLevel {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaximumConcurrencyLevel));
				return default (Int32);
			}
		}
        internal virtual bool RequiresAtomicStartTransition {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RequiresAtomicStartTransition));
				return default (Boolean);
			}
		}
        public static System.Threading.Tasks.TaskScheduler Default {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Default));
				return default (TaskScheduler);
			}
		}
        public static System.Threading.Tasks.TaskScheduler Current {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Current));
				return default (TaskScheduler);
			}
		}
        internal static bool IsDefault {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDefault));
				return default (Boolean);
			}
		}
        internal static System.Threading.Tasks.TaskScheduler InternalCurrent {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalCurrent));
				return default (TaskScheduler);
			}
		}
        public int Id {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Id));
				return default (Int32);
			}
		}
        #pragma warning disable 67
        public event System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> UnobservedTaskException;
        #pragma warning disable 67

        internal abstract void QueueTask( System.Threading.Tasks.Task task );

        protected abstract bool TryExecuteTaskInline( System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued );

        protected abstract System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> GetScheduledTasks();

        internal bool TryRunInline( System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryRunInline), typeof(Task), typeof(Boolean) );
            return default( bool );

		}
        internal virtual bool TryDequeue( System.Threading.Tasks.Task task ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryDequeue), typeof(Task) );
            return default( bool );

		}
        internal virtual void NotifyWorkItemProgress() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NotifyWorkItemProgress) );
		}
        internal void InternalQueueTask( System.Threading.Tasks.Task task ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalQueueTask), typeof(Task) );
		}
        public static System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromCurrentSynchronizationContext) );
            return default( System.Threading.Tasks.TaskScheduler );

		}
        protected bool TryExecuteTask( System.Threading.Tasks.Task task ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryExecuteTask), typeof(Task) );
            return default( bool );

		}
        internal static void PublishUnobservedTaskException( System.Object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PublishUnobservedTaskException), typeof(Object), typeof(UnobservedTaskExceptionEventArgs) );
		}
        internal System.Threading.Tasks.Task[][] GetScheduledTasksForDebugger() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetScheduledTasksForDebugger) );
            return default( System.Threading.Tasks.Task[][] );

		}
        internal static System.Threading.Tasks.TaskScheduler[][] GetTaskSchedulersForDebugger() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTaskSchedulersForDebugger) );
            return default( System.Threading.Tasks.TaskScheduler[][] );

		}
        public class SystemThreadingTasks_TaskSchedulerDebugView {

        public int Id {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Id));
				return default (Int32);
			}
		}
        public System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> ScheduledTasks {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ScheduledTasks));
				return default (IEnumerable<Task>);
			}
		}
        public SystemThreadingTasks_TaskSchedulerDebugView( System.Threading.Tasks.TaskScheduler scheduler )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SystemThreadingTasks_TaskSchedulerDebugView), typeof(TaskScheduler));
            }
        }
    }
}