// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Collections.Concurrent;

namespace System.Threading.Tasks {
    public static class Parallel {
        public static void Invoke( System.Action[] actions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Invoke), typeof(Action[]) );
		}
        public static void Invoke( System.Threading.Tasks.ParallelOptions parallelOptions, System.Action[] actions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Invoke), typeof(ParallelOptions), typeof(Action[]) );
		}
        public static System.Threading.Tasks.ParallelLoopResult For( int fromInclusive, int toExclusive, System.Action<int> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(Action<int>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( long fromInclusive, long toExclusive, System.Action<long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(Action<long>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<int> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( int fromInclusive, int toExclusive, System.Action<int, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(Action<int, ParallelLoopState>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( long fromInclusive, long toExclusive, System.Action<long, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(Action<long, ParallelLoopState>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<int, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(ParallelOptions), typeof(Action) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For( long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, System.Action<long, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(ParallelOptions), typeof(Action) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For<TLocal>( int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(Func<TLocal>), typeof(Func<int, ParallelLoopState, TLocal, TLocal>), typeof(Action) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For<TLocal>( long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For<TLocal>( int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int32), typeof(Int32), typeof(ParallelOptions), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult For<TLocal>( long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(For), typeof(Int64), typeof(Int64), typeof(ParallelOptions), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, Action<TSource> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, Action<TSource, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(ParallelOptions), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(IEnumerable<>), typeof(ParallelOptions), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( Partitioner<TSource> source, Action<TSource> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( Partitioner<TSource> source, Action<TSource, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( OrderablePartitioner<TSource> source, Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(OrderablePartitioner<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(OrderablePartitioner<>), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource, System.Threading.Tasks.ParallelLoopState> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource>( OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource, System.Threading.Tasks.ParallelLoopState, long> body ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(OrderablePartitioner<>), typeof(ParallelOptions), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(Partitioner<>), typeof(ParallelOptions), typeof(Func<>), typeof(Func<>), typeof(Action<>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource, TLocal>( OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, System.Threading.Tasks.ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ForEach), typeof(OrderablePartitioner<TSource>), typeof(ParallelOptions), typeof(Func<ParallelLoopState>), typeof(Func<TLocal>), typeof(Action<TSource>) );
            return default( System.Threading.Tasks.ParallelLoopResult );

		}
        internal static void ThrowIfReducableToSingleOCE( System.Collections.Generic.IEnumerable<System.Exception> excCollection, System.Threading.CancellationToken ct ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowIfReducableToSingleOCE), typeof(IEnumerable<Exception>), typeof(CancellationToken) );
		}
        public struct LoopTimer {

        public LoopTimer( int nWorkerTaskIndex )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LoopTimer), typeof(Int32));

            }
        public bool LimitExceeded() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LimitExceeded) );
            return default( bool );

		}
        }
    }
}