// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Threading.Tasks;
using System;

namespace System.Threading.Tasks {
    public class ParallelLoopState {

        internal virtual bool InternalShouldExitCurrentIteration {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalShouldExitCurrentIteration));
				return default (Boolean);
			}
		}
        public bool ShouldExitCurrentIteration {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ShouldExitCurrentIteration));
				return default (Boolean);
			}
		}
        public bool IsStopped {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsStopped));
				return default (Boolean);
			}
		}
        public bool IsExceptional {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsExceptional));
				return default (Boolean);
			}
		}
        internal virtual System.Nullable<long> InternalLowestBreakIteration {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalLowestBreakIteration));
				return default (Nullable<long>);
			}
		}
        public System.Nullable<long> LowestBreakIteration {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LowestBreakIteration));
				return default (Nullable<long>);
			}
		}
        public void Stop() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stop) );
		}
        internal virtual void InternalBreak() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalBreak) );
		}
        public void Break() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Break) );
		}
    }
}