// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading;

namespace System.Threading {
    public class ManualResetEventSlim: System.IDisposable {

        public System.Threading.WaitHandle WaitHandle { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitHandle));
				return default (WaitHandle);
			}
		}
        public bool IsSet { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSet));
				return default (Boolean);
			}
		}
        public int SpinCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SpinCount));
				return default (Int32);
			}
		}
        internal int Waiters { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Waiters));
				return default (Int32);
			}
		}
        public ManualResetEventSlim(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ManualResetEventSlim));
            }
        public ManualResetEventSlim( bool initialState )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ManualResetEventSlim), typeof(Boolean));
            }
        public ManualResetEventSlim( bool initialState, int spinCount )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ManualResetEventSlim), typeof(Boolean), typeof(Int32));
            }
        public void Set() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set) ); 
		}
        public void Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) ); 
		}
        public void Wait() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait) ); 
		}
        public void Wait( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(CancellationToken) ); 
		}
        public bool Wait( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(TimeSpan) );
            return default( bool );
        
		}
        public bool Wait( System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(TimeSpan), typeof(CancellationToken) );
            return default( bool );
        
		}
        public bool Wait( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(Int32) );
            return default( bool );
        
		}
        public bool Wait( int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Wait), typeof(Int32), typeof(CancellationToken) );
            return default( bool );
        
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) ); 
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) ); 
		}
    }
}