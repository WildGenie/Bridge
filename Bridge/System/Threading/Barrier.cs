// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading;

namespace System.Threading {
    public class Barrier: System.IDisposable {

        public int ParticipantsRemaining {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ParticipantsRemaining));
				return default (Int32);
			}
		}
        public int ParticipantCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ParticipantCount));
				return default (Int32);
			}
		}
        public long CurrentPhaseNumber {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentPhaseNumber));
				return default (Int64);
			}
		}
        public Barrier( int participantCount )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Barrier), typeof(Int32));
            }
        public Barrier( int participantCount, System.Action<System.Threading.Barrier> postPhaseAction )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Barrier), typeof(Int32), typeof(Action));
            }
        public long AddParticipant() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddParticipant) );
            return default( long );

		}
        public long AddParticipants( int participantCount ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddParticipants), typeof(Int32) );
            return default( long );

		}
        public void RemoveParticipant() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveParticipant) );
		}
        public void RemoveParticipants( int participantCount ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveParticipants), typeof(Int32) );
		}
        public void SignalAndWait() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait) );
		}
        public void SignalAndWait( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(CancellationToken) );
		}
        public bool SignalAndWait( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(TimeSpan) );
            return default( bool );

		}
        public bool SignalAndWait( System.TimeSpan timeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(TimeSpan), typeof(CancellationToken) );
            return default( bool );

		}
        public bool SignalAndWait( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(Int32) );
            return default( bool );

		}
        public bool SignalAndWait( int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(Int32), typeof(CancellationToken) );
            return default( bool );

		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
    }
}