// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;

namespace System.Threading {
    public abstract class WaitHandle: System.MarshalByRefObject, System.IDisposable {

        internal const int WaitTimeout = 258;

        internal const int MaxWaitHandles = 64;

        public virtual System.IntPtr Handle { get; set; }
        public virtual bool WaitOne( int millisecondsTimeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOne), typeof(Int32), typeof(Boolean) );
            return default( bool );

		}
        public virtual bool WaitOne( System.TimeSpan timeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOne), typeof(TimeSpan), typeof(Boolean) );
            return default( bool );

		}
        public virtual bool WaitOne() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOne) );
            return default( bool );

		}
        public virtual bool WaitOne( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOne), typeof(Int32) );
            return default( bool );

		}
        public virtual bool WaitOne( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOne), typeof(TimeSpan) );
            return default( bool );

		}
        internal bool WaitOneWithoutFAS() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitOneWithoutFAS) );
            return default( bool );

		}
        public static bool WaitAll( System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAll), typeof(WaitHandle[]), typeof(Int32), typeof(Boolean) );
            return default( bool );

		}
        public static bool WaitAll( System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAll), typeof(WaitHandle[]), typeof(TimeSpan), typeof(Boolean) );
            return default( bool );

		}
        public static bool WaitAll( System.Threading.WaitHandle[] waitHandles ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAll), typeof(WaitHandle[]) );
            return default( bool );

		}
        public static bool WaitAll( System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAll), typeof(WaitHandle[]), typeof(Int32) );
            return default( bool );

		}
        public static bool WaitAll( System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAll), typeof(WaitHandle[]), typeof(TimeSpan) );
            return default( bool );

		}
        public static int WaitAny( System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAny), typeof(WaitHandle[]), typeof(Int32), typeof(Boolean) );
            return default( int );

		}
        public static int WaitAny( System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAny), typeof(WaitHandle[]), typeof(TimeSpan), typeof(Boolean) );
            return default( int );

		}
        public static int WaitAny( System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAny), typeof(WaitHandle[]), typeof(TimeSpan) );
            return default( int );

		}
        public static int WaitAny( System.Threading.WaitHandle[] waitHandles ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAny), typeof(WaitHandle[]) );
            return default( int );

		}
        public static int WaitAny( System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitAny), typeof(WaitHandle[]), typeof(Int32) );
            return default( int );

		}
        public static bool SignalAndWait( System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(WaitHandle), typeof(WaitHandle) );
            return default( bool );

		}
        public static bool SignalAndWait( System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, System.TimeSpan timeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(WaitHandle), typeof(WaitHandle), typeof(TimeSpan), typeof(Boolean) );
            return default( bool );

		}
        public static bool SignalAndWait( System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SignalAndWait), typeof(WaitHandle), typeof(WaitHandle), typeof(Int32), typeof(Boolean) );
            return default( bool );

		}
        public virtual void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        protected virtual void Dispose( bool explicitDisposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public enum OpenExistingResult {
            Success = 0,
            NameNotFound = 1,
            PathNotFound = 2,
            NameInvalid = 3
        }
    }
}