// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading;

namespace System.Threading {
    public class ReaderWriterLockSlim: System.IDisposable {

        public bool IsReadLockHeld { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadLockHeld));
				return default (Boolean);
			}
		}
        public bool IsUpgradeableReadLockHeld { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsUpgradeableReadLockHeld));
				return default (Boolean);
			}
		}
        public bool IsWriteLockHeld { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsWriteLockHeld));
				return default (Boolean);
			}
		}
        public System.Threading.LockRecursionPolicy RecursionPolicy { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RecursionPolicy));
				return default (LockRecursionPolicy);
			}
		}
        public int CurrentReadCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentReadCount));
				return default (Int32);
			}
		}
        public int RecursiveReadCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RecursiveReadCount));
				return default (Int32);
			}
		}
        public int RecursiveUpgradeCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RecursiveUpgradeCount));
				return default (Int32);
			}
		}
        public int RecursiveWriteCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RecursiveWriteCount));
				return default (Int32);
			}
		}
        public int WaitingReadCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitingReadCount));
				return default (Int32);
			}
		}
        public int WaitingUpgradeCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitingUpgradeCount));
				return default (Int32);
			}
		}
        public int WaitingWriteCount { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WaitingWriteCount));
				return default (Int32);
			}
		}
        public ReaderWriterLockSlim(  )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReaderWriterLockSlim));
            }
        public ReaderWriterLockSlim( System.Threading.LockRecursionPolicy recursionPolicy )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReaderWriterLockSlim), typeof(LockRecursionPolicy));
            }
        public void EnterReadLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnterReadLock) ); 
		}
        public bool TryEnterReadLock( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterReadLock), typeof(TimeSpan) );
            return default( bool );
        
		}
        public bool TryEnterReadLock( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterReadLock), typeof(Int32) );
            return default( bool );
        
		}
        public void EnterWriteLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnterWriteLock) ); 
		}
        public bool TryEnterWriteLock( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterWriteLock), typeof(TimeSpan) );
            return default( bool );
        
		}
        public bool TryEnterWriteLock( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterWriteLock), typeof(Int32) );
            return default( bool );
        
		}
        public void EnterUpgradeableReadLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnterUpgradeableReadLock) ); 
		}
        public bool TryEnterUpgradeableReadLock( System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterUpgradeableReadLock), typeof(TimeSpan) );
            return default( bool );
        
		}
        public bool TryEnterUpgradeableReadLock( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryEnterUpgradeableReadLock), typeof(Int32) );
            return default( bool );
        
		}
        public void ExitReadLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExitReadLock) ); 
		}
        public void ExitWriteLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExitWriteLock) ); 
		}
        public void ExitUpgradeableReadLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExitUpgradeableReadLock) ); 
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) ); 
		}
        void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) ); 
		}
    }
}