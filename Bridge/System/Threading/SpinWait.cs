// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;

namespace System.Threading {
    public struct SpinWait {

        internal const int YIELD_THRESHOLD = 10;

        internal const int SLEEP_0_EVERY_HOW_MANY_TIMES = 5;

        internal const int SLEEP_1_EVERY_HOW_MANY_TIMES = 20;

        public int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public bool NextSpinWillYield {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NextSpinWillYield));
				return default (Boolean);
			}
		}
        public void SpinOnce() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SpinOnce) );
		}
        public void Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) );
		}
        public static void SpinUntil( System.Func<bool> condition ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SpinUntil), typeof(Func<bool>) );
		}
        public static bool SpinUntil( System.Func<bool> condition, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SpinUntil), typeof(Func<bool>), typeof(TimeSpan) );
            return default( bool );

		}
        public static bool SpinUntil( System.Func<bool> condition, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SpinUntil), typeof(Func<bool>), typeof(Int32) );
            return default( bool );

		}
    }
}