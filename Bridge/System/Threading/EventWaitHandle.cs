// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Threading;
using System.Security.AccessControl;

namespace System.Threading {
    public class EventWaitHandle: System.Threading.WaitHandle {

        public EventWaitHandle( bool initialState, System.Threading.EventResetMode mode )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventWaitHandle), typeof(Boolean), typeof(EventResetMode));
            }
        public EventWaitHandle( bool initialState, System.Threading.EventResetMode mode, string name )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventWaitHandle), typeof(Boolean), typeof(EventResetMode), typeof(String));
            }
        public EventWaitHandle( bool initialState, System.Threading.EventResetMode mode, string name, System.Boolean createdNew )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventWaitHandle), typeof(Boolean), typeof(EventResetMode), typeof(String), typeof(Boolean));
            }
        public EventWaitHandle( bool initialState, System.Threading.EventResetMode mode, string name, System.Boolean createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EventWaitHandle), typeof(Boolean), typeof(EventResetMode), typeof(String), typeof(Boolean), typeof(EventWaitHandleSecurity));
            }
        public static System.Threading.EventWaitHandle OpenExisting( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OpenExisting), typeof(String) );
            return default( System.Threading.EventWaitHandle );

		}
        public static System.Threading.EventWaitHandle OpenExisting( string name, System.Security.AccessControl.EventWaitHandleRights rights ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OpenExisting), typeof(String), typeof(EventWaitHandleRights) );
            return default( System.Threading.EventWaitHandle );

		}
        public static bool TryOpenExisting( string name, out System.Threading.EventWaitHandle result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryOpenExisting), typeof(String), typeof(EventWaitHandle) );
            result = default( System.Threading.EventWaitHandle );

            return default( bool );

		}
        public static bool TryOpenExisting( string name, System.Security.AccessControl.EventWaitHandleRights rights, out System.Threading.EventWaitHandle result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryOpenExisting), typeof(String), typeof(EventWaitHandleRights), typeof(EventWaitHandle) );
            result = default( System.Threading.EventWaitHandle );

            return default( bool );

		}
        public bool Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) );
            return default( bool );

		}
        public bool Set() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set) );
            return default( bool );

		}
        public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAccessControl) );
            return default( System.Security.AccessControl.EventWaitHandleSecurity );

		}
        public void SetAccessControl( System.Security.AccessControl.EventWaitHandleSecurity eventSecurity ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAccessControl), typeof(EventWaitHandleSecurity) );
		}
    }
}