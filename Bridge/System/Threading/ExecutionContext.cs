// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.Serialization;
using System.Threading;
using System.Runtime.Remoting.Messaging;
using System.Collections.Generic;
using System.Runtime.Remoting;

namespace System.Threading {
    public class ExecutionContext: System.IDisposable, System.Runtime.Serialization.ISerializable {

        internal bool isNewCapture {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(isNewCapture));
				return default (Boolean);
			}
		}
        internal bool isFlowSuppressed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(isFlowSuppressed));
				return default (Boolean);
			}
		}
        internal static System.Threading.ExecutionContext PreAllocatedDefault {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PreAllocatedDefault));
				return default (ExecutionContext);
			}
		}
        internal bool IsPreAllocatedDefault {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsPreAllocatedDefault));
				return default (Boolean);
			}
		}
        internal System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LogicalCallContext));
				return default (LogicalCallContext);
			}
		}
        internal System.Threading.SynchronizationContext SynchronizationContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SynchronizationContext));
				return default (SynchronizationContext);
			}
		}
        internal System.Threading.SynchronizationContext SynchronizationContextNoFlow {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SynchronizationContextNoFlow));
				return default (SynchronizationContext);
			}
		}
        internal static void OnAsyncLocalContextChanged( System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnAsyncLocalContextChanged), typeof(ExecutionContext), typeof(ExecutionContext) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public static void Run( System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Run), typeof(ExecutionContext), typeof(ContextCallback), typeof(Object) );
		}
        internal static void Run( System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, bool preserveSyncCtx ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Run), typeof(ExecutionContext), typeof(ContextCallback), typeof(Object), typeof(Boolean) );
		}
        internal static void RunInternal( System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, System.Object state, bool preserveSyncCtx ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RunInternal), typeof(ExecutionContext), typeof(ContextCallback), typeof(Object), typeof(Boolean) );
		}
        public System.Threading.ExecutionContext CreateCopy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateCopy) );
            return default( System.Threading.ExecutionContext );

		}
        internal System.Threading.ExecutionContext CreateMutableCopy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateMutableCopy) );
            return default( System.Threading.ExecutionContext );

		}
        public static System.Threading.AsyncFlowControl SuppressFlow() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SuppressFlow) );
            return default( System.Threading.AsyncFlowControl );

		}
        public static void RestoreFlow() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RestoreFlow) );
		}
        public static bool IsFlowSuppressed() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFlowSuppressed) );
            return default( bool );

		}
        public static System.Threading.ExecutionContext Capture() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Capture) );
            return default( System.Threading.ExecutionContext );

		}
        internal static System.Threading.ExecutionContext FastCapture() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FastCapture) );
            return default( System.Threading.ExecutionContext );

		}
        public void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        internal bool IsDefaultFTContext( bool ignoreSyncCtx ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDefaultFTContext), typeof(Boolean) );
            return default( bool );

		}
        public struct Reader {

        public bool IsNull {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsNull));
				return default (Boolean);
			}
		}
        public bool IsFlowSuppressed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFlowSuppressed));
				return default (Boolean);
			}
		}
        public System.Threading.SynchronizationContext SynchronizationContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SynchronizationContext));
				return default (SynchronizationContext);
			}
		}
        public System.Threading.SynchronizationContext SynchronizationContextNoFlow {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SynchronizationContextNoFlow));
				return default (SynchronizationContext);
			}
		}
        public Reader LogicalCallContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LogicalCallContext));
				return default (Reader);
			}
		}
        public Reader( System.Threading.ExecutionContext ec )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reader), typeof(ExecutionContext));

            }
        public System.Threading.ExecutionContext DangerousGetRawExecutionContext() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousGetRawExecutionContext) );
            return default( System.Threading.ExecutionContext );

		}
        public bool IsDefaultFTContext( bool ignoreSyncCtx ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDefaultFTContext), typeof(Boolean) );
            return default( bool );

		}
        public bool IsSame( System.Threading.ExecutionContext.Reader other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSame), typeof(Reader) );
            return default( bool );

		}
        public bool HasSameLocalValues( System.Threading.ExecutionContext other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasSameLocalValues), typeof(ExecutionContext) );
            return default( bool );

		}
        public bool HasLocalValues() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasLocalValues) );
            return default( bool );

		}
        }
        public enum CaptureOptions {
            None = 0,
            IgnoreSyncCtx = 1,
            OptimizeDefaultCase = 2
        }
    }
}