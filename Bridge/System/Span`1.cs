// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;

namespace System {
    public struct Span<T> {

        internal string DebuggerDisplay {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DebuggerDisplay));
				return default (String);
			}
		}
        public int Length {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Length));
				return default (Int32);
			}
		}
        public bool IsEmpty {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEmpty));
				return default (Boolean);
			}
		}
        public T this[int index] {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
				return default (T);
			}
		}
        public static System.Span<T> Empty {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Empty));
				return default (Span<T>);
			}
		}

        internal System.IntPtr ByteOffset {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ByteOffset));
				return default (IntPtr);
			}
		}
        public Span( T[] array )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Span<T>), typeof(T[]));

            }
        public Span( T[] array, int start, int length )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Span<T>), typeof(T[]), typeof(Int32), typeof(Int32));

            }
        public static System.Span<T> DangerousCreate( System.Object obj, ref T objectData, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousCreate), typeof(Object), typeof(T), typeof(Int32) );
            return default( System.Span<T> );

		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public void Fill( T value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Fill), typeof(T) );
		}
        public void CopyTo( System.Span<T> destination ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Span<T>) );
		}
        public bool TryCopyTo( System.Span<T> destination ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryCopyTo), typeof(Span<T>) );
            return default( bool );

		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}
        public System.Span<T> Slice( int start ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Slice), typeof(Int32) );
            return default( System.Span<T> );

		}
        public System.Span<T> Slice( int start, int length ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Slice), typeof(Int32), typeof(Int32) );
            return default( System.Span<T> );

		}
        public T[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( T[][] );

		}
        public T DangerousGetPinnableReference() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousGetPinnableReference) );
            return default( T );

		}
    }
}