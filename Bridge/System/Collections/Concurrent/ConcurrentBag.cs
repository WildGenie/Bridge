// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Concurrent;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System;

namespace System.Collections.Concurrent {
    public class ConcurrentBag<T> : ICollection, IProducerConsumerCollection<T>
    {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        internal int DangerousCount {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousCount));
				return default (Int32);
			}
		}
        public bool IsEmpty {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEmpty));
				return default (Boolean);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        internal System.Object GlobalQueuesLock {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GlobalQueuesLock));
				return default (Object);
			}
		}
        public ConcurrentBag(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentBag<T>));
            }
        public ConcurrentBag( System.Collections.Generic.IEnumerable<T> collection )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentBag<T>), typeof(IEnumerable));
            }
        public void Add( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(T) );
		}
        public bool TryTake( out T result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryTake), typeof(T) );
            result = default( T );

            return default( bool );

		}
        public bool TryPeek( out T result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryPeek), typeof(T) );
            result = default( T );

            return default( bool );

		}
        public void CopyTo( T[] array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(T[]), typeof(Int32) );
		}
        public T[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( T[][] );

		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<T> );

		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        bool @System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd), typeof(T) );
            return default( bool );

		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public enum Operation {
            None = 0,
            Add = 1,
            Take = 2
        }
    }
}