// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Concurrent;
using System.Collections;
using System.Collections.Generic;
using System;

namespace System.Collections.Concurrent {
    public class ConcurrentStack<T> : ICollection, IProducerConsumerCollection<T>
    {

        public bool IsEmpty {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEmpty));
				return default (Boolean);
			}
		}
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        public ConcurrentStack(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentStack<T>));
            }
        public ConcurrentStack( System.Collections.Generic.IEnumerable<T> collection )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConcurrentStack<T>), typeof(IEnumerable));
            }
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public void CopyTo( T[] array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(T[]), typeof(Int32) );
		}
        public void Push( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Push), typeof(T) );
		}
        public void PushRange( T[] items ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PushRange), typeof(T[]) );
		}
        public void PushRange( T[] items, int startIndex, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PushRange), typeof(T[]), typeof(Int32), typeof(Int32) );
		}
        public bool TryPeek( out T result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryPeek), typeof(T) );
            result = default( T );

            return default( bool );

		}
        public bool TryPop( out T result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryPop), typeof(T) );
            result = default( T );

            return default( bool );

		}
        public int TryPopRange( T[] items ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryPopRange), typeof(T[]) );
            return default( int );

		}
        public int TryPopRange( T[] items, int startIndex, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryPopRange), typeof(T[]), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public T[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( T[][] );

		}
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<T> );

		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        bool @System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd), typeof(T) );
            return default( bool );

		}
        bool @System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake( out T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake), typeof(T) );
            item = default( T );

            return default( bool );

		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
    }
}