// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections;

namespace System.Collections.Concurrent {
    public static class Partitioner {

        public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>( IList<TSource> list, bool loadBalance ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(IList<TSource>), typeof(Boolean) );
            return default( System.Collections.Concurrent.OrderablePartitioner<TSource> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>( TSource[] array, bool loadBalance ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(TSource[]), typeof(Boolean) );
            return default( System.Collections.Concurrent.OrderablePartitioner<TSource> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>( IEnumerable<TSource> source ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(IEnumerable<TSource>) );
            return default( System.Collections.Concurrent.OrderablePartitioner<TSource> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>( IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(IEnumerable<TSource>), typeof(EnumerablePartitionerOptions) );
            return default( System.Collections.Concurrent.OrderablePartitioner<TSource> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> Create( long fromInclusive, long toExclusive ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(Int64), typeof(Int64) );
            return default( System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> Create( long fromInclusive, long toExclusive, long rangeSize ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(Int64), typeof(Int64), typeof(Int64) );
            return default( System.Collections.Concurrent.OrderablePartitioner<System.Tuple<long, long>> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> Create( int fromInclusive, int toExclusive ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(Int32), typeof(Int32) );
            return default( System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> );

		}
        public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> Create( int fromInclusive, int toExclusive, int rangeSize ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int, int>> );

		}
    }
}