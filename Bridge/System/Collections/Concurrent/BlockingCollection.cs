// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Collections.Generic;

using System.Threading;

namespace System.Collections.Concurrent {
    public class BlockingCollection<T> : ICollection, IEnumerable<T>
    {

        public int BoundedCapacity {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BoundedCapacity));
				return default (Int32);
			}
		}
        public bool IsAddingCompleted {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAddingCompleted));
				return default (Boolean);
			}
		}
        public bool IsCompleted {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsCompleted));
				return default (Boolean);
			}
		}
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        internal static bool IsSTAThread {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSTAThread));
				return default (Boolean);
			}
		}
        public BlockingCollection(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BlockingCollection<T>));
            }
        public BlockingCollection( int boundedCapacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BlockingCollection<T>), typeof(Int32));
            }
        public BlockingCollection( System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BlockingCollection<T>), typeof(IProducerConsumerCollection<T>), typeof(Int32));
            }
        public BlockingCollection( System.Collections.Concurrent.IProducerConsumerCollection<T> collection )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BlockingCollection<T>), typeof(IProducerConsumerCollection<T>));
            }
        public void Add( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(T) );
		}
        public void Add( T item, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(T), typeof(CancellationToken) );
		}
        public bool TryAdd( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAdd), typeof(T) );
            return default( bool );

		}
        public bool TryAdd( T item, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAdd), typeof(T), typeof(TimeSpan) );
            return default( bool );

		}
        public bool TryAdd( T item, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAdd), typeof(T), typeof(Int32) );
            return default( bool );

		}
        public bool TryAdd( T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAdd), typeof(T), typeof(Int32), typeof(CancellationToken) );
            return default( bool );

		}
        public T Take() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Take) );
            return default( T );

		}
        public T Take( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Take), typeof(CancellationToken) );
            return default( T );

		}
        public bool TryTake( out T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryTake), typeof(T) );
            item = default( T );

            return default( bool );

		}
        public bool TryTake( out T item, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryTake), typeof(T), typeof(TimeSpan) );
            item = default( T );

            return default( bool );

		}
        public bool TryTake( out T item, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryTake), typeof(T), typeof(Int32) );
            item = default( T );

            return default( bool );

		}
        public bool TryTake( out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryTake), typeof(T), typeof(Int32), typeof(CancellationToken) );
            item = default( T );

            return default( bool );

		}
        public static int AddToAny( System.Collections.Concurrent.BlockingCollection<T> collections, T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddToAny), typeof(BlockingCollection<T>[]), typeof(T) );
            return default( int );

		}
        public static int AddToAny( System.Collections.Concurrent.BlockingCollection<T> collections, T item, System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddToAny), typeof(BlockingCollection<T>[]), typeof(T), typeof(CancellationToken) );
            return default( int );

		}
        public static int TryAddToAny( System.Collections.Concurrent.BlockingCollection<T> collections, T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAddToAny), typeof(BlockingCollection<T>[]), typeof(T) );
            return default( int );

		}
        public static int TryAddToAny( System.Collections.Concurrent.BlockingCollection<T> collections, T item, System.TimeSpan timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAddToAny), typeof(BlockingCollection<T>[]), typeof(T), typeof(TimeSpan) );
            return default( int );

		}
        public static int TryAddToAny( System.Collections.Concurrent.BlockingCollection<T> collections, T item, int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryAddToAny), typeof(BlockingCollection<T>[]), typeof(T), typeof(Int32) );
            return default( int );

		}

        public void CompleteAdding() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CompleteAdding) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public T[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( T[][] );

		}
        public void CopyTo( T[] array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(T[]), typeof(Int32) );
		}
        public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetConsumingEnumerable) );
            return default( System.Collections.Generic.IEnumerable<T> );

		}
        public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetConsumingEnumerable), typeof(CancellationToken) );
            return default( System.Collections.Generic.IEnumerable<T> );

		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        System.Collections.Generic.IEnumerator<T> @System.Collections.Generic.IEnumerable<T>.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.IEnumerable<T>.GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<T> );

		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
    }
}