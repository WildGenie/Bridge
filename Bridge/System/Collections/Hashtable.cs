// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System;
using System.Runtime.Serialization;

namespace System.Collections {
    public class Hashtable: System.Collections.IDictionary, System.ICloneable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable {

        internal const int HashPrime = 101;

        internal System.Collections.IHashCodeProvider hcp {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(hcp));
				return default (IHashCodeProvider);
			}
		}
        internal System.Collections.IComparer comparer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(comparer));
				return default (IComparer);
			}
		}
        internal System.Collections.IEqualityComparer EqualityComparer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EqualityComparer));
				return default (IEqualityComparer);
			}
		}
        public virtual System.Object this[System.Object key] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( System.Object );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public virtual bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        public virtual bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFixedSize));
				return default (Boolean);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Collections.ICollection Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Keys));
				return default (ICollection);
			}
		}
        public virtual System.Collections.ICollection Values {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Values));
				return default (ICollection);
			}
		}
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public Hashtable(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable));
            }
        public Hashtable( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32));
            }
        public Hashtable( int capacity, float loadFactor )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32), typeof(Single));
            }
        public Hashtable( int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32), typeof(Single), typeof(IHashCodeProvider), typeof(IComparer));
            }
        public Hashtable( int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32), typeof(Single), typeof(IEqualityComparer));
            }
        public Hashtable( System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IHashCodeProvider), typeof(IComparer));
            }
        public Hashtable( System.Collections.IEqualityComparer equalityComparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IEqualityComparer));
            }
        public Hashtable( int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32), typeof(IHashCodeProvider), typeof(IComparer));
            }
        public Hashtable( int capacity, System.Collections.IEqualityComparer equalityComparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(Int32), typeof(IEqualityComparer));
            }
        public Hashtable( System.Collections.IDictionary d )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary));
            }
        public Hashtable( System.Collections.IDictionary d, float loadFactor )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary), typeof(Single));
            }
        public Hashtable( System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary), typeof(IHashCodeProvider), typeof(IComparer));
            }
        public Hashtable( System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary), typeof(IEqualityComparer));
            }
        public Hashtable( System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary), typeof(Single), typeof(IHashCodeProvider), typeof(IComparer));
            }
        public Hashtable( System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Hashtable), typeof(IDictionary), typeof(Single), typeof(IEqualityComparer));
            }
        public virtual void Add( System.Object key, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(Object), typeof(Object) );
		}
        public virtual void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public virtual System.Object Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Object );

		}
        public virtual bool Contains( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(Object) );
            return default( bool );

		}
        public virtual bool ContainsKey( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContainsKey), typeof(Object) );
            return default( bool );

		}
        public virtual bool ContainsValue( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContainsValue), typeof(Object) );
            return default( bool );

		}
        public virtual void CopyTo( System.Array array, int arrayIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        internal virtual System.Collections.KeyValuePairs[][] ToKeyValuePairsArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToKeyValuePairsArray) );
            return default( System.Collections.KeyValuePairs[][] );

		}
        public virtual System.Collections.IDictionaryEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IDictionaryEnumerator );

		}
        protected virtual int GetHash( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHash), typeof(Object) );
            return default( int );

		}
        protected virtual bool KeyEquals( System.Object item, System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyEquals), typeof(Object), typeof(Object) );
            return default( bool );

		}
        public virtual void Remove( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(Object) );
		}
        public static System.Collections.Hashtable Synchronized( System.Collections.Hashtable table ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Synchronized), typeof(Hashtable) );
            return default( System.Collections.Hashtable );

		}
        public virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public virtual void OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDeserialization), typeof(Object) );
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public class HashtableDebugView {

        public HashtableDebugView( System.Collections.Hashtable hashtable )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashtableDebugView), typeof(Hashtable));
            }
        }
    }
}