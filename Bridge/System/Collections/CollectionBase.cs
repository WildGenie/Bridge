// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System;

namespace System.Collections {
    public abstract class CollectionBase: System.Collections.IList {

        internal System.Collections.ArrayList InnerList {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InnerList));
				return default (ArrayList);
			}
		}
        internal System.Collections.IList List {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(List));
				return default (IList);
			}
		}
        public int Capacity { get; set; }
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}

        public object this[int index]
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }

        bool @System.Collections.IList.IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsReadOnly));
				return default (Boolean);
			}
		}
        bool @System.Collections.IList.IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsFixedSize));
				return default (Boolean);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public void RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
		}
        public System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        protected virtual void OnSet( int index, System.Object oldValue, System.Object newValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnSet), typeof(Int32), typeof(Object), typeof(Object) );
		}
        protected virtual void OnInsert( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnInsert), typeof(Int32), typeof(Object) );
		}
        protected virtual void OnClear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnClear) );
		}
        protected virtual void OnRemove( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnRemove), typeof(Int32), typeof(Object) );
		}
        protected virtual void OnValidate( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnValidate), typeof(Object) );
		}
        protected virtual void OnSetComplete( int index, System.Object oldValue, System.Object newValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnSetComplete), typeof(Int32), typeof(Object), typeof(Object) );
		}
        protected virtual void OnInsertComplete( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnInsertComplete), typeof(Int32), typeof(Object) );
		}
        protected virtual void OnClearComplete() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnClearComplete) );
		}
        protected virtual void OnRemoveComplete( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnRemoveComplete), typeof(Int32), typeof(Object) );
		}

        public bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsReadOnly));
				return default (Boolean);
			}
		}

        public bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsFixedSize));
				return default (Boolean);
			}
		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        bool @System.Collections.IList.Contains( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Contains), typeof(Object) );
            return default( bool );

		}
        int @System.Collections.IList.Add( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Add), typeof(Object) );
            return default( int );

		}
        void @System.Collections.IList.Remove( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Remove), typeof(Object) );
		}
        int @System.Collections.IList.IndexOf( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.IndexOf), typeof(Object) );
            return default( int );

		}
        void @System.Collections.IList.Insert( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IList.Insert), typeof(Int32), typeof(Object) );
		}
    }
}