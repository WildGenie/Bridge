// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections;

namespace System.Collections {
    public class Stack: System.ICloneable, System.Collections.ICollection {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        public Stack(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stack));
            }
        public Stack( int initialCapacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stack), typeof(Int32));
            }
        public Stack( System.Collections.ICollection col )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stack), typeof(ICollection));
            }
        public virtual void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public virtual System.Object Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Object );

		}
        public virtual bool Contains( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(Object) );
            return default( bool );

		}
        public virtual void CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        public virtual System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public virtual System.Object Peek() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Peek) );
            return default( System.Object );

		}
        public virtual System.Object Pop() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Pop) );
            return default( System.Object );

		}
        public virtual void Push( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Push), typeof(Object) );
		}
        public static System.Collections.Stack Synchronized( System.Collections.Stack stack ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Synchronized), typeof(Stack) );
            return default( System.Collections.Stack );

		}
        public virtual System.Object[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( System.Object[][] );

		}
        public class StackDebugView {

        public System.Object[][] Items {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Items));
				return default (Object[][]);
			}
		}
        public StackDebugView( System.Collections.Stack stack )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StackDebugView), typeof(Stack));
            }
        }
    }
}