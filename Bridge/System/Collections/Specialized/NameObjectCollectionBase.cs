// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Runtime.Serialization;
using System;
using System.Collections.Specialized;

namespace System.Collections.Specialized {
    public abstract class NameObjectCollectionBase: System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.ICollection {

        internal System.Collections.IEqualityComparer Comparer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Comparer));
				return default (IEqualityComparer);
			}
		}
        internal bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Keys));
				return default (KeysCollection);
			}
		}
        public virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public virtual void OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDeserialization), typeof(Object) );
		}
        protected bool BaseHasKeys() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseHasKeys) );
            return default( bool );

		}
        protected void BaseAdd( string name, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseAdd), typeof(String), typeof(Object) );
		}
        protected void BaseRemove( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseRemove), typeof(String) );
		}
        protected void BaseRemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseRemoveAt), typeof(Int32) );
		}
        protected void BaseClear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseClear) );
		}
        protected System.Object BaseGet( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGet), typeof(String) );
            return default( System.Object );

		}
        protected void BaseSet( string name, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseSet), typeof(String), typeof(Object) );
		}
        protected System.Object BaseGet( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGet), typeof(Int32) );
            return default( System.Object );

		}
        protected string BaseGetKey( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGetKey), typeof(Int32) );
            return default( string );

		}
        protected void BaseSet( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseSet), typeof(Int32), typeof(Object) );
		}
        public virtual System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        protected string[][] BaseGetAllKeys() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGetAllKeys) );
            return default( string[][] );

		}
        protected System.Object[][] BaseGetAllValues() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGetAllValues) );
            return default( System.Object[][] );

		}
        protected System.Object[][] BaseGetAllValues( System.Type type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseGetAllValues), typeof(Type) );
            return default( System.Object[][] );

		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        public class NameObjectEntry {

        }
        public class NameObjectKeysEnumerator: System.Collections.IEnumerator {

        public virtual System.Object Current {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Current));
				return default (Object);
			}
		}
        public bool MoveNext() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MoveNext) );
            return default( bool );

		}
        public void Reset() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reset) );
		}
        }
        public class KeysCollection: System.Collections.ICollection {

        public string this[int index] {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
				return default (String);
			}
		}
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}

        public void CopyTo(Array array, int arrayIndex)
        {
            throw new NotImplementedException();
        }

        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual string Get( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Get), typeof(Int32) );
            return default( string );

		}
        public System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        }
    }
}