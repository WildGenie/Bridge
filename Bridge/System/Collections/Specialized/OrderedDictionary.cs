// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Runtime.Serialization;
using System.Collections.Specialized;
using System;

namespace System.Collections.Specialized {
    public class OrderedDictionary: System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.Collections.Specialized.IOrderedDictionary {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        bool @System.Collections.IDictionary.IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.IsFixedSize));
				return default (Boolean);
			}
		}
        public virtual bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Collections.ICollection Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Keys));
				return default (ICollection);
			}
		}
        internal System.Collections.ArrayList objectsArray {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(objectsArray));
				return default (ArrayList);
			}
		}
        internal System.Collections.Hashtable objectsTable {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(objectsTable));
				return default (Hashtable);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        public virtual System.Object this[int index] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( System.Object );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public virtual System.Object this[System.Object key] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( System.Object );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public virtual System.Collections.ICollection Values {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Values));
				return default (ICollection);
			}
		}
        public OrderedDictionary(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OrderedDictionary));
            }
        public OrderedDictionary( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OrderedDictionary), typeof(Int32));
            }
        public OrderedDictionary( System.Collections.IEqualityComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OrderedDictionary), typeof(IEqualityComparer));
            }
        public OrderedDictionary( int capacity, System.Collections.IEqualityComparer comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OrderedDictionary), typeof(Int32), typeof(IEqualityComparer));
            }
        public void Add( System.Object key, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(Object), typeof(Object) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public System.Collections.Specialized.OrderedDictionary AsReadOnly() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AsReadOnly) );
            return default( System.Collections.Specialized.OrderedDictionary );

		}
        public bool Contains( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(Object) );
            return default( bool );

		}
        public void CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        public void Insert( int index, System.Object key, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Insert), typeof(Int32), typeof(Object), typeof(Object) );
		}
        protected virtual void OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDeserialization), typeof(Object) );
		}
        public void RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
		}
        public void Remove( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(Object) );
		}
        public virtual System.Collections.IDictionaryEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IDictionaryEnumerator );

		}
        public virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}

        public bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.IsFixedSize));
				return default (Boolean);
			}
		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        void @System.Runtime.Serialization.IDeserializationCallback.OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Runtime.Serialization.IDeserializationCallback.OnDeserialization), typeof(Object) );
		}
    }
}