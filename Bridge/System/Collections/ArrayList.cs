// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections;

namespace System.Collections {
    public class ArrayList {

        public virtual int Capacity { get; set; }
        public virtual int Count {
			get{
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public virtual bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFixedSize));
				return default (Boolean);
			}
		}
        public virtual bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReadOnly));
				return default (Boolean);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        public virtual System.Object this[int index] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( System.Object );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public ArrayList(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ArrayList));
            }
        public ArrayList( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ArrayList), typeof(Int32));
            }
        public ArrayList( System.Collections.ICollection c )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ArrayList), typeof(ICollection));
            }
        public static System.Collections.ArrayList Adapter( System.Collections.IList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Adapter), typeof(IList) );
            return default( System.Collections.ArrayList );

		}
        public virtual int Add( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(Object) );
            return default( int );

		}
        public virtual void AddRange( System.Collections.ICollection c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(ICollection) );
		}
        public virtual int BinarySearch( int index, int count, System.Object value, System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BinarySearch), typeof(Int32), typeof(Int32), typeof(Object), typeof(IComparer) );
            return default( int );

		}
        public virtual int BinarySearch( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BinarySearch), typeof(Object) );
            return default( int );

		}
        public virtual int BinarySearch( System.Object value, System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BinarySearch), typeof(Object), typeof(IComparer) );
            return default( int );

		}
        public virtual void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public virtual System.Object Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Object );

		}
        public virtual bool Contains( System.Object item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(Object) );
            return default( bool );

		}
        public virtual void CopyTo( System.Array array ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array) );
		}
        public virtual void CopyTo( System.Array array, int arrayIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        public virtual void CopyTo( int index, System.Array array, int arrayIndex, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Int32), typeof(Array), typeof(Int32), typeof(Int32) );
		}
        public static System.Collections.IList FixedSize( System.Collections.IList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FixedSize), typeof(IList) );
            return default( System.Collections.IList );

		}
        public static System.Collections.ArrayList FixedSize( System.Collections.ArrayList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FixedSize), typeof(ArrayList) );
            return default( System.Collections.ArrayList );

		}
        public virtual System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public virtual System.Collections.IEnumerator GetEnumerator( int index, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator), typeof(Int32), typeof(Int32) );
            return default( System.Collections.IEnumerator );

		}
        public virtual int IndexOf( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Object) );
            return default( int );

		}
        public virtual int IndexOf( System.Object value, int startIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Object), typeof(Int32) );
            return default( int );

		}
        public virtual int IndexOf( System.Object value, int startIndex, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(Object), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public virtual void Insert( int index, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Insert), typeof(Int32), typeof(Object) );
		}
        public virtual void InsertRange( int index, System.Collections.ICollection c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InsertRange), typeof(Int32), typeof(ICollection) );
		}
        public virtual int LastIndexOf( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastIndexOf), typeof(Object) );
            return default( int );

		}
        public virtual int LastIndexOf( System.Object value, int startIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastIndexOf), typeof(Object), typeof(Int32) );
            return default( int );

		}
        public virtual int LastIndexOf( System.Object value, int startIndex, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastIndexOf), typeof(Object), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public static System.Collections.IList ReadOnly( System.Collections.IList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadOnly), typeof(IList) );
            return default( System.Collections.IList );

		}
        public static System.Collections.ArrayList ReadOnly( System.Collections.ArrayList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadOnly), typeof(ArrayList) );
            return default( System.Collections.ArrayList );

		}
        public virtual void Remove( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(Object) );
		}
        public virtual void RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
		}
        public virtual void RemoveRange( int index, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveRange), typeof(Int32), typeof(Int32) );
		}
        public static System.Collections.ArrayList Repeat( System.Object value, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Repeat), typeof(Object), typeof(Int32) );
            return default( System.Collections.ArrayList );

		}
        public virtual void Reverse() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reverse) );
		}
        public virtual void Reverse( int index, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reverse), typeof(Int32), typeof(Int32) );
		}
        public virtual void SetRange( int index, System.Collections.ICollection c ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetRange), typeof(Int32), typeof(ICollection) );
		}
        public virtual System.Collections.ArrayList GetRange( int index, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRange), typeof(Int32), typeof(Int32) );
            return default( System.Collections.ArrayList );

		}
        public virtual void Sort() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort) );
		}
        public virtual void Sort( System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort), typeof(IComparer) );
		}
        public virtual void Sort( int index, int count, System.Collections.IComparer comparer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Sort), typeof(Int32), typeof(Int32), typeof(IComparer) );
		}
        public static System.Collections.IList Synchronized( System.Collections.IList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Synchronized), typeof(IList) );
            return default( System.Collections.IList );

		}
        public static System.Collections.ArrayList Synchronized( System.Collections.ArrayList list ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Synchronized), typeof(ArrayList) );
            return default( System.Collections.ArrayList );

		}
        public virtual System.Object[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( System.Object[][] );

		}
        public virtual System.Array ToArray( System.Type type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray), typeof(Type) );
            return default( System.Array );

		}
        public virtual void TrimToSize() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TrimToSize) );
		}
        public class ArrayListDebugView {

        public System.Object[][] Items {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Items));
				return default (Object[][]);
			}
		}
        public ArrayListDebugView( System.Collections.ArrayList arrayList )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ArrayListDebugView), typeof(ArrayList));
            }
        }
    }
}