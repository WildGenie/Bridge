// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Collections.Generic;
using System;

namespace System.Collections.Generic {
    public class SortedDictionary<TKey, TValue> : Dictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IDictionary
    {

        bool @System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly));
				return default (Boolean);
			}
		}
        public new virtual TValue this[TKey key] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( TValue );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public new virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public new IComparer<TKey> Comparer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Comparer));
				return default (IComparer<TKey>);
			}
		}

        public SortedDictionary(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SortedDictionary<TKey, TValue>));
            }
        public SortedDictionary( System.Collections.Generic.IDictionary<TKey, TValue> dictionary )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SortedDictionary<TKey, TValue>), typeof(IDictionary<TKey, TValue>));
            }
        public SortedDictionary( System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SortedDictionary<TKey, TValue>), typeof(IDictionary), typeof(SortedDictionary<TKey, TValue>));
            }
        public SortedDictionary( System.Collections.Generic.IComparer<TKey> comparer )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SortedDictionary<TKey, TValue>), typeof(IComparer));
            }
        public new void Add( TKey key, TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(TKey), typeof(TValue) );
		}
        public new void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public new bool ContainsKey( TKey key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContainsKey), typeof(TKey) );
            return default( bool );

		}
        public new bool ContainsValue( TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContainsValue), typeof(TValue) );
            return default( bool );

		}
        public void CopyTo( System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(KeyValuePair<TKey, TValue>), typeof(Int32) );
		}
        public new System.Collections.Generic.SortedDictionary<TKey, TValue> GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.Generic.SortedDictionary<TKey, TValue> );

		}
        public new bool Remove( TKey key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(TKey) );
            return default( bool );

		}
        public new bool TryGetValue( TKey key, out TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryGetValue), typeof(TKey), typeof(TValue) );
            value = default( TValue );

            return default( bool );

		}

        public bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly));
				return default (Boolean);
			}
		}
        ICollection<TKey> @System.Collections.Generic.IDictionary<TKey,TValue>.Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.Generic.IDictionary<TKey,TValue>.Keys));
				return default (ICollection<TKey>);
			}
		}
        ICollection<TValue> @System.Collections.Generic.IDictionary<TKey,TValue>.Values {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.Generic.IDictionary<TKey,TValue>.Values));
				return default (ICollection<TValue>);
			}
		}
        bool @System.Collections.IDictionary.IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.IsFixedSize));
				return default (Boolean);
			}
		}
        bool @System.Collections.IDictionary.IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.IsReadOnly));
				return default (Boolean);
			}
		}
        System.Collections.ICollection @System.Collections.IDictionary.Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.Keys));
				return default (ICollection);
			}
		}
        System.Collections.ICollection @System.Collections.IDictionary.Values {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary.Values));
				return default (ICollection);
			}
		}
        System.Object this[System.Object key] {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IDictionary));
				return default (Object);
			}
		}
        bool @System.Collections.ICollection.IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}
        System.Object @System.Collections.ICollection.SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
        void @System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add( KeyValuePair<TKey, TValue> keyValuePair ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add), typeof(KeyValuePair<TKey, TValue>) );
		}
        bool @System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains( KeyValuePair<TKey, TValue> keyValuePair ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains), typeof(KeyValuePair<TKey, TValue>) );
            return default( bool );

		}
        bool @System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove( KeyValuePair<TKey, TValue> keyValuePair ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove), typeof(KeyValuePair<TKey, TValue>) );
            return default( bool );

		}
        System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> @System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> );

		}
        void @System.Collections.ICollection.CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.ICollection.CopyTo), typeof(Array), typeof(Int32) );
		}
        void @System.Collections.IDictionary.Add( System.Object key, System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IDictionary.Add), typeof(Object), typeof(Object) );
		}
        bool @System.Collections.IDictionary.Contains( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IDictionary.Contains), typeof(Object) );
            return default( bool );
        
		}
        System.Collections.IDictionaryEnumerator @System.Collections.IDictionary.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IDictionary.GetEnumerator) );
            return default( System.Collections.IDictionaryEnumerator );

		}
        void @System.Collections.IDictionary.Remove( System.Object key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IDictionary.Remove), typeof(Object) );
		}
        System.Collections.IEnumerator @System.Collections.IEnumerable.GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Collections.IEnumerable.GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
    }
}