// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Collections;

namespace System.Collections {
    public class Queue: System.ICloneable, System.Collections.ICollection {

        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public virtual bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSynchronized));
				return default (Boolean);
			}
		}
        public virtual System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SyncRoot));
				return default (Object);
			}
		}
        public Queue(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Queue));
            }
        public Queue( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Queue), typeof(Int32));
            }
        public Queue( int capacity, float growFactor )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Queue), typeof(Int32), typeof(Single));
            }
        public Queue( System.Collections.ICollection col )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Queue), typeof(ICollection));
            }
        public virtual System.Object Clone() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clone) );
            return default( System.Object );

		}
        public virtual void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public virtual void CopyTo( System.Array array, int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(Array), typeof(Int32) );
		}
        public virtual void Enqueue( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Enqueue), typeof(Object) );
		}
        public virtual System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        public virtual System.Object Dequeue() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dequeue) );
            return default( System.Object );

		}
        public virtual System.Object Peek() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Peek) );
            return default( System.Object );

		}
        public static System.Collections.Queue Synchronized( System.Collections.Queue queue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Synchronized), typeof(Queue) );
            return default( System.Collections.Queue );

		}
        public virtual bool Contains( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(Object) );
            return default( bool );

		}
        internal System.Object GetElement( int i ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetElement), typeof(Int32) );
            return default( System.Object );

		}
        public virtual System.Object[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( System.Object[][] );

		}
        public virtual void TrimToSize() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TrimToSize) );
		}
        public class QueueDebugView {

        public System.Object[][] Items {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Items));
				return default (Object[][]);
			}
		}
        public QueueDebugView( System.Collections.Queue queue )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(QueueDebugView), typeof(Queue));
            }
        }
    }
}