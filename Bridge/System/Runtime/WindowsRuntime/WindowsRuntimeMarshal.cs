// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Threading;

namespace System.Runtime.InteropServices.WindowsRuntime {
    public static class WindowsRuntimeMarshal {

        public static void AddEventHandler<T>( Func<T, System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> addMethod, System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddEventHandler), typeof(Func<EventRegistrationToken, Action>), typeof(Action<T>), typeof(T) );
		}
        public static void RemoveEventHandler<T>( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveEventHandler), typeof(Action<T>), typeof(T) );
		}
        public static void RemoveAllEventHandlers( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAllEventHandlers), typeof(Action<EventRegistrationToken>) );
		}
        internal static int GetRegistrationTokenCacheSize() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRegistrationTokenCacheSize) );
            return default( int );

		}
        internal static void CallRemoveMethods( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, System.Collections.Generic.List<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> tokensToRemove ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CallRemoveMethods), typeof(Action<EventRegistrationToken>), typeof(List<EventRegistrationToken>) );
		}
        internal static string HStringToString( System.IntPtr hstring ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HStringToString), typeof(IntPtr) );
            return default( string );

		}
        internal static System.Exception GetExceptionForHR( int hresult, System.Exception innerException, string messageResource ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetExceptionForHR), typeof(Int32), typeof(Exception), typeof(String) );
            return default( System.Exception );

		}
        internal static System.Exception GetExceptionForHR( int hresult, System.Exception innerException ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetExceptionForHR), typeof(Int32), typeof(Exception) );
            return default( System.Exception );

		}
        internal static bool ReportUnhandledError( System.Exception e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReportUnhandledError), typeof(Exception) );
            return default( bool );

		}
        public static System.Runtime.InteropServices.WindowsRuntime.IActivationFactory GetActivationFactory( System.Type type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetActivationFactory), typeof(Type) );
            return default( System.Runtime.InteropServices.WindowsRuntime.IActivationFactory );

		}
        public static System.IntPtr StringToHString( string s ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StringToHString), typeof(String) );
            return default( System.IntPtr );

		}
        public static string PtrToStringHString( System.IntPtr ptr ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PtrToStringHString), typeof(IntPtr) );
            return default( string );

		}
        public static void FreeHString( System.IntPtr ptr ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FreeHString), typeof(IntPtr) );
		}
        public struct EventRegistrationTokenList {

        public bool Push( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Push), typeof(EventRegistrationToken) );
            return default( bool );

		}
        public bool Pop( out System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Pop), typeof(EventRegistrationToken) );
            token = default( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken );

            return default( bool );

		}
        public void CopyTo( System.Collections.Generic.List<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> tokens ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(List<EventRegistrationToken>) );
		}
        }
        public static class ManagedEventRegistrationImpl {

            internal static void AddEventHandler<T>( Func<T, System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> addMethod, System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddEventHandler), typeof(Func<EventRegistrationToken>), typeof(Action<T>), typeof(T) );
		}
        internal static void RemoveEventHandler<T>( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveEventHandler), typeof(Action<T>), typeof(T) );
		}
        internal static void RemoveAllEventHandlers( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAllEventHandlers), typeof(Action<EventRegistrationToken>) );
		}
        }
        public static class NativeOrStaticEventRegistrationImpl {

        internal static void AddEventHandler<T>( Func<T, System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> addMethod, System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddEventHandler), typeof(Func<EventRegistrationToken>), typeof(Action<T>), typeof(T) );
		}
        internal static void RemoveEventHandler<T>( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod, T handler ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveEventHandler), typeof(Action<T>), typeof(T) );
		}
        internal static void RemoveAllEventHandlers( System.Action<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> removeMethod ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAllEventHandlers), typeof(Action<EventRegistrationToken>) );
		}
            public struct EventCacheKey {

                public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
                return default( string );

		}
            }
            public class EventCacheKeyEqualityComparer: System.Collections.Generic.IEqualityComparer<System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.NativeOrStaticEventRegistrationImpl.EventCacheKey> {

            public bool Equals( System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.NativeOrStaticEventRegistrationImpl.EventCacheKey lhs, System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.NativeOrStaticEventRegistrationImpl.EventCacheKey rhs ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(EventCacheKey), typeof(EventCacheKey) );
                return default( bool );

		}
            public int GetHashCode( System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.NativeOrStaticEventRegistrationImpl.EventCacheKey key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode), typeof(EventCacheKey) );
                return default( int );

		}
            }
            public class EventRegistrationTokenListWithCount {

            public void Push( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Push), typeof(EventRegistrationToken) );
		}
            public bool Pop( out System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Pop), typeof(EventRegistrationToken) );
                token = default( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken );

                return default( bool );

		}
            public void CopyTo( System.Collections.Generic.List<System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken> tokens ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(List<EventRegistrationToken>) );
		}
            }
            public class TokenListCount {

            internal System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.NativeOrStaticEventRegistrationImpl.EventCacheKey Key {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Key));
				return default (EventCacheKey);
			}
		}
            internal void Inc() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Inc) );
		}
            internal void Dec() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dec) );
		}
            }
            public struct EventCacheEntry {

            }
            public class ReaderWriterLockTimedOutException: System.ApplicationException {

            public ReaderWriterLockTimedOutException(  ) : base( default( string ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReaderWriterLockTimedOutException));
                }
            }
            public class MyReaderWriterLock {

            internal void AcquireReaderLock( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcquireReaderLock), typeof(Int32) );
		}
            internal void AcquireWriterLock( int millisecondsTimeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcquireWriterLock), typeof(Int32) );
		}
            internal void ReleaseReaderLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReleaseReaderLock) );
		}
            internal void ReleaseWriterLock() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReleaseWriterLock) );
		}
            }
        }
    }
}