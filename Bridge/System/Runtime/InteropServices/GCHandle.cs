// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices;

namespace System.Runtime.InteropServices {
    public struct GCHandle {

        public bool IsAllocated { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAllocated));
				return default (Boolean);
			}
		}
        public System.Object Target { get; set; }
        public System.IntPtr AddrOfPinnedObject() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddrOfPinnedObject) );
            return default( System.IntPtr );
        
		}
        public static System.Runtime.InteropServices.GCHandle Alloc( System.Object value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Alloc), typeof(Object) );
            return default( System.Runtime.InteropServices.GCHandle );
        
		}
        public static System.Runtime.InteropServices.GCHandle Alloc( System.Object value, System.Runtime.InteropServices.GCHandleType type ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Alloc), typeof(Object), typeof(GCHandleType) );
            return default( System.Runtime.InteropServices.GCHandle );
        
		}
        public void Free() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Free) ); 
		}
        public override bool Equals( System.Object o ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );
        
		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );
        
		}
        public static System.Runtime.InteropServices.GCHandle FromIntPtr( System.IntPtr value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromIntPtr), typeof(IntPtr) );
            return default( System.Runtime.InteropServices.GCHandle );
        
		}
        public static System.IntPtr ToIntPtr( System.Runtime.InteropServices.GCHandle value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToIntPtr), typeof(GCHandle) );
            return default( System.IntPtr );
        
		}
    }
}