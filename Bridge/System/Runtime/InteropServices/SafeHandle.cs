// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.InteropServices;

namespace System.Runtime.InteropServices {
    public abstract class SafeHandle: System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable {


        public bool IsClosed {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsClosed));
				return default (Boolean);
			}
		}
        public abstract bool IsInvalid { get; }

        protected void SetHandle( System.IntPtr handle ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetHandle), typeof(IntPtr) );
		}
        public System.IntPtr DangerousGetHandle() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousGetHandle) );
            return default( System.IntPtr );

		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        protected abstract bool ReleaseHandle();

        public void SetHandleAsInvalid() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetHandleAsInvalid) );
		}
        public void DangerousAddRef( ref System.Boolean success ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousAddRef), typeof(Boolean) );
		}
        public void DangerousRelease() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DangerousRelease) );
		}
    }
}