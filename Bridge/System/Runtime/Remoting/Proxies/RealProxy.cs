// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.Remoting.Contexts;
using System.Runtime.Remoting;
using System.Runtime.Serialization;
using System.Runtime.Remoting.Proxies;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Activation;
using System.Runtime;

namespace System.Runtime.Remoting.Proxies {
    public abstract class RealProxy {
        
        public System.Type GetProxiedType() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetProxiedType) );
            return default( System.Type );

		}
        public virtual System.Runtime.Remoting.ObjRef CreateObjRef( System.Type requestedType ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateObjRef), typeof(Type) );
            return default( System.Runtime.Remoting.ObjRef );

		}
        public virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public virtual System.IntPtr GetCOMIUnknown( bool fIsMarshalled ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCOMIUnknown), typeof(Boolean) );
            return default( System.IntPtr );

		}
        public virtual void SetCOMIUnknown( System.IntPtr i ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetCOMIUnknown), typeof(IntPtr) );
		}
        public virtual System.IntPtr SupportsInterface( ref System.Guid iid ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsInterface), typeof(Guid) );
            return default( System.IntPtr );

		}
        public static System.Object GetStubData( System.Runtime.Remoting.Proxies.RealProxy rp ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetStubData), typeof(RealProxy) );
            return default( System.Object );

		}
        public static void SetStubData( System.Runtime.Remoting.Proxies.RealProxy rp, System.Object stubData ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetStubData), typeof(RealProxy), typeof(Object) );
		}
        public abstract System.Runtime.Remoting.Messaging.IMessage Invoke( System.Runtime.Remoting.Messaging.IMessage msg );

        internal static System.Object PrivateInvoke( System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, out System.Exception exc, out System.Object[] out_args ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PrivateInvoke), typeof(RealProxy), typeof(IMessage), typeof(Exception), typeof(Object[]) );
            exc = default( System.Exception ); out_args = default( System.Object[] );

            return default( System.Object );

		}
        internal virtual System.Object InternalGetTransparentProxy( string className ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalGetTransparentProxy), typeof(String) );
            return default( System.Object );

		}
        public virtual System.Object GetTransparentProxy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTransparentProxy) );
            return default( System.Object );

		}
        public System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject( System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InitializeServerObject), typeof(IConstructionCallMessage) );
            return default( System.Runtime.Remoting.Activation.IConstructionReturnMessage );

		}
        protected void AttachServer( System.MarshalByRefObject s ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AttachServer), typeof(MarshalByRefObject) );
		}
        protected System.MarshalByRefObject DetachServer() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DetachServer) );
            return default( System.MarshalByRefObject );

		}
        protected System.MarshalByRefObject GetUnwrappedServer() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUnwrappedServer) );
            return default( System.MarshalByRefObject );

		}
        internal void SetTargetDomain( int domainId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetTargetDomain), typeof(Int32) );
		}
        internal System.Object GetAppDomainTarget() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAppDomainTarget) );
            return default( System.Object );

		}
    }
}