// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Collections.Generic;
using System;
using System.Runtime.CompilerServices;
using System.Collections.ObjectModel;
using System.Runtime;

namespace System.Runtime.CompilerServices {
    public class ReadOnlyCollectionBuilder<T>
    {

        public int Capacity { get; set; }
        public virtual int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}

        public object this[int index]
        {
            get => throw new NotImplementedException();
            set => throw new NotImplementedException();
        }

        public ReadOnlyCollectionBuilder(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadOnlyCollectionBuilder<T>));
            }
        public ReadOnlyCollectionBuilder( int capacity )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadOnlyCollectionBuilder<T>), typeof(Int32));
            }
        public ReadOnlyCollectionBuilder( System.Collections.Generic.IEnumerable<T> collection )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadOnlyCollectionBuilder<T>), typeof(IEnumerable<T>));
            }
        public int IndexOf( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IndexOf), typeof(T) );
            return default( int );

		}
        public void Insert( int index, T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Insert), typeof(Int32), typeof(T) );
		}
        public void RemoveAt( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveAt), typeof(Int32) );
		}
        public void Add( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(T) );
		}
        public void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public bool Contains( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Contains), typeof(T) );
            return default( bool );

		}
        public void CopyTo( T[] array, int arrayIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CopyTo), typeof(T[]), typeof(Int32) );
		}
        public bool Remove( T item ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(T) );
            return default( bool );

		}

        public void CopyTo(KeyValuePair<T, T> array, int index)
        {
            throw new NotImplementedException();
        }

        public System.Collections.Generic.IEnumerator<T> GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.Generic.IEnumerator<T> );

		}
        public void Reverse() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reverse) );
		}
        public void Reverse( int index, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Reverse), typeof(Int32), typeof(Int32) );
		}
        public T[][] ToArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToArray) );
            return default( T[][] );

		}
        public System.Collections.ObjectModel.ReadOnlyCollection<T> ToReadOnlyCollection() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToReadOnlyCollection) );
            return default( System.Collections.ObjectModel.ReadOnlyCollection<T> );

		}

        public bool IsReadOnly {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsReadOnly));
				return default (Boolean);
			}
		}

        public bool IsFixedSize {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.IList.IsFixedSize));
				return default (Boolean);
			}
		}

        public bool IsSynchronized {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.IsSynchronized));
				return default (Boolean);
			}
		}

        public System.Object SyncRoot {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(System.Collections.ICollection.SyncRoot));
				return default (Object);
			}
		}
    }
}