// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace System.Runtime.CompilerServices {
    public class ConditionalWeakTable<TKey, TValue>    where TKey : class    where TValue : class {

        internal ICollection<TKey> Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Keys));
				return default (ICollection<TKey>);
			}
		}
        internal ICollection<TValue> Values {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Values));
				return default (ICollection<TValue>);
			}
		}
        public void Add( TKey key, TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(TKey), typeof(TValue) );
		}
        public bool Remove( TKey key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(TKey) );
            return default( bool );

		}
        public bool TryGetValue( TKey key, out TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryGetValue), typeof(TKey), typeof(TValue) );
            value = default( TValue );

            return default( bool );

		}
        public TValue GetOrCreateValue( TKey key ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetOrCreateValue), typeof(TKey) );
            return default( TValue );

		}
        public TValue GetValue( TKey key, CreateValueCallback<TKey, TValue> createValueCallback ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetValue), typeof(TKey), typeof(CreateValueCallback<TKey, TValue>) );
            return default( TValue );

		}
        internal TKey FindEquivalentKeyUnsafe( TKey key, out TValue value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindEquivalentKeyUnsafe), typeof(TKey), typeof(TValue) );
            value = default( TValue );

            return default( TKey );

		}
        internal void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
    }
}