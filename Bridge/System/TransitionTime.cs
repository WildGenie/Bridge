// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;

namespace System {
    public struct TransitionTime: System.Runtime.Serialization.IDeserializationCallback, System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable {

        public System.DateTime TimeOfDay {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TimeOfDay));
				return default (DateTime);
			}
		}
        public int Month {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Month));
				return default (Int32);
			}
		}
        public int Week {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Week));
				return default (Int32);
			}
		}
        public int Day {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Day));
				return default (Int32);
			}
		}
        public System.DayOfWeek DayOfWeek {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DayOfWeek));
				return default (DayOfWeek);
			}
		}
        public bool IsFixedDateRule {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFixedDateRule));
				return default (Boolean);
			}
		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public bool Equals( System.TimeZoneInfo.TransitionTime other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(TransitionTime) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}

        public void OnDeserialization(object sender)
        {
            throw new NotImplementedException();
        }

        public static System.TimeZoneInfo.TransitionTime CreateFixedDateRule( System.DateTime timeOfDay, int month, int day ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFixedDateRule), typeof(DateTime), typeof(Int32), typeof(Int32) );
            return default( System.TimeZoneInfo.TransitionTime );

		}
        public static System.TimeZoneInfo.TransitionTime CreateFloatingDateRule( System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFloatingDateRule), typeof(DateTime), typeof(Int32), typeof(Int32), typeof(DayOfWeek) );
            return default( System.TimeZoneInfo.TransitionTime );

		}
    }
}