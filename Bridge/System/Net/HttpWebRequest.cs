// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;
using System.Security.Cryptography.X509Certificates;
using System.Net;
using System.Net.Cache;
using System.Net.Security;
using System.Security.Cryptography;

namespace System.Net
{
    public class HttpWebRequest : System.Net.WebRequest
    {


        public string Accept { get; set; }

        public System.Uri Address
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Address));
                return default(Uri);
            }
        }

        public virtual bool AllowAutoRedirect { get; set; }
        public virtual bool AllowWriteStreamBuffering { get; set; }
        public virtual bool AllowReadStreamBuffering { get; set; }
        public System.Net.DecompressionMethods AutomaticDecompression { get; set; }

        internal bool InternalAllowBuffering
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalAllowBuffering));
                return default(Boolean);
            }
        }

        internal bool MethodWithBuffer
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MethodWithBuffer));
                return default(Boolean);
            }
        }

        public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }
        public string Connection { get; set; }
        public override string ConnectionGroupName { get; set; }
        public override long ContentLength { get; set; }

        internal long InternalContentLength
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalContentLength));
                return default(Int64);
            }
        }

        internal bool ThrowOnError
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowOnError));
                return default(Boolean);
            }
        }

        public override string ContentType { get; set; }
        public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }
        public virtual System.Net.CookieContainer CookieContainer { get; set; }
        public override System.Net.ICredentials Credentials { get; set; }
        public System.DateTime Date { get; set; }
        public new static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }
        public static int DefaultMaximumErrorResponseLength { get; set; }
        public string Expect { get; set; }

        public virtual bool HaveResponse
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HaveResponse));
                return default(Boolean);
            }
        }

        public override System.Net.WebHeaderCollection Headers { get; set; }
        public string Host { get; set; }
        public System.DateTime IfModifiedSince { get; set; }
        public bool KeepAlive { get; set; }
        public int MaximumAutomaticRedirections { get; set; }
        public int MaximumResponseHeadersLength { get; set; }
        public static int DefaultMaximumResponseHeadersLength { get; set; }
        public int ReadWriteTimeout { get; set; }
        public int ContinueTimeout { get; set; }
        public string MediaType { get; set; }
        public override string Method { get; set; }
        public bool Pipelined { get; set; }
        public override bool PreAuthenticate { get; set; }
        public System.Version ProtocolVersion { get; set; }
        public override System.Net.IWebProxy Proxy { get; set; }
        public string Referer { get; set; }

        public override System.Uri RequestUri
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RequestUri));
                return default(Uri);
            }
        }

        public bool SendChunked { get; set; }

        public System.Net.ServicePoint ServicePoint
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ServicePoint));
                return default(ServicePoint);
            }
        }

        internal System.Net.ServicePoint ServicePointNoLock
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ServicePointNoLock));
                return default(ServicePoint);
            }
        }

        public virtual bool SupportsCookieContainer
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsCookieContainer));
                return default(Boolean);
            }
        }

        public override int Timeout { get; set; }
        public string TransferEncoding { get; set; }
        public override bool UseDefaultCredentials { get; set; }
        public string UserAgent { get; set; }
        public bool UnsafeAuthenticatedConnectionSharing { get; set; }

        internal bool GotRequestStream
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GotRequestStream));
                return default(Boolean);
            }
        }

        internal bool ExpectContinue
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ExpectContinue));
                return default(Boolean);
            }
        }

        internal System.Uri AuthUri
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthUri));
                return default(Uri);
            }
        }

        internal bool ProxyQuery
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProxyQuery));
                return default(Boolean);
            }
        }

        public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }

        internal bool FinishedReading
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FinishedReading));
                return default(Boolean);
            }
        }

        internal bool Aborted
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Aborted));
                return default(Boolean);
            }
        }

        internal bool ReuseConnection
        {
            get
            {
                Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReuseConnection));
                return default(Boolean);
            }
        }

        internal System.Net.ServicePoint GetServicePoint()
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetServicePoint));
            return default(System.Net.ServicePoint);

        }

        public void AddRange(int range)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(Int32));
        }

        public void AddRange(int from, int to)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(Int32), typeof(Int32));
        }

        public void AddRange(string rangeSpecifier, int range)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(String), typeof(Int32));
        }

        public void AddRange(string rangeSpecifier, int from, int to)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(String), typeof(Int32),
                typeof(Int32));
        }

        public void AddRange(long range)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(Int64));
        }

        public void AddRange(long from, long to)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(Int64), typeof(Int64));
        }

        public void AddRange(string rangeSpecifier, long range)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(String), typeof(Int64));
        }

        public void AddRange(string rangeSpecifier, long from, long to)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddRange), typeof(String), typeof(Int64),
                typeof(Int64));
        }

        public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetRequestStream), typeof(AsyncCallback),
                typeof(Object));
            return default(System.IAsyncResult);

        }

        public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetRequestStream), typeof(IAsyncResult));
            return default(System.IO.Stream);

        }

        public override System.IO.Stream GetRequestStream()
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRequestStream));
            return default(System.IO.Stream);

        }

        public System.IO.Stream GetRequestStream(out System.Net.TransportContext context)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRequestStream), typeof(TransportContext));
            context = default(System.Net.TransportContext);

            return default(System.IO.Stream);

        }

        public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetResponse), typeof(AsyncCallback),
                typeof(Object));
            return default(System.IAsyncResult);

        }

        public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetResponse), typeof(IAsyncResult));
            return default(System.Net.WebResponse);

        }

        public System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult,
            out System.Net.TransportContext context)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetRequestStream), typeof(IAsyncResult),
                typeof(TransportContext));
            context = default(System.Net.TransportContext);

            return default(System.IO.Stream);

        }

        public override System.Net.WebResponse GetResponse()
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetResponse));
            return default(System.Net.WebResponse);

        }

        public override void Abort()
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Abort));
        }

        protected override void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo,
            System.Runtime.Serialization.StreamingContext streamingContext)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo),
                typeof(StreamingContext));
        }

        internal void DoContinueDelegate(int statusCode, System.Net.WebHeaderCollection headers)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DoContinueDelegate), typeof(Int32),
                typeof(WebHeaderCollection));
        }

        internal void SetWriteStreamError(System.Net.WebExceptionStatus status, System.Exception exc)
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetWriteStreamError), typeof(WebExceptionStatus),
                typeof(Exception));
        }

        internal byte[][] GetRequestHeaders()
        {
            Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetRequestHeaders));
            return default(byte[][]);

        }
    }
}