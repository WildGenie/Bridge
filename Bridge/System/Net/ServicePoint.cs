// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Net;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Threading;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;

namespace System.Net {
    public class ServicePoint {

        public System.Uri Address {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Address));
				return default (Uri);
			}
		}
        public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }
        public int ConnectionLeaseTimeout { get; set; }
        public int ConnectionLimit { get; set; }
        public string ConnectionName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectionName));
				return default (String);
			}
		}
        public int CurrentConnections {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CurrentConnections));
				return default (Int32);
			}
		}
        public System.DateTime IdleSince {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IdleSince));
				return default (DateTime);
			}
		}
        public int MaxIdleTime { get; set; }
        public virtual System.Version ProtocolVersion {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProtocolVersion));
				return default (Version);
			}
		}
        public int ReceiveBufferSize { get; set; }
        public bool SupportsPipelining {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsPipelining));
				return default (Boolean);
			}
		}
        public bool Expect100Continue { get; set; }
        public bool UseNagleAlgorithm { get; set; }
        internal bool SendContinue {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendContinue));
				return default (Boolean);
			}
		}
        internal bool UsesProxy {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UsesProxy));
				return default (Boolean);
			}
		}
        internal bool UseConnect {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UseConnect));
				return default (Boolean);
			}
		}
        internal bool HasTimedOut {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasTimedOut));
				return default (Boolean);
			}
		}
        internal System.Net.IPHostEntry HostEntry {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HostEntry));
				return default (IPHostEntry);
			}
		}
        public System.Security.Cryptography.X509Certificates.X509Certificate Certificate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Certificate));
				return default (X509Certificate);
			}
		}
        public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClientCertificate));
				return default (X509Certificate);
			}
		}
        public void SetTcpKeepAlive( bool enabled, int keepAliveTime, int keepAliveInterval ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetTcpKeepAlive), typeof(Boolean), typeof(Int32), typeof(Int32) );
		}
        internal void KeepAliveSetup( System.Net.Sockets.Socket socket ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeepAliveSetup), typeof(Socket) );
		}
        internal void SetVersion( System.Version version ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetVersion), typeof(Version) );
		}
        internal System.EventHandler SendRequest( System.Net.HttpWebRequest request, string groupName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendRequest), typeof(HttpWebRequest), typeof(String) );
            return default( System.EventHandler );

		}
        public bool CloseConnectionGroup( string connectionGroupName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CloseConnectionGroup), typeof(String) );
            return default( bool );

		}
        internal void UpdateServerCertificate( System.Security.Cryptography.X509Certificates.X509Certificate certificate ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UpdateServerCertificate), typeof(X509Certificate) );
		}
        internal void UpdateClientCertificate( System.Security.Cryptography.X509Certificates.X509Certificate certificate ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UpdateClientCertificate), typeof(X509Certificate) );
		}
        internal bool CallEndPointDelegate( System.Net.Sockets.Socket sock, System.Net.IPEndPoint remote ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CallEndPointDelegate), typeof(Socket), typeof(IPEndPoint) );
            return default( bool );

		}
    }
}