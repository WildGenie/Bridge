// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Text;
using System.Net;
using System.IO;
using System.Collections.Specialized;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using System.Collections;
using System.Security.Authentication.ExtendedProtection;
using System.Runtime.Serialization;

namespace System.Net {
    public class HttpListenerRequest {

        public string[][] AcceptTypes {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptTypes));
				return default (String[][]);
			}
		}
        public int ClientCertificateError {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClientCertificateError));
				return default (Int32);
			}
		}
        public System.Text.Encoding ContentEncoding {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentEncoding));
				return default (Encoding);
			}
		}
        public long ContentLength64 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentLength64));
				return default (Int64);
			}
		}
        public string ContentType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentType));
				return default (String);
			}
		}
        public System.Net.CookieCollection Cookies {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Cookies));
				return default (CookieCollection);
			}
		}
        public bool HasEntityBody {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasEntityBody));
				return default (Boolean);
			}
		}
        public System.Collections.Specialized.NameValueCollection Headers {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Headers));
				return default (NameValueCollection);
			}
		}
        public string HttpMethod {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HttpMethod));
				return default (String);
			}
		}
        public System.IO.Stream InputStream {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InputStream));
				return default (Stream);
			}
		}
        public bool IsAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAuthenticated));
				return default (Boolean);
			}
		}
        public bool IsLocal {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLocal));
				return default (Boolean);
			}
		}
        public bool IsSecureConnection {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSecureConnection));
				return default (Boolean);
			}
		}
        public bool KeepAlive {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeepAlive));
				return default (Boolean);
			}
		}
        public System.Net.IPEndPoint LocalEndPoint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LocalEndPoint));
				return default (IPEndPoint);
			}
		}
        public System.Version ProtocolVersion {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProtocolVersion));
				return default (Version);
			}
		}
        public System.Collections.Specialized.NameValueCollection QueryString {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(QueryString));
				return default (NameValueCollection);
			}
		}
        public string RawUrl {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RawUrl));
				return default (String);
			}
		}
        public System.Net.IPEndPoint RemoteEndPoint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoteEndPoint));
				return default (IPEndPoint);
			}
		}
        public System.Guid RequestTraceIdentifier {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RequestTraceIdentifier));
				return default (Guid);
			}
		}
        public System.Uri Url {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Url));
				return default (Uri);
			}
		}
        public System.Uri UrlReferrer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UrlReferrer));
				return default (Uri);
			}
		}
        public string UserAgent {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserAgent));
				return default (String);
			}
		}
        public string UserHostAddress {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserHostAddress));
				return default (String);
			}
		}
        public string UserHostName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserHostName));
				return default (String);
			}
		}
        public string[][] UserLanguages {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UserLanguages));
				return default (String[][]);
			}
		}
        public string ServiceName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ServiceName));
				return default (String);
			}
		}
        public System.Net.TransportContext TransportContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TransportContext));
				return default (TransportContext);
			}
		}
        public bool IsWebSocketRequest {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsWebSocketRequest));
				return default (Boolean);
			}
		}
        internal void SetRequestLine( string req ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetRequestLine), typeof(String) );
		}
        internal void FinishInitialization() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FinishInitialization) );
		}
        internal static string Unquote( string str ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Unquote), typeof(String) );
            return default( string );

		}
        internal void AddHeader( string header ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddHeader), typeof(String) );
		}
        internal bool FlushInput() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FlushInput) );
            return default( bool );

		}
        public System.IAsyncResult BeginGetClientCertificate( System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetClientCertificate), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetClientCertificate), typeof(IAsyncResult) );
            return default( System.Security.Cryptography.X509Certificates.X509Certificate2 );

		}
        public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetClientCertificate) );
            return default( System.Security.Cryptography.X509Certificates.X509Certificate2 );

		}
        public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetClientCertificateAsync) );
            return default( System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> );

		}
    }
}