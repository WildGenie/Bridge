// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Net;
using System;
using System.Net.Sockets;

namespace System.Net {
    public class IPAddress {

        internal const int IPv4AddressBytes = 4;

        internal const int IPv6AddressBytes = 16;

        internal const int NumberOfLabels = 8;

        public long Address { get; set; }
        public System.Net.Sockets.AddressFamily AddressFamily {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddressFamily));
				return default (AddressFamily);
			}
		}
        public long ScopeId { get; set; }
        internal bool IsBroadcast {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsBroadcast));
				return default (Boolean);
			}
		}
        public bool IsIPv6Multicast {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsIPv6Multicast));
				return default (Boolean);
			}
		}
        public bool IsIPv6LinkLocal {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsIPv6LinkLocal));
				return default (Boolean);
			}
		}
        public bool IsIPv6SiteLocal {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsIPv6SiteLocal));
				return default (Boolean);
			}
		}
        public bool IsIPv6Teredo {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsIPv6Teredo));
				return default (Boolean);
			}
		}
        public bool IsIPv4MappedToIPv6 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsIPv4MappedToIPv6));
				return default (Boolean);
			}
		}
        public IPAddress( long newAddress )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IPAddress), typeof(Int64));
            }
        public IPAddress( byte[] address, long scopeid )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IPAddress), typeof(Byte[]), typeof(Int64));
            }
        public IPAddress( byte[] address )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IPAddress), typeof(Byte[]));
            }
        public static bool TryParse( string ipString, out System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryParse), typeof(String), typeof(IPAddress) );
            address = default( System.Net.IPAddress );

            return default( bool );

		}
        public static System.Net.IPAddress Parse( string ipString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Parse), typeof(String) );
            return default( System.Net.IPAddress );

		}
        public byte[][] GetAddressBytes() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAddressBytes) );
            return default( byte[][] );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        public static long HostToNetworkOrder( long host ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HostToNetworkOrder), typeof(Int64) );
            return default( long );

		}
        public static int HostToNetworkOrder( int host ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HostToNetworkOrder), typeof(Int32) );
            return default( int );

		}
        public static System.Int16 HostToNetworkOrder( System.Int16 host ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HostToNetworkOrder), typeof(Int16) );
            return default( System.Int16 );

		}
        public static long NetworkToHostOrder( long network ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NetworkToHostOrder), typeof(Int64) );
            return default( long );

		}
        public static int NetworkToHostOrder( int network ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NetworkToHostOrder), typeof(Int32) );
            return default( int );

		}
        public static System.Int16 NetworkToHostOrder( System.Int16 network ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NetworkToHostOrder), typeof(Int16) );
            return default( System.Int16 );

		}
        public static bool IsLoopback( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLoopback), typeof(IPAddress) );
            return default( bool );

		}
        internal bool Equals( System.Object comparandObj, bool compareScopeId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object), typeof(Boolean) );
            return default( bool );

		}
        public override bool Equals( System.Object comparand ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}
        internal System.Net.IPAddress Snapshot() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Snapshot) );
            return default( System.Net.IPAddress );

		}
        public System.Net.IPAddress MapToIPv6() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MapToIPv6) );
            return default( System.Net.IPAddress );

		}
        public System.Net.IPAddress MapToIPv4() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MapToIPv4) );
            return default( System.Net.IPAddress );

		}
    }
}