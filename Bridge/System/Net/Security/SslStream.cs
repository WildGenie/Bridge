// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography.X509Certificates;
using System.Security.Authentication;
using System.Net;
using System.Threading.Tasks;
using System.IO;
using System.Threading;
using System.Security;
using System.Security.Cryptography;

namespace System.Net.Security {
    public class SslStream: System.Net.Security.AuthenticatedStream {

        public System.Net.TransportContext TransportContext {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TransportContext));
				return default (TransportContext);
			}
		}
        public override bool IsAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAuthenticated));
				return default (Boolean);
			}
		}
        public override bool IsMutuallyAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsMutuallyAuthenticated));
				return default (Boolean);
			}
		}
        public override bool IsEncrypted {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEncrypted));
				return default (Boolean);
			}
		}
        public override bool IsSigned {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSigned));
				return default (Boolean);
			}
		}
        public override bool IsServer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsServer));
				return default (Boolean);
			}
		}
        public virtual System.Security.Authentication.SslProtocols SslProtocol {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslProtocol));
				return default (SslProtocols);
			}
		}
        public virtual bool CheckCertRevocationStatus {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckCertRevocationStatus));
				return default (Boolean);
			}
		}
        public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LocalCertificate));
				return default (X509Certificate);
			}
		}
        public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoteCertificate));
				return default (X509Certificate);
			}
		}
        public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CipherAlgorithm));
				return default (CipherAlgorithmType);
			}
		}
        public virtual int CipherStrength {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CipherStrength));
				return default (Int32);
			}
		}
        public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashAlgorithm));
				return default (HashAlgorithmType);
			}
		}
        public virtual int HashStrength {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HashStrength));
				return default (Int32);
			}
		}
        public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeAlgorithm));
				return default (ExchangeAlgorithmType);
			}
		}
        public virtual int KeyExchangeStrength {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(KeyExchangeStrength));
				return default (Int32);
			}
		}
        public override bool CanSeek {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanSeek));
				return default (Boolean);
			}
		}
        public override bool CanRead {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanRead));
				return default (Boolean);
			}
		}
        public override bool CanTimeout {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanTimeout));
				return default (Boolean);
			}
		}
        public override bool CanWrite {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanWrite));
				return default (Boolean);
			}
		}
        public override int ReadTimeout { get; set; }
        public override int WriteTimeout { get; set; }
        public override long Length {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Length));
				return default (Int64);
			}
		}
        public override long Position { get; set; }
        public SslStream( System.IO.Stream innerStream )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslStream), typeof(Stream));
            }
        public SslStream( System.IO.Stream innerStream, bool leaveInnerStreamOpen )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslStream), typeof(Stream), typeof(Boolean));
            }
        public SslStream( System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslStream), typeof(Stream), typeof(Boolean), typeof(RemoteCertificateValidationCallback));
            }
        public SslStream( System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslStream), typeof(Stream), typeof(Boolean), typeof(RemoteCertificateValidationCallback), typeof(LocalCertificateSelectionCallback));
            }
        public SslStream( System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SslStream), typeof(Stream), typeof(Boolean), typeof(RemoteCertificateValidationCallback), typeof(LocalCertificateSelectionCallback), typeof(EncryptionPolicy));
            }
        public virtual void AuthenticateAsClient( string targetHost ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClient), typeof(String) );
		}
        public virtual void AuthenticateAsClient( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClient), typeof(String), typeof(X509CertificateCollection), typeof(SslProtocols), typeof(Boolean) );
		}
        public virtual System.IAsyncResult BeginAuthenticateAsClient( string targetHost, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsClient), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public virtual System.IAsyncResult BeginAuthenticateAsClient( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsClient), typeof(String), typeof(X509CertificateCollection), typeof(SslProtocols), typeof(Boolean), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public virtual void EndAuthenticateAsClient( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAuthenticateAsClient), typeof(IAsyncResult) );
		}
        public virtual void AuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServer), typeof(X509Certificate) );
		}
        public virtual void AuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServer), typeof(X509Certificate), typeof(Boolean), typeof(SslProtocols), typeof(Boolean) );
		}
        public virtual System.IAsyncResult BeginAuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsServer), typeof(X509Certificate), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public virtual System.IAsyncResult BeginAuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsServer), typeof(X509Certificate), typeof(Boolean), typeof(SslProtocols), typeof(Boolean), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public virtual void EndAuthenticateAsServer( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAuthenticateAsServer), typeof(IAsyncResult) );
		}
        public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync( string targetHost ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClientAsync), typeof(String) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClientAsync), typeof(String), typeof(X509CertificateCollection), typeof(SslProtocols), typeof(Boolean) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServerAsync), typeof(X509Certificate) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServerAsync), typeof(X509Certificate), typeof(Boolean), typeof(SslProtocols), typeof(Boolean) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual System.Threading.Tasks.Task ShutdownAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ShutdownAsync) );
            return default( System.Threading.Tasks.Task );

		}
        public override void SetLength( long value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetLength), typeof(Int64) );
		}
        public override long Seek( long offset, System.IO.SeekOrigin origin ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Seek), typeof(Int64), typeof(SeekOrigin) );
            return default( long );

		}
        public System.Threading.Tasks.Task FlushAsync( System.Threading.CancellationToken cancellationToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FlushAsync), typeof(CancellationToken) );
            return default( System.Threading.Tasks.Task );

		}
        public override void Flush() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Flush) );
		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public override int Read( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Read), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public void Write( byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Byte[]) );
		}
        public override void Write( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Write), typeof(Byte[]), typeof(Int32), typeof(Int32) );
		}
        public override System.IAsyncResult BeginRead( byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginRead), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public override int EndRead( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndRead), typeof(IAsyncResult) );
            return default( int );

		}
        public override System.IAsyncResult BeginWrite( byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginWrite), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public override void EndWrite( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndWrite), typeof(IAsyncResult) );
		}
        public virtual void AuthenticateAsClient( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClient), typeof(String), typeof(X509CertificateCollection), typeof(Boolean) );
		}
        public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsClientAsync), typeof(String), typeof(X509CertificateCollection), typeof(Boolean) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual void AuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServer), typeof(X509Certificate), typeof(Boolean), typeof(Boolean) );
		}
        public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AuthenticateAsServerAsync), typeof(X509Certificate), typeof(Boolean), typeof(Boolean) );
            return default( System.Threading.Tasks.Task );

		}
        public virtual System.IAsyncResult BeginAuthenticateAsClient( string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, bool checkCertificateRevocation, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsClient), typeof(String), typeof(X509CertificateCollection), typeof(Boolean), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public virtual System.IAsyncResult BeginAuthenticateAsServer( System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation, System.AsyncCallback asyncCallback, System.Object asyncState ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAuthenticateAsServer), typeof(X509Certificate), typeof(Boolean), typeof(Boolean), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
    }
}