// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections.Specialized;
using System.Net;
using System;
using System.Net.Configuration;
using System.Net.Security;

namespace System.Net {
    public class ServicePointManager {

        internal const int DefaultNonPersistentConnectionLimit = 4;

        internal const int DefaultPersistentConnectionLimit = 2;

        public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
        public static bool CheckCertificateRevocationList { get; set; }
        public static int DefaultConnectionLimit { get; set; }
        public static int DnsRefreshTimeout { get; set; }
        public static bool EnableDnsRoundRobin { get; set; }
        public static int MaxServicePointIdleTime { get; set; }
        public static int MaxServicePoints { get; set; }
        public static bool ReusePort { get; set; }
        public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
        public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
        public static System.Net.Security.EncryptionPolicy EncryptionPolicy {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EncryptionPolicy));
				return default (EncryptionPolicy);
			}
		}
        public static bool Expect100Continue { get; set; }
        public static bool UseNagleAlgorithm { get; set; }
        internal static bool DisableStrongCrypto {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DisableStrongCrypto));
				return default (Boolean);
			}
		}
        internal static bool DisableSendAuxRecord {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DisableSendAuxRecord));
				return default (Boolean);
			}
		}
        internal static System.Net.ICertificatePolicy GetLegacyCertificatePolicy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLegacyCertificatePolicy) );
            return default( System.Net.ICertificatePolicy );

		}
        public static void SetTcpKeepAlive( bool enabled, int keepAliveTime, int keepAliveInterval ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetTcpKeepAlive), typeof(Boolean), typeof(Int32), typeof(Int32) );
		}
        public static System.Net.ServicePoint FindServicePoint( System.Uri address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindServicePoint), typeof(Uri) );
            return default( System.Net.ServicePoint );

		}
        public static System.Net.ServicePoint FindServicePoint( string uriString, System.Net.IWebProxy proxy ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindServicePoint), typeof(String), typeof(IWebProxy) );
            return default( System.Net.ServicePoint );

		}
        public static System.Net.ServicePoint FindServicePoint( System.Uri address, System.Net.IWebProxy proxy ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindServicePoint), typeof(Uri), typeof(IWebProxy) );
            return default( System.Net.ServicePoint );

		}
        internal static void CloseConnectionGroup( string connectionGroupName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CloseConnectionGroup), typeof(String) );
		}
    }
}