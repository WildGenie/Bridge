// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Net;
using System.Threading.Tasks;
using System.Runtime.Serialization;

namespace System.Net {
    public static class Dns {

        internal static bool UseMonoDns {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UseMonoDns));
				return default (Boolean);
			}
		}
        public static System.IAsyncResult BeginGetHostByName( string hostName, System.AsyncCallback requestCallback, System.Object stateObject ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetHostByName), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public static System.IAsyncResult BeginResolve( string hostName, System.AsyncCallback requestCallback, System.Object stateObject ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginResolve), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public static System.IAsyncResult BeginGetHostAddresses( string hostNameOrAddress, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetHostAddresses), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public static System.IAsyncResult BeginGetHostEntry( string hostNameOrAddress, System.AsyncCallback requestCallback, System.Object stateObject ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetHostEntry), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public static System.IAsyncResult BeginGetHostEntry( System.Net.IPAddress address, System.AsyncCallback requestCallback, System.Object stateObject ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetHostEntry), typeof(IPAddress), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public static System.Net.IPHostEntry EndGetHostByName( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetHostByName), typeof(IAsyncResult) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPHostEntry EndResolve( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndResolve), typeof(IAsyncResult) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPAddress[][] EndGetHostAddresses( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetHostAddresses), typeof(IAsyncResult) );
            return default( System.Net.IPAddress[][] );

		}
        public static System.Net.IPHostEntry EndGetHostEntry( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetHostEntry), typeof(IAsyncResult) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPHostEntry GetHostByAddress( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostByAddress), typeof(IPAddress) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPHostEntry GetHostByAddress( string address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostByAddress), typeof(String) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPHostEntry GetHostEntry( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEntry), typeof(String) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPHostEntry GetHostEntry( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEntry), typeof(IPAddress) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Net.IPAddress[][] GetHostAddresses( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostAddresses), typeof(String) );
            return default( System.Net.IPAddress[][] );

		}
        public static System.Net.IPHostEntry GetHostByName( string hostName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostByName), typeof(String) );
            return default( System.Net.IPHostEntry );

		}
        public static string GetHostName() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostName) );
            return default( string );

		}
        public static System.Net.IPHostEntry Resolve( string hostName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Resolve), typeof(String) );
            return default( System.Net.IPHostEntry );

		}
        public static System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostAddressesAsync), typeof(String) );
            return default( System.Threading.Tasks.Task<System.Net.IPAddress[]> );

		}
        public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEntryAsync), typeof(IPAddress) );
            return default( System.Threading.Tasks.Task<System.Net.IPHostEntry> );

		}
        public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHostEntryAsync), typeof(String) );
            return default( System.Threading.Tasks.Task<System.Net.IPHostEntry> );

		}
    }
}