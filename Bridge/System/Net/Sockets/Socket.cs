// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Net.Sockets;
using System.Net;
using System.Threading;
using System.Collections.Generic;
using System.Collections;
using System.Runtime.Serialization;

namespace System.Net.Sockets {
    public class Socket: System.IDisposable {

        public static bool SupportsIPv4 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsIPv4));
				return default (Boolean);
			}
		}
        public static bool OSSupportsIPv4 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OSSupportsIPv4));
				return default (Boolean);
			}
		}
        public static bool SupportsIPv6 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsIPv6));
				return default (Boolean);
			}
		}
        internal static bool LegacySupportsIPv6 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LegacySupportsIPv6));
				return default (Boolean);
			}
		}
        public static bool OSSupportsIPv6 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OSSupportsIPv6));
				return default (Boolean);
			}
		}
        public System.IntPtr Handle {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Handle));
				return default (IntPtr);
			}
		}
        public bool UseOnlyOverlappedIO { get; set; }
        public System.Net.Sockets.AddressFamily AddressFamily {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddressFamily));
				return default (AddressFamily);
			}
		}
        public System.Net.Sockets.SocketType SocketType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SocketType));
				return default (SocketType);
			}
		}
        public System.Net.Sockets.ProtocolType ProtocolType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProtocolType));
				return default (ProtocolType);
			}
		}
        public bool ExclusiveAddressUse { get; set; }
        public int ReceiveBufferSize { get; set; }
        public int SendBufferSize { get; set; }
        public int ReceiveTimeout { get; set; }
        public int SendTimeout { get; set; }
        public System.Net.Sockets.LingerOption LingerState { get; set; }
        public System.Int16 Ttl { get; set; }
        public bool DontFragment { get; set; }
        public bool DualMode { get; set; }
        internal bool IsDualMode {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDualMode));
				return default (Boolean);
			}
		}
        internal static System.Object InternalSyncObject {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalSyncObject));
				return default (Object);
			}
		}
        internal bool CleanedUp {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CleanedUp));
				return default (Boolean);
			}
		}
        public int Available {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Available));
				return default (Int32);
			}
		}
        public bool EnableBroadcast { get; set; }
        public bool IsBound {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsBound));
				return default (Boolean);
			}
		}
        public bool MulticastLoopback { get; set; }
        public System.Net.EndPoint LocalEndPoint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LocalEndPoint));
				return default (EndPoint);
			}
		}
        public bool Blocking { get; set; }
        public bool Connected {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connected));
				return default (Boolean);
			}
		}
        public bool NoDelay { get; set; }
        public System.Net.EndPoint RemoteEndPoint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoteEndPoint));
				return default (EndPoint);
			}
		}
        internal static int FamilyHint {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FamilyHint));
				return default (Int32);
			}
		}
        public Socket( System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Socket), typeof(SocketType), typeof(ProtocolType));
            }
        public Socket( System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Socket), typeof(AddressFamily), typeof(SocketType), typeof(ProtocolType));
            }
        public Socket( System.Net.Sockets.SocketInformation socketInformation )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Socket), typeof(SocketInformation));
            }
        internal bool CanTryAddressFamily( System.Net.Sockets.AddressFamily family ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CanTryAddressFamily), typeof(AddressFamily) );
            return default( bool );

		}
        public void Connect( System.Net.IPAddress[] addresses, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(IPAddress[]), typeof(Int32) );
		}
        public int Send( byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32), typeof(SocketFlags) );
            return default( int );

		}
        public int Send( byte[] buffer, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(SocketFlags) );
            return default( int );

		}
        public int Send( byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]) );
            return default( int );

		}
        public int Send( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IList<byte>) );
            return default( int );

		}
        public int Send( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IList<byte>), typeof(SocketFlags) );
            return default( int );

		}
        public void SendFile( string fileName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendFile), typeof(String) );
		}
        public int Send( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags) );
            return default( int );

		}
        public int SendTo( byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendTo), typeof(Byte[]), typeof(Int32), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        public int SendTo( byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendTo), typeof(Byte[]), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        public int SendTo( byte[] buffer, System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendTo), typeof(Byte[]), typeof(EndPoint) );
            return default( int );

		}
        public int Receive( byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(Byte[]), typeof(Int32), typeof(SocketFlags) );
            return default( int );

		}
        public int Receive( byte[] buffer, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(Byte[]), typeof(SocketFlags) );
            return default( int );

		}
        public int Receive( byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(Byte[]) );
            return default( int );

		}
        public int Receive( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags) );
            return default( int );

		}
        public int Receive( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(IList<byte>) );
            return default( int );

		}
        public int Receive( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(IList<byte>), typeof(SocketFlags) );
            return default( int );

		}
        public int ReceiveFrom( byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFrom), typeof(Byte[]), typeof(Int32), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        public int ReceiveFrom( byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFrom), typeof(Byte[]), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        public int ReceiveFrom( byte[] buffer, ref System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFrom), typeof(Byte[]), typeof(EndPoint) );
            return default( int );

		}
        public int IOControl( System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IOControl), typeof(IOControlCode), typeof(Byte[]), typeof(Byte[]) );
            return default( int );

		}
        public void SetIPProtectionLevel( System.Net.Sockets.IPProtectionLevel level ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetIPProtectionLevel), typeof(IPProtectionLevel) );
		}
        public System.IAsyncResult BeginSendFile( string fileName, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSendFile), typeof(String), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginConnect( System.Net.IPAddress address, int port, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginConnect), typeof(IPAddress), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginSend( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginSend( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(IList<byte>), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndSend( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndSend), typeof(IAsyncResult) );
            return default( int );

		}
        public System.IAsyncResult BeginReceive( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceive), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginReceive( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceive), typeof(IList<byte>), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndReceive( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndReceive), typeof(IAsyncResult) );
            return default( int );

		}
        public System.IAsyncResult BeginAccept( int receiveSize, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAccept), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.Net.Sockets.Socket EndAccept( out byte[] buffer, System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAccept), typeof(Byte[]), typeof(IAsyncResult) );
            buffer = default( byte[] );

            return default( System.Net.Sockets.Socket );

		}
        internal static void InitializeSockets() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InitializeSockets) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        public static bool ConnectAsync( System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectAsync), typeof(SocketType), typeof(ProtocolType), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        internal void InternalShutdown( System.Net.Sockets.SocketShutdown how ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalShutdown), typeof(SocketShutdown) );
		}
        internal System.IAsyncResult UnsafeBeginConnect( System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnsafeBeginConnect), typeof(EndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        internal System.IAsyncResult UnsafeBeginSend( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnsafeBeginSend), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        internal System.IAsyncResult UnsafeBeginReceive( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnsafeBeginReceive), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        internal int EndMultipleSend( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndMultipleSend), typeof(IAsyncResult) );
            return default( int );

		}
        internal void SetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue, bool silent ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Int32), typeof(Boolean) );
		}
        internal static void Blocking_internal( System.IntPtr socket, bool block, out System.Int32 error ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Blocking_internal), typeof(IntPtr), typeof(Boolean), typeof(Int32) );
            error = default( System.Int32 );

		}
        public static void Select( System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Select), typeof(IList), typeof(IList), typeof(IList), typeof(Int32) );
		}
        public bool Poll( int microSeconds, System.Net.Sockets.SelectMode mode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Poll), typeof(Int32), typeof(SelectMode) );
            return default( bool );

		}
        public System.Net.Sockets.Socket Accept() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Accept) );
            return default( System.Net.Sockets.Socket );

		}
        internal void Accept( System.Net.Sockets.Socket acceptSocket ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Accept), typeof(Socket) );
		}
        public bool AcceptAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginAccept( System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAccept), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginAccept( System.Net.Sockets.Socket acceptSocket, int receiveSize, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAccept), typeof(Socket), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.Net.Sockets.Socket EndAccept( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAccept), typeof(IAsyncResult) );
            return default( System.Net.Sockets.Socket );

		}
        public System.Net.Sockets.Socket EndAccept( out byte[] buffer, out System.Int32 bytesTransferred, System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAccept), typeof(Byte[]), typeof(Int32), typeof(IAsyncResult) );
            buffer = default( byte[] ); bytesTransferred = default( System.Int32 );

            return default( System.Net.Sockets.Socket );

		}
        public void Bind( System.Net.EndPoint localEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Bind), typeof(EndPoint) );
		}
        public void Listen( int backlog ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Listen), typeof(Int32) );
		}
        public void Connect( System.Net.IPAddress address, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(IPAddress), typeof(Int32) );
		}
        public void Connect( string host, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(String), typeof(Int32) );
		}
        public void Connect( System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(EndPoint) );
		}
        public bool ConnectAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public static void CancelConnectAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CancelConnectAsync), typeof(SocketAsyncEventArgs) );
		}
        public System.IAsyncResult BeginConnect( string host, int port, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginConnect), typeof(String), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginConnect( System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginConnect), typeof(EndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginConnect( System.Net.IPAddress[] addresses, int port, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginConnect), typeof(IPAddress[]), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public void EndConnect( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndConnect), typeof(IAsyncResult) );
		}
        public void Disconnect( bool reuseSocket ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Disconnect), typeof(Boolean) );
		}
        public bool DisconnectAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DisconnectAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginDisconnect( bool reuseSocket, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginDisconnect), typeof(Boolean), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public void EndDisconnect( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndDisconnect), typeof(IAsyncResult) );
		}
        public int Receive( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public int Receive( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(IList<byte>), typeof(SocketFlags), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public bool ReceiveAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginReceive( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceive), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(SocketError), typeof(AsyncCallback), typeof(Object) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginReceive( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceive), typeof(IList<byte>), typeof(SocketFlags), typeof(SocketError), typeof(AsyncCallback), typeof(Object) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( System.IAsyncResult );

		}
        public int EndReceive( System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndReceive), typeof(IAsyncResult), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public int ReceiveFrom( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFrom), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        internal int ReceiveFrom( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFrom), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public bool ReceiveFromAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveFromAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginReceiveFrom( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceiveFrom), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndReceiveFrom( System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndReceiveFrom), typeof(IAsyncResult), typeof(EndPoint) );
            return default( int );

		}
        public int ReceiveMessageFrom( byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveMessageFrom), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint), typeof(IPPacketInformation) );
            ipPacketInformation = default( System.Net.Sockets.IPPacketInformation );

            return default( int );

		}
        public bool ReceiveMessageFromAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveMessageFromAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginReceiveMessageFrom( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceiveMessageFrom), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndReceiveMessageFrom( System.IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndReceiveMessageFrom), typeof(IAsyncResult), typeof(SocketFlags), typeof(EndPoint), typeof(IPPacketInformation) );
            ipPacketInformation = default( System.Net.Sockets.IPPacketInformation );

            return default( int );

		}
        public int Send( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public int Send( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IList<byte>), typeof(SocketFlags), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public bool SendAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginSend( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(SocketError), typeof(AsyncCallback), typeof(Object) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginSend( System.Collections.Generic.IList<System.ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(IList<byte>), typeof(SocketFlags), typeof(SocketError), typeof(AsyncCallback), typeof(Object) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( System.IAsyncResult );

		}
        public int EndSend( System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndSend), typeof(IAsyncResult), typeof(SocketError) );
            errorCode = default( System.Net.Sockets.SocketError );

            return default( int );

		}
        public int SendTo( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendTo), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint) );
            return default( int );

		}
        public bool SendToAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendToAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.IAsyncResult BeginSendTo( byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSendTo), typeof(Byte[]), typeof(Int32), typeof(Int32), typeof(SocketFlags), typeof(EndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndSendTo( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndSendTo), typeof(IAsyncResult) );
            return default( int );

		}
        public void SendFile( string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendFile), typeof(String), typeof(Byte[]), typeof(Byte[]), typeof(TransmitFileOptions) );
		}
        public System.IAsyncResult BeginSendFile( string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSendFile), typeof(String), typeof(Byte[]), typeof(Byte[]), typeof(TransmitFileOptions), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public void EndSendFile( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndSendFile), typeof(IAsyncResult) );
		}
        public bool SendPacketsAsync( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPacketsAsync), typeof(SocketAsyncEventArgs) );
            return default( bool );

		}
        public System.Net.Sockets.SocketInformation DuplicateAndClose( int targetProcessId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DuplicateAndClose), typeof(Int32) );
            return default( System.Net.Sockets.SocketInformation );

		}
        public void GetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Byte[]) );
		}
        public byte[][] GetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Int32) );
            return default( byte[][] );

		}
        public System.Object GetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName) );
            return default( System.Object );

		}
        public void SetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Byte[]) );
		}
        public void SetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Object optionValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Object) );
		}
        public void SetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Boolean) );
		}
        public void SetSocketOption( System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetSocketOption), typeof(SocketOptionLevel), typeof(SocketOptionName), typeof(Int32) );
		}
        public int IOControl( int ioControlCode, byte[] optionInValue, byte[] optionOutValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IOControl), typeof(Int32), typeof(Byte[]), typeof(Byte[]) );
            return default( int );

		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public void Close( int timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close), typeof(Int32) );
		}
        internal static void Close_internal( System.IntPtr socket, out System.Int32 error ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close_internal), typeof(IntPtr), typeof(Int32) );
            error = default( System.Int32 );

		}
        public void Shutdown( System.Net.Sockets.SocketShutdown how ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Shutdown), typeof(SocketShutdown) );
		}
        internal static void Shutdown_internal( System.IntPtr socket, System.Net.Sockets.SocketShutdown how, out System.Int32 error ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Shutdown_internal), typeof(IntPtr), typeof(SocketShutdown), typeof(Int32) );
            error = default( System.Int32 );

		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        internal static void cancel_blocking_socket_operation( System.Threading.Thread thread ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(cancel_blocking_socket_operation), typeof(Thread) );
		}
        internal static bool SupportsPortReuse( System.Net.Sockets.ProtocolType proto ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsPortReuse), typeof(ProtocolType) );
            return default( bool );

		}
    }
}