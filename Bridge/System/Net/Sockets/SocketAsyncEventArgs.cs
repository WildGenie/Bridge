// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Net;
using System.Net.Sockets;
using System.Collections.Generic;
using System.Collections;

namespace System.Net.Sockets {
    public class SocketAsyncEventArgs: System.EventArgs, System.IDisposable {

        public System.Exception ConnectByNameError {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectByNameError));
				return default (Exception);
			}
		}
        public System.Net.Sockets.Socket AcceptSocket { get; set; }
        public byte[][] Buffer {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Buffer));
				return default (Byte[][]);
			}
		}
        public System.Collections.Generic.IList<System.ArraySegment<byte>> BufferList { get; set; }
        public int BytesTransferred {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BytesTransferred));
				return default (Int32);
			}
		}
        public int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public bool DisconnectReuseSocket { get; set; }
        public System.Net.Sockets.SocketAsyncOperation LastOperation {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastOperation));
				return default (SocketAsyncOperation);
			}
		}
        public int Offset {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Offset));
				return default (Int32);
			}
		}
        public System.Net.EndPoint RemoteEndPoint { get; set; }
        public System.Net.Sockets.IPPacketInformation ReceiveMessageFromPacketInfo {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveMessageFromPacketInfo));
				return default (IPPacketInformation);
			}
		}
        public System.Net.Sockets.SendPacketsElement[][] SendPacketsElements { get; set; }
        public System.Net.Sockets.TransmitFileOptions SendPacketsFlags { get; set; }
        public int SendPacketsSendSize { get; set; }
        public System.Net.Sockets.SocketError SocketError { get; set; }
        public System.Net.Sockets.SocketFlags SocketFlags { get; set; }
        public System.Object UserToken { get; set; }
        public System.Net.Sockets.Socket ConnectSocket {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectSocket));
				return default (Socket);
			}
		}
        internal bool PolicyRestricted {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(PolicyRestricted));
				return default (Boolean);
			}
		}
        public System.Net.Sockets.SocketClientAccessPolicyProtocol SocketClientAccessPolicyProtocol { get; set; }
        #pragma warning disable 67
        public event System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs> Completed;
        #pragma warning disable 67

        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        internal void SetLastOperation( System.Net.Sockets.SocketAsyncOperation op ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetLastOperation), typeof(SocketAsyncOperation) );
		}
        internal void Complete() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Complete) );
		}
        protected virtual void OnCompleted( System.Net.Sockets.SocketAsyncEventArgs e ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnCompleted), typeof(SocketAsyncEventArgs) );
		}
        public void SetBuffer( int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetBuffer), typeof(Int32), typeof(Int32) );
		}
        public void SetBuffer( byte[] buffer, int offset, int count ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetBuffer), typeof(Byte[]), typeof(Int32), typeof(Int32) );
		}
        internal void StartOperationCommon( System.Net.Sockets.Socket socket ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StartOperationCommon), typeof(Socket) );
		}
        internal void FinishConnectByNameSyncFailure( System.Exception exception, int bytesTransferred, System.Net.Sockets.SocketFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FinishConnectByNameSyncFailure), typeof(Exception), typeof(Int32), typeof(SocketFlags) );
		}
        internal void FinishOperationAsyncFailure( System.Exception exception, int bytesTransferred, System.Net.Sockets.SocketFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FinishOperationAsyncFailure), typeof(Exception), typeof(Int32), typeof(SocketFlags) );
		}
        internal void FinishWrapperConnectSuccess( System.Net.Sockets.Socket connectSocket, int bytesTransferred, System.Net.Sockets.SocketFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FinishWrapperConnectSuccess), typeof(Socket), typeof(Int32), typeof(SocketFlags) );
		}
        internal void SetResults( System.Net.Sockets.SocketError socketError, int bytesTransferred, System.Net.Sockets.SocketFlags flags ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetResults), typeof(SocketError), typeof(Int32), typeof(SocketFlags) );
		}
        void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
    }
}