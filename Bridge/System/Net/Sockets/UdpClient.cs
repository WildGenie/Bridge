// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Net.Sockets;
using System.Net;
using System.Threading.Tasks;

namespace System.Net.Sockets {
    public class UdpClient: System.IDisposable {

        public System.Net.Sockets.Socket Client { get; set; }
        internal bool Active {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Active));
				return default (Boolean);
			}
		}
        public int Available {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Available));
				return default (Int32);
			}
		}
        public System.Int16 Ttl { get; set; }
        public bool DontFragment { get; set; }
        public bool MulticastLoopback { get; set; }
        public bool EnableBroadcast { get; set; }
        public bool ExclusiveAddressUse { get; set; }
        public UdpClient(  )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient));
            }
        public UdpClient( System.Net.Sockets.AddressFamily family )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient), typeof(AddressFamily));
            }
        public UdpClient( int port )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient), typeof(Int32));
            }
        public UdpClient( int port, System.Net.Sockets.AddressFamily family )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient), typeof(Int32), typeof(AddressFamily));
            }
        public UdpClient( System.Net.IPEndPoint localEP )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient), typeof(IPEndPoint));
            }
        public UdpClient( string hostname, int port )  {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UdpClient), typeof(String), typeof(Int32));
            }
        public void AllowNatTraversal( bool allowed ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowNatTraversal), typeof(Boolean) );
		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public void Connect( string hostname, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(String), typeof(Int32) );
		}
        public void Connect( System.Net.IPAddress addr, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(IPAddress), typeof(Int32) );
		}
        public void Connect( System.Net.IPEndPoint endPoint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Connect), typeof(IPEndPoint) );
		}
        public int Send( byte[] dgram, int bytes, System.Net.IPEndPoint endPoint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32), typeof(IPEndPoint) );
            return default( int );

		}
        public int Send( byte[] dgram, int bytes, string hostname, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32), typeof(String), typeof(Int32) );
            return default( int );

		}
        public int Send( byte[] dgram, int bytes ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(Byte[]), typeof(Int32) );
            return default( int );

		}
        public System.IAsyncResult BeginSend( byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(Byte[]), typeof(Int32), typeof(IPEndPoint), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginSend( byte[] datagram, int bytes, string hostname, int port, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(Byte[]), typeof(Int32), typeof(String), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.IAsyncResult BeginSend( byte[] datagram, int bytes, System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginSend), typeof(Byte[]), typeof(Int32), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public int EndSend( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndSend), typeof(IAsyncResult) );
            return default( int );

		}
        public byte[][] Receive( ref System.Net.IPEndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Receive), typeof(IPEndPoint) );
            return default( byte[][] );

		}
        public System.IAsyncResult BeginReceive( System.AsyncCallback requestCallback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginReceive), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public byte[][] EndReceive( System.IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndReceive), typeof(IAsyncResult), typeof(IPEndPoint) );
            return default( byte[][] );

		}
        public void JoinMulticastGroup( System.Net.IPAddress multicastAddr ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(JoinMulticastGroup), typeof(IPAddress) );
		}
        public void JoinMulticastGroup( System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(JoinMulticastGroup), typeof(IPAddress), typeof(IPAddress) );
		}
        public void JoinMulticastGroup( int ifindex, System.Net.IPAddress multicastAddr ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(JoinMulticastGroup), typeof(Int32), typeof(IPAddress) );
		}
        public void JoinMulticastGroup( System.Net.IPAddress multicastAddr, int timeToLive ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(JoinMulticastGroup), typeof(IPAddress), typeof(Int32) );
		}
        public void DropMulticastGroup( System.Net.IPAddress multicastAddr ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DropMulticastGroup), typeof(IPAddress) );
		}
        public void DropMulticastGroup( System.Net.IPAddress multicastAddr, int ifindex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DropMulticastGroup), typeof(IPAddress), typeof(Int32) );
		}
        public System.Threading.Tasks.Task<int> SendAsync( byte[] datagram, int bytes ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(Byte[]), typeof(Int32) );
            return default( System.Threading.Tasks.Task<int> );

		}
        public System.Threading.Tasks.Task<int> SendAsync( byte[] datagram, int bytes, System.Net.IPEndPoint endPoint ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(Byte[]), typeof(Int32), typeof(IPEndPoint) );
            return default( System.Threading.Tasks.Task<int> );

		}
        public System.Threading.Tasks.Task<int> SendAsync( byte[] datagram, int bytes, string hostname, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(Byte[]), typeof(Int32), typeof(String), typeof(Int32) );
            return default( System.Threading.Tasks.Task<int> );

		}
        public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReceiveAsync) );
            return default( System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> );

		}
    }
}