// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Net;
using System.Net.Sockets;
using System;
using System.Threading.Tasks;

namespace System.Net.Sockets {
    public class TcpListener {

        public System.Net.Sockets.Socket Server { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Server));
				return default (Socket);
			}
		}
        internal bool Active { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Active));
				return default (Boolean);
			}
		}
        public System.Net.EndPoint LocalEndpoint { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LocalEndpoint));
				return default (EndPoint);
			}
		}
        public bool ExclusiveAddressUse { get; set; }
        public TcpListener( System.Net.IPEndPoint localEP )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TcpListener), typeof(IPEndPoint));
            }
        public TcpListener( System.Net.IPAddress localaddr, int port )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TcpListener), typeof(IPAddress), typeof(Int32));
            }
        public TcpListener( int port )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TcpListener), typeof(Int32));
            }
        public static System.Net.Sockets.TcpListener Create( int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Create), typeof(Int32) );
            return default( System.Net.Sockets.TcpListener );
        
		}
        public void AllowNatTraversal( bool allowed ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowNatTraversal), typeof(Boolean) ); 
		}
        public void Start() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start) ); 
		}
        public void Start( int backlog ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start), typeof(Int32) ); 
		}
        public void Stop() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stop) ); 
		}
        public bool Pending() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Pending) );
            return default( bool );
        
		}
        public System.Net.Sockets.Socket AcceptSocket() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptSocket) );
            return default( System.Net.Sockets.Socket );
        
		}
        public System.Net.Sockets.TcpClient AcceptTcpClient() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptTcpClient) );
            return default( System.Net.Sockets.TcpClient );
        
		}
        public System.IAsyncResult BeginAcceptSocket( System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAcceptSocket), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );
        
		}
        public System.Net.Sockets.Socket EndAcceptSocket( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAcceptSocket), typeof(IAsyncResult) );
            return default( System.Net.Sockets.Socket );
        
		}
        public System.IAsyncResult BeginAcceptTcpClient( System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginAcceptTcpClient), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );
        
		}
        public System.Net.Sockets.TcpClient EndAcceptTcpClient( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndAcceptTcpClient), typeof(IAsyncResult) );
            return default( System.Net.Sockets.TcpClient );
        
		}
        public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptSocketAsync) );
            return default( System.Threading.Tasks.Task<System.Net.Sockets.Socket> );
        
		}
        public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptTcpClientAsync) );
            return default( System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> );
        
		}
    }
}