// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.ComponentModel;
using System;
using System.Threading;
using System.Net.NetworkInformation;
using System.Net;
using System.Threading.Tasks;

namespace System.Net.NetworkInformation {
    public class Ping: System.ComponentModel.Component {

        #pragma warning disable 67
        public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;
        #pragma warning disable 67

        public System.Net.NetworkInformation.PingReply Send( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IPAddress) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( System.Net.IPAddress address, int timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IPAddress), typeof(Int32) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( System.Net.IPAddress address, int timeout, byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IPAddress), typeof(Int32), typeof(Byte[]) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(String) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( string hostNameOrAddress, int timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(String), typeof(Int32) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( string hostNameOrAddress, int timeout, byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(String), typeof(Int32), typeof(Byte[]) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(String), typeof(Int32), typeof(Byte[]), typeof(PingOptions) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public System.Net.NetworkInformation.PingReply Send( System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Send), typeof(IPAddress), typeof(Int32), typeof(Byte[]), typeof(PingOptions) );
            return default( System.Net.NetworkInformation.PingReply );

		}
        public void SendAsync( System.Net.IPAddress address, int timeout, byte[] buffer, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(IPAddress), typeof(Int32), typeof(Byte[]), typeof(Object) );
		}
        public void SendAsync( System.Net.IPAddress address, int timeout, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(IPAddress), typeof(Int32), typeof(Object) );
		}
        public void SendAsync( System.Net.IPAddress address, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(IPAddress), typeof(Object) );
		}
        public void SendAsync( string hostNameOrAddress, int timeout, byte[] buffer, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(String), typeof(Int32), typeof(Byte[]), typeof(Object) );
		}
        public void SendAsync( string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(String), typeof(Int32), typeof(Byte[]), typeof(PingOptions), typeof(Object) );
		}
        public void SendAsync( string hostNameOrAddress, int timeout, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(String), typeof(Int32), typeof(Object) );
		}
        public void SendAsync( string hostNameOrAddress, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(String), typeof(Object) );
		}
        public void SendAsync( System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, System.Object userToken ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsync), typeof(IPAddress), typeof(Int32), typeof(Byte[]), typeof(PingOptions), typeof(Object) );
		}
        public void SendAsyncCancel() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendAsyncCancel) );
		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( System.Net.IPAddress address, int timeout, byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(IPAddress), typeof(Int32), typeof(Byte[]) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( System.Net.IPAddress address, int timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(IPAddress), typeof(Int32) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( System.Net.IPAddress address ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(IPAddress) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( string hostNameOrAddress, int timeout, byte[] buffer ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(String), typeof(Int32), typeof(Byte[]) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(String), typeof(Int32), typeof(Byte[]), typeof(PingOptions) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( string hostNameOrAddress, int timeout ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(String), typeof(Int32) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( string hostNameOrAddress ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(String) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
        public System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> SendPingAsync( System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SendPingAsync), typeof(IPAddress), typeof(Int32), typeof(Byte[]), typeof(PingOptions) );
            return default( System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply> );

		}
    }
}