// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Net.NetworkInformation;
using System;
using System.Net;

namespace System.Net.NetworkInformation {
    public abstract class NetworkInterface {

        public static int LoopbackInterfaceIndex { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LoopbackInterfaceIndex));
				return default (Int32);
			}
		}
        public static int IPv6LoopbackInterfaceIndex { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IPv6LoopbackInterfaceIndex));
				return default (Int32);
			}
		}
        public virtual string Id { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Id));
				return default (String);
			}
		}
        public virtual string Name { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Name));
				return default (String);
			}
		}
        public virtual string Description { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Description));
				return default (String);
			}
		}
        public virtual System.Net.NetworkInformation.OperationalStatus OperationalStatus { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OperationalStatus));
				return default (OperationalStatus);
			}
		}
        public virtual long Speed { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Speed));
				return default (Int64);
			}
		}
        public virtual bool IsReceiveOnly { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsReceiveOnly));
				return default (Boolean);
			}
		}
        public virtual bool SupportsMulticast { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsMulticast));
				return default (Boolean);
			}
		}
        public virtual System.Net.NetworkInformation.NetworkInterfaceType NetworkInterfaceType { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(NetworkInterfaceType));
				return default (NetworkInterfaceType);
			}
		}
        public static System.Net.NetworkInformation.NetworkInterface[][] GetAllNetworkInterfaces() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAllNetworkInterfaces) );
            return default( System.Net.NetworkInformation.NetworkInterface[][] );
        
		}
        public static bool GetIsNetworkAvailable() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIsNetworkAvailable) );
            return default( bool );
        
		}
        public virtual System.Net.NetworkInformation.IPInterfaceProperties GetIPProperties() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIPProperties) );
            return default( System.Net.NetworkInformation.IPInterfaceProperties );
        
		}
        public virtual System.Net.NetworkInformation.IPv4InterfaceStatistics GetIPv4Statistics() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIPv4Statistics) );
            return default( System.Net.NetworkInformation.IPv4InterfaceStatistics );
        
		}
        public virtual System.Net.NetworkInformation.IPInterfaceStatistics GetIPStatistics() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetIPStatistics) );
            return default( System.Net.NetworkInformation.IPInterfaceStatistics );
        
		}
        public virtual System.Net.NetworkInformation.PhysicalAddress GetPhysicalAddress() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetPhysicalAddress) );
            return default( System.Net.NetworkInformation.PhysicalAddress );
        
		}
        public virtual bool Supports( System.Net.NetworkInformation.NetworkInterfaceComponent networkInterfaceComponent ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Supports), typeof(NetworkInterfaceComponent) );
            return default( bool );
        
		}
    }
}