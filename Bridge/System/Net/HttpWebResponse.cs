// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.Serialization;
using System.Net;
using System.IO;

namespace System.Net {
    public class HttpWebResponse: System.Net.WebResponse {

        public string CharacterSet {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CharacterSet));
				return default (String);
			}
		}
        public string ContentEncoding {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentEncoding));
				return default (String);
			}
		}
        public override long ContentLength {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentLength));
				return default (Int64);
			}
		}
        public override string ContentType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentType));
				return default (String);
			}
		}
        public virtual System.Net.CookieCollection Cookies { get; set; }
        public override System.Net.WebHeaderCollection Headers {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Headers));
				return default (WebHeaderCollection);
			}
		}
        public override bool IsMutuallyAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsMutuallyAuthenticated));
				return default (Boolean);
			}
		}
        public System.DateTime LastModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastModified));
				return default (DateTime);
			}
		}
        public virtual string Method {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Method));
				return default (String);
			}
		}
        public System.Version ProtocolVersion {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProtocolVersion));
				return default (Version);
			}
		}
        public override System.Uri ResponseUri {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResponseUri));
				return default (Uri);
			}
		}
        public string Server {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Server));
				return default (String);
			}
		}
        public virtual System.Net.HttpStatusCode StatusCode {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StatusCode));
				return default (HttpStatusCode);
			}
		}
        public virtual string StatusDescription {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StatusDescription));
				return default (String);
			}
		}
        public override bool SupportsHeaders {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsHeaders));
				return default (Boolean);
			}
		}
        public string GetResponseHeader( string headerName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetResponseHeader), typeof(String) );
            return default( string );

		}
        internal void ReadAll() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ReadAll) );
		}
        public override System.IO.Stream GetResponseStream() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetResponseStream) );
            return default( System.IO.Stream );

		}
        protected override void GetObjectData( System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public override void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        protected override void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
    }
}