// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Security.Cryptography.X509Certificates;
using System.Net;
using System.Collections;
using System.IO;
using System.Net.Security;
using System.Security.Authentication.ExtendedProtection;
using System.Threading.Tasks;
using System.Security.Authentication;
using System.Runtime.Serialization;

namespace System.Net {
    public class HttpListener: System.IDisposable {

        public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }
        public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }
        public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }
        public bool IgnoreWriteExceptions { get; set; }
        public bool IsListening {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsListening));
				return default (Boolean);
			}
		}
        public static bool IsSupported {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSupported));
				return default (Boolean);
			}
		}
        public System.Net.HttpListenerPrefixCollection Prefixes {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Prefixes));
				return default (HttpListenerPrefixCollection);
			}
		}
        public System.Net.HttpListenerTimeoutManager TimeoutManager {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TimeoutManager));
				return default (HttpListenerTimeoutManager);
			}
		}
        public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }
        public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DefaultServiceNames));
				return default (ServiceNameCollection);
			}
		}
        public string Realm { get; set; }
        public bool UnsafeConnectionNtlmAuthentication { get; set; }

        public delegate System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionSelector( System.Net.HttpListenerRequest request );
        internal System.Security.Cryptography.X509Certificates.X509Certificate LoadCertificateAndKey( System.Net.IPAddress addr, int port ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LoadCertificateAndKey), typeof(IPAddress), typeof(Int32) );
            return default( System.Security.Cryptography.X509Certificates.X509Certificate );

		}
        internal System.Net.Security.SslStream CreateSslStream( System.IO.Stream innerStream, bool ownsStream, System.Net.Security.RemoteCertificateValidationCallback callback ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateSslStream), typeof(Stream), typeof(Boolean), typeof(RemoteCertificateValidationCallback) );
            return default( System.Net.Security.SslStream );

		}
        public void Abort() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Abort) );
		}
        public void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public System.IAsyncResult BeginGetContext( System.AsyncCallback callback, System.Object state ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BeginGetContext), typeof(AsyncCallback), typeof(Object) );
            return default( System.IAsyncResult );

		}
        public System.Net.HttpListenerContext EndGetContext( System.IAsyncResult asyncResult ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EndGetContext), typeof(IAsyncResult) );
            return default( System.Net.HttpListenerContext );

		}
        internal System.Net.AuthenticationSchemes SelectAuthenticationScheme( System.Net.HttpListenerContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SelectAuthenticationScheme), typeof(HttpListenerContext) );
            return default( System.Net.AuthenticationSchemes );

		}
        public System.Net.HttpListenerContext GetContext() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetContext) );
            return default( System.Net.HttpListenerContext );

		}
        public void Start() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Start) );
		}
        public void Stop() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Stop) );
		}
        public System.Threading.Tasks.Task<System.Net.HttpListenerContext> GetContextAsync() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetContextAsync) );
            return default( System.Threading.Tasks.Task<System.Net.HttpListenerContext> );

		}
        internal void CheckDisposed() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckDisposed) );
		}
        internal void RegisterContext( System.Net.HttpListenerContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RegisterContext), typeof(HttpListenerContext) );
		}
        internal void UnregisterContext( System.Net.HttpListenerContext context ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UnregisterContext), typeof(HttpListenerContext) );
		}
        void @System.IDisposable.Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.IDisposable.Dispose) );
		}
    }
}