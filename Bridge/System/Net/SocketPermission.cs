// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Security;
using System.Security.Permissions;
using System.Collections;
using System;
using System.Net;

namespace System.Net {
    public class SocketPermission: System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission {

        internal const int AllPorts = -1;

        public System.Collections.IEnumerator AcceptList { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AcceptList));
				return default (IEnumerator);
			}
		}
        public System.Collections.IEnumerator ConnectList { 
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConnectList));
				return default (IEnumerator);
			}
		}
        public SocketPermission( System.Security.Permissions.PermissionState state )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SocketPermission), typeof(PermissionState));
            }
        public SocketPermission( System.Net.NetworkAccess access, System.Net.TransportType transport, string hostName, int portNumber )  { 
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SocketPermission), typeof(NetworkAccess), typeof(TransportType), typeof(String), typeof(Int32));
            }
        public void AddPermission( System.Net.NetworkAccess access, System.Net.TransportType transport, string hostName, int portNumber ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddPermission), typeof(NetworkAccess), typeof(TransportType), typeof(String), typeof(Int32) ); 
		}
        public override System.Security.IPermission Copy() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Copy) );
            return default( System.Security.IPermission );
        
		}
        public override System.Security.IPermission Intersect( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Intersect), typeof(IPermission) );
            return default( System.Security.IPermission );
        
		}
        public override bool IsSubsetOf( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSubsetOf), typeof(IPermission) );
            return default( bool );
        
		}
        public bool IsUnrestricted() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsUnrestricted) );
            return default( bool );
        
		}
        public override System.Security.SecurityElement ToXml() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXml) );
            return default( System.Security.SecurityElement );
        
		}
        public override void FromXml( System.Security.SecurityElement securityElement ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXml), typeof(SecurityElement) ); 
		}
        public override System.Security.IPermission Union( System.Security.IPermission target ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Union), typeof(IPermission) );
            return default( System.Security.IPermission );
        
		}
        void Intersect( System.Collections.ArrayList list1, System.Collections.ArrayList list2, System.Collections.ArrayList result ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Intersect), typeof(ArrayList), typeof(ArrayList), typeof(ArrayList) ); 
		}
        bool IsSubsetOf( System.Collections.ArrayList list1, System.Collections.ArrayList list2 ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsSubsetOf), typeof(ArrayList), typeof(ArrayList) );
            return default( bool );
        
		}
        void ToXml( System.Security.SecurityElement root, string childName, System.Collections.IEnumerator enumerator ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToXml), typeof(SecurityElement), typeof(String), typeof(IEnumerator) ); 
		}
        void FromXml( System.Collections.ArrayList endpoints, System.Net.NetworkAccess access ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromXml), typeof(ArrayList), typeof(NetworkAccess) ); 
		}
    }
}