// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Collections;
using System.Runtime.Serialization;
using System;
using System.Net;
using System.Collections.Specialized;

namespace System.Net {
    public class WebHeaderCollection: System.Collections.Specialized.NameValueCollection {

        internal string ContentLength {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentLength));
				return default (String);
			}
		}
        internal string CacheControl {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CacheControl));
				return default (String);
			}
		}
        internal string ContentType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContentType));
				return default (String);
			}
		}
        internal string Date {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Date));
				return default (String);
			}
		}
        internal string Expires {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Expires));
				return default (String);
			}
		}
        internal string ETag {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ETag));
				return default (String);
			}
		}
        internal string LastModified {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LastModified));
				return default (String);
			}
		}
        internal string Location {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Location));
				return default (String);
			}
		}
        internal string ProxyAuthenticate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ProxyAuthenticate));
				return default (String);
			}
		}
        internal string SetCookie2 {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetCookie2));
				return default (String);
			}
		}
        internal string SetCookie {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetCookie));
				return default (String);
			}
		}
        internal string Server {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Server));
				return default (String);
			}
		}
        internal string Via {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Via));
				return default (String);
			}
		}
        internal System.Collections.Specialized.NameValueCollection InnerCollection {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InnerCollection));
				return default (NameValueCollection);
			}
		}
        internal bool AllowHttpRequestHeader {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowHttpRequestHeader));
				return default (Boolean);
			}
		}
        internal bool AllowHttpResponseHeader {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowHttpResponseHeader));
				return default (Boolean);
			}
		}
        public string this[System.Net.HttpRequestHeader header] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( string );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public string this[System.Net.HttpResponseHeader header] {
			get {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
			return default( string );
		}
			set {
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod("indexer");
		} }
        public override int Count {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Count));
				return default (Int32);
			}
		}
        public override System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Keys));
				return default (KeysCollection);
			}
		}
        public override string[][] AllKeys {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllKeys));
				return default (String[][]);
			}
		}
        public WebHeaderCollection(  ) : base( default( System.Collections.Specialized.NameValueCollection ) ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(WebHeaderCollection));
            }
        internal static bool AllowMultiValues( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AllowMultiValues), typeof(String) );
            return default( bool );

		}
        public void Add( System.Net.HttpRequestHeader header, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(HttpRequestHeader), typeof(String) );
		}
        public void Add( System.Net.HttpResponseHeader header, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(HttpResponseHeader), typeof(String) );
		}
        public void Set( System.Net.HttpRequestHeader header, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set), typeof(HttpRequestHeader), typeof(String) );
		}
        public void Set( System.Net.HttpResponseHeader header, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set), typeof(HttpResponseHeader), typeof(String) );
		}
        internal void SetInternal( System.Net.HttpResponseHeader header, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetInternal), typeof(HttpResponseHeader), typeof(String) );
		}
        public void Remove( System.Net.HttpRequestHeader header ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(HttpRequestHeader) );
		}
        public void Remove( System.Net.HttpResponseHeader header ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(HttpResponseHeader) );
		}
        protected void AddWithoutValidate( string headerName, string headerValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddWithoutValidate), typeof(String), typeof(String) );
		}
        internal void SetAddVerified( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetAddVerified), typeof(String), typeof(String) );
		}
        internal void AddInternal( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddInternal), typeof(String), typeof(String) );
		}
        internal void ChangeInternal( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ChangeInternal), typeof(String), typeof(String) );
		}
        internal void RemoveInternal( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(RemoveInternal), typeof(String) );
		}
        internal void CheckUpdate( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckUpdate), typeof(String), typeof(String) );
		}
        internal static string CheckBadChars( string name, bool isHeaderValue ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckBadChars), typeof(String), typeof(Boolean) );
            return default( string );

		}
        internal static bool IsValidToken( string token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsValidToken), typeof(String) );
            return default( bool );

		}
        internal static bool ContainsNonAsciiChars( string token ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ContainsNonAsciiChars), typeof(String) );
            return default( bool );

		}
        internal void ThrowOnRestrictedHeader( string headerName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ThrowOnRestrictedHeader), typeof(String) );
		}
        public override void Add( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(String), typeof(String) );
		}
        public void Add( string header ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Add), typeof(String) );
		}
        public override void Set( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Set), typeof(String), typeof(String) );
		}
        internal void SetInternal( string name, string value ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SetInternal), typeof(String), typeof(String) );
		}
        public override void Remove( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Remove), typeof(String) );
		}
        public override string[][] GetValues( string header ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetValues), typeof(String) );
            return default( string[][] );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        internal string ToString( bool forTrace ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString), typeof(Boolean) );
            return default( string );

		}
        internal static string GetAsString( System.Collections.Specialized.NameValueCollection cc, bool winInetCompat, bool forTrace ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAsString), typeof(NameValueCollection), typeof(Boolean), typeof(Boolean) );
            return default( string );

		}
        public byte[][] ToByteArray() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToByteArray) );
            return default( byte[][] );

		}
        public static bool IsRestricted( string headerName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsRestricted), typeof(String) );
            return default( bool );

		}
        public static bool IsRestricted( string headerName, bool response ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsRestricted), typeof(String), typeof(Boolean) );
            return default( bool );

		}
        public override void OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(OnDeserialization), typeof(Object) );
		}
        public override void GetObjectData( System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public override string Get( string name ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Get), typeof(String) );
            return default( string );

		}
        public override System.Collections.IEnumerator GetEnumerator() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEnumerator) );
            return default( System.Collections.IEnumerator );

		}
        internal override bool InternalHasKeys() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalHasKeys) );
            return default( bool );

		}
        public override string Get( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Get), typeof(Int32) );
            return default( string );

		}
        public override string[][] GetValues( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetValues), typeof(Int32) );
            return default( string[][] );

		}
        public override string GetKey( int index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetKey), typeof(Int32) );
            return default( string );

		}
        public override void Clear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Clear) );
		}
        public static class HeaderEncoding {

        internal static string GetString( byte[] bytes, int byteIndex, int byteCount ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetString), typeof(Byte[]), typeof(Int32), typeof(Int32) );
            return default( string );

		}
        internal static int GetByteCount( string myString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetByteCount), typeof(String) );
            return default( int );

		}
        internal static void GetBytes( string myString, int charIndex, int charCount, byte[] bytes, int byteIndex ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetBytes), typeof(String), typeof(Int32), typeof(Int32), typeof(Byte[]), typeof(Int32) );
		}
        internal static byte[][] GetBytes( string myString ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetBytes), typeof(String) );
            return default( byte[][] );

		}
        internal static string DecodeUtf8FromString( string input ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DecodeUtf8FromString), typeof(String) );
            return default( string );

		}
        }
    }
}