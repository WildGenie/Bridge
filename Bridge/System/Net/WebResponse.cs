// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Runtime.Serialization;
using System.IO;
using System.Net;

namespace System.Net {
    public abstract class WebResponse: System.MarshalByRefObject, System.IDisposable, System.Runtime.Serialization.ISerializable {

        public virtual bool IsFromCache {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFromCache));
				return default (Boolean);
			}
		}
        internal bool InternalSetFromCache {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalSetFromCache));
				return default (Boolean);
			}
		}
        internal virtual bool IsCacheFresh {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsCacheFresh));
				return default (Boolean);
			}
		}
        internal bool InternalSetIsCacheFresh {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalSetIsCacheFresh));
				return default (Boolean);
			}
		}
        public virtual bool IsMutuallyAuthenticated {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsMutuallyAuthenticated));
				return default (Boolean);
			}
		}
        public virtual long ContentLength { get; set; }
        public virtual string ContentType { get; set; }
        public virtual System.Uri ResponseUri {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ResponseUri));
				return default (Uri);
			}
		}
        public virtual System.Net.WebHeaderCollection Headers {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Headers));
				return default (WebHeaderCollection);
			}
		}
        public virtual bool SupportsHeaders {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsHeaders));
				return default (Boolean);
			}
		}
        protected virtual void GetObjectData( System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetObjectData), typeof(SerializationInfo), typeof(StreamingContext) );
		}
        public virtual void Close() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Close) );
		}
        public void Dispose() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose) );
		}
        protected virtual void Dispose( bool disposing ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Dispose), typeof(Boolean) );
		}
        public virtual System.IO.Stream GetResponseStream() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetResponseStream) );
            return default( System.IO.Stream );

		}

    }
}