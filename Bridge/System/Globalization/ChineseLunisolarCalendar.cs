// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Globalization;

namespace System.Globalization {
    public class ChineseLunisolarCalendar {

        internal const int ChineseEra = 1;

        internal const int MIN_LUNISOLAR_YEAR = 1901;

        internal const int MAX_LUNISOLAR_YEAR = 2100;

        internal const int MIN_GREGORIAN_YEAR = 1901;

        internal const int MIN_GREGORIAN_MONTH = 2;

        internal const int MIN_GREGORIAN_DAY = 19;

        internal const int MAX_GREGORIAN_YEAR = 2101;

        internal const int MAX_GREGORIAN_MONTH = 1;

        internal const int MAX_GREGORIAN_DAY = 28;

        public System.DateTime MinSupportedDateTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MinSupportedDateTime));
				return default (DateTime);
			}
		}
        public System.DateTime MaxSupportedDateTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaxSupportedDateTime));
				return default (DateTime);
			}
		}
        internal int MinCalendarYear {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MinCalendarYear));
				return default (Int32);
			}
		}
        internal int MaxCalendarYear {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaxCalendarYear));
				return default (Int32);
			}
		}

        internal System.DateTime MinDate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MinDate));
				return default (DateTime);
			}
		}
        internal System.DateTime MaxDate {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaxDate));
				return default (DateTime);
			}
		}
        internal CalendarId ID {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ID));
				return default (Int32);
			}
		}
        internal CalendarId BaseCalendarID {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseCalendarID));
				return default (Int32);
			}
		}
        public int[][] Eras {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Eras));
				return default (int[][]);
			}
		}
        internal int GetYearInfo( int LunarYear, int Index ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetYearInfo), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal int GetYear( int year, System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetYear), typeof(Int32), typeof(DateTime) );
            return default( int );

		}
        internal int GetGregorianYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetGregorianYear), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public int GetEra( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEra), typeof(DateTime) );
            return default( int );

		}
    }
}