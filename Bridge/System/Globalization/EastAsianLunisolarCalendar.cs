// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Globalization;

namespace System.Globalization {
    public abstract class EastAsianLunisolarCalendar: System.Globalization.Calendar {

        internal const int LeapMonth = 0;

        internal const int Jan1Month = 1;

        internal const int Jan1Date = 2;

        internal const int nDaysPerMonth = 3;

        internal const int DatePartYear = 0;

        internal const int DatePartDayOfYear = 1;

        internal const int DatePartMonth = 2;

        internal const int DatePartDay = 3;

        internal const int MaxCalendarMonth = 13;

        internal const int MaxCalendarDay = 30;

        public override System.Globalization.CalendarAlgorithmType AlgorithmType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AlgorithmType));
				return default (CalendarAlgorithmType);
			}
		}
        internal abstract int MinCalendarYear { get; }
        internal abstract int MaxCalendarYear { get; }

        internal abstract System.DateTime MinDate { get; }

        internal abstract System.DateTime MaxDate { get; }
        public override int TwoDigitYearMax { get; set; }
        public virtual int GetSexagenaryYear( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSexagenaryYear), typeof(DateTime) );
            return default( int );

		}
        public int GetCelestialStem( int sexagenaryYear ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetCelestialStem), typeof(Int32) );
            return default( int );

		}
        public int GetTerrestrialBranch( int sexagenaryYear ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTerrestrialBranch), typeof(Int32) );
            return default( int );

		}
        internal abstract int GetYearInfo( int LunarYear, int Index );

        internal abstract int GetYear( int year, System.DateTime time );

        internal abstract int GetGregorianYear( int year, int era );

        internal int MinEraCalendarYear( int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MinEraCalendarYear), typeof(Int32) );
            return default( int );

		}
        internal int MaxEraCalendarYear( int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaxEraCalendarYear), typeof(Int32) );
            return default( int );

		}
        internal void CheckTicksRange( long ticks ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckTicksRange), typeof(Int64) );
		}
        internal void CheckEraRange( int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckEraRange), typeof(Int32) );
		}
        internal int CheckYearRange( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckYearRange), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal int CheckYearMonthRange( int year, int month, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CheckYearMonthRange), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal int InternalGetDaysInMonth( int year, int month ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalGetDaysInMonth), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override int GetDaysInMonth( int year, int month, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDaysInMonth), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override System.DateTime ToDateTime( int year, int month, int day, int hour, int minute, int second, int millisecond, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToDateTime), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( System.DateTime );

		}
        internal void GregorianToLunar( int nSYear, int nSMonth, int nSDate, ref System.Int32 nLYear, ref System.Int32 nLMonth, ref System.Int32 nLDate ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GregorianToLunar), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
		}
        internal bool LunarToGregorian( int nLYear, int nLMonth, int nLDate, ref System.Int32 nSolarYear, ref System.Int32 nSolarMonth, ref System.Int32 nSolarDay ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LunarToGregorian), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        internal System.DateTime LunarToTime( System.DateTime time, int year, int month, int day ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(LunarToTime), typeof(DateTime), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( System.DateTime );

		}
        internal void TimeToLunar( System.DateTime time, ref System.Int32 year, ref System.Int32 month, ref System.Int32 day ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TimeToLunar), typeof(DateTime), typeof(Int32), typeof(Int32), typeof(Int32) );
		}
        public override System.DateTime AddMonths( System.DateTime time, int months ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddMonths), typeof(DateTime), typeof(Int32) );
            return default( System.DateTime );

		}
        public override System.DateTime AddYears( System.DateTime time, int years ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddYears), typeof(DateTime), typeof(Int32) );
            return default( System.DateTime );

		}
        public override int GetDayOfYear( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfYear), typeof(DateTime) );
            return default( int );

		}
        public override int GetDayOfMonth( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfMonth), typeof(DateTime) );
            return default( int );

		}
        public override int GetDaysInYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDaysInYear), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override int GetMonth( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMonth), typeof(DateTime) );
            return default( int );

		}
        public override int GetYear( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetYear), typeof(DateTime) );
            return default( int );

		}
        public override System.DayOfWeek GetDayOfWeek( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfWeek), typeof(DateTime) );
            return default( System.DayOfWeek );

		}
        public override int GetMonthsInYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMonthsInYear), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override bool IsLeapDay( int year, int month, int day, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapDay), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override bool IsLeapMonth( int year, int month, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapMonth), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override int GetLeapMonth( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLeapMonth), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        internal bool InternalIsLeapYear( int year ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(InternalIsLeapYear), typeof(Int32) );
            return default( bool );

		}
        public override bool IsLeapYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapYear), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override int ToFourDigitYear( int year ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToFourDigitYear), typeof(Int32) );
            return default( int );

		}
    }
}