// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System;
using System.Globalization;

namespace System.Globalization {
    public class KoreanCalendar: System.Globalization.Calendar {

        internal const int KoreanEra = 1;

        public override System.DateTime MinSupportedDateTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MinSupportedDateTime));
				return default (DateTime);
			}
		}
        public override System.DateTime MaxSupportedDateTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(MaxSupportedDateTime));
				return default (DateTime);
			}
		}
        public override System.Globalization.CalendarAlgorithmType AlgorithmType {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AlgorithmType));
				return default (CalendarAlgorithmType);
			}
		}

        public override int TwoDigitYearMax { get; set; }
        public override System.DateTime AddMonths( System.DateTime time, int months ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddMonths), typeof(DateTime), typeof(Int32) );
            return default( System.DateTime );

		}
        public override System.DateTime AddYears( System.DateTime time, int years ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(AddYears), typeof(DateTime), typeof(Int32) );
            return default( System.DateTime );

		}
        public override int GetDaysInMonth( int year, int month, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDaysInMonth), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override int GetDaysInYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDaysInYear), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override int GetDayOfMonth( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfMonth), typeof(DateTime) );
            return default( int );

		}
        public override System.DayOfWeek GetDayOfWeek( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfWeek), typeof(DateTime) );
            return default( System.DayOfWeek );

		}
        public override int GetDayOfYear( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDayOfYear), typeof(DateTime) );
            return default( int );

		}
        public override int GetMonthsInYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMonthsInYear), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override int GetWeekOfYear( System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetWeekOfYear), typeof(DateTime), typeof(CalendarWeekRule), typeof(DayOfWeek) );
            return default( int );

		}
        public override int GetEra( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetEra), typeof(DateTime) );
            return default( int );

		}

        public override int[] Eras { get; }

        public override int GetMonth( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetMonth), typeof(DateTime) );
            return default( int );

		}
        public override int GetYear( System.DateTime time ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetYear), typeof(DateTime) );
            return default( int );

		}
        public override bool IsLeapDay( int year, int month, int day, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapDay), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override bool IsLeapYear( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapYear), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override int GetLeapMonth( int year, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLeapMonth), typeof(Int32), typeof(Int32) );
            return default( int );

		}
        public override bool IsLeapMonth( int year, int month, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsLeapMonth), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( bool );

		}
        public override System.DateTime ToDateTime( int year, int month, int day, int hour, int minute, int second, int millisecond, int era ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToDateTime), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32), typeof(Int32) );
            return default( System.DateTime );

		}
        public override int ToFourDigitYear( int year ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToFourDigitYear), typeof(Int32) );
            return default( int );

		}
    }
}