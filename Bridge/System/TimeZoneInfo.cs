// THIS FILE WAS AUTOMATICALLY GENERATED BY STUBBER

using System.Runtime.Serialization;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Microsoft;

namespace System {
    public class TimeZoneInfo: System.Runtime.Serialization.IDeserializationCallback, System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable {

        internal const long TIME_ZONE_ID_INVALID = 4294967295;

        internal const int ERROR_NO_MORE_ITEMS = 259;

        internal const int ERROR_SUCCESS = 0;

        public System.TimeSpan BaseUtcOffset {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseUtcOffset));
				return default (TimeSpan);
			}
		}
        public string DaylightName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightName));
				return default (String);
			}
		}
        public string DisplayName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DisplayName));
				return default (String);
			}
		}
        public string Id {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Id));
				return default (String);
			}
		}
        public static System.TimeZoneInfo Local {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Local));
				return default (TimeZoneInfo);
			}
		}
        public string StandardName {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(StandardName));
				return default (String);
			}
		}
        public bool SupportsDaylightSavingTime {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(SupportsDaylightSavingTime));
				return default (Boolean);
			}
		}
        public static System.TimeZoneInfo Utc {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Utc));
				return default (TimeZoneInfo);
			}
		}
        internal static string TimeZoneDirectory {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TimeZoneDirectory));
				return default (String);
			}
		}
        internal static bool IsWindows {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsWindows));
				return default (Boolean);
			}
		}
        internal static bool UtcOffsetOutOfRange( System.TimeSpan offset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(UtcOffsetOutOfRange), typeof(TimeSpan) );
            return default( bool );

		}
        public static System.TimeZoneInfo FromSerializedString( string source ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FromSerializedString), typeof(String) );
            return default( System.TimeZoneInfo );

		}
        public string ToSerializedString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToSerializedString) );
            return default( string );

		}
        internal static int EnumDynamicTimeZoneInformation( int dwIndex, out System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(EnumDynamicTimeZoneInformation), typeof(UInt32), typeof(DYNAMIC_TIME_ZONE_INFORMATION) );
            lpTimeZoneInformation = default( System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION );

            return default( int );

		}
        internal static int GetDynamicTimeZoneInformation( out System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDynamicTimeZoneInformation), typeof(DYNAMIC_TIME_ZONE_INFORMATION) );
            pTimeZoneInformation = default( System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION );

            return default( int );

		}
        internal static int GetDynamicTimeZoneInformationWin32( out System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDynamicTimeZoneInformationWin32), typeof(DYNAMIC_TIME_ZONE_INFORMATION) );
            pTimeZoneInformation = default( System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION );

            return default( int );

		}
        internal static int GetDynamicTimeZoneInformationEffectiveYears( ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, out int FirstYear, out int LastYear ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDynamicTimeZoneInformationEffectiveYears), typeof(DYNAMIC_TIME_ZONE_INFORMATION), typeof(UInt32), typeof(UInt32) );
            FirstYear = default( int ); LastYear = default( int );

            return default( int );

		}
        internal static bool GetTimeZoneInformationForYear( short  wYear, ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, out System.TimeZoneInfo.TIME_ZONE_INFORMATION ptzi ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetTimeZoneInformationForYear), typeof(short), typeof(DYNAMIC_TIME_ZONE_INFORMATION), typeof(TIME_ZONE_INFORMATION) );
            ptzi = default( System.TimeZoneInfo.TIME_ZONE_INFORMATION );

            return default( bool );

		}
        internal static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation( ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, System.DateTime startDate, System.DateTime endDate, int defaultBaseUtcOffset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateAdjustmentRuleFromTimeZoneInformation), typeof(DYNAMIC_TIME_ZONE_INFORMATION), typeof(DateTime), typeof(DateTime), typeof(Int32) );
            return default( System.TimeZoneInfo.AdjustmentRule );

		}
        internal static System.TimeZoneInfo TryCreateTimeZone( System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TryCreateTimeZone), typeof(DYNAMIC_TIME_ZONE_INFORMATION) );
            return default( System.TimeZoneInfo );

		}
        internal static System.TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLocalTimeZoneInfoWinRTFallback) );
            return default( System.TimeZoneInfo );

		}
        internal static string GetLocalTimeZoneKeyNameWin32Fallback() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetLocalTimeZoneKeyNameWin32Fallback) );
            return default( string );

		}
        internal static System.TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback( string id ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindSystemTimeZoneByIdWinRTFallback), typeof(String) );
            return default( System.TimeZoneInfo );

		}
        internal static System.Collections.Generic.List<System.TimeZoneInfo> GetSystemTimeZonesWinRTFallback() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSystemTimeZonesWinRTFallback) );
            return default( System.Collections.Generic.List<System.TimeZoneInfo> );

		}
        public static void ClearCachedData() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ClearCachedData) );
		}
        public static System.DateTime ConvertTime( System.DateTime dateTime, System.TimeZoneInfo destinationTimeZone ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTime), typeof(DateTime), typeof(TimeZoneInfo) );
            return default( System.DateTime );

		}
        public static System.DateTime ConvertTime( System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTime), typeof(DateTime), typeof(TimeZoneInfo), typeof(TimeZoneInfo) );
            return default( System.DateTime );

		}
        public static System.DateTimeOffset ConvertTime( System.DateTimeOffset dateTimeOffset, System.TimeZoneInfo destinationTimeZone ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTime), typeof(DateTimeOffset), typeof(TimeZoneInfo) );
            return default( System.DateTimeOffset );

		}
        public static System.DateTime ConvertTimeBySystemTimeZoneId( System.DateTime dateTime, string destinationTimeZoneId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeBySystemTimeZoneId), typeof(DateTime), typeof(String) );
            return default( System.DateTime );

		}
        public static System.DateTime ConvertTimeBySystemTimeZoneId( System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeBySystemTimeZoneId), typeof(DateTime), typeof(String), typeof(String) );
            return default( System.DateTime );

		}
        public static System.DateTimeOffset ConvertTimeBySystemTimeZoneId( System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeBySystemTimeZoneId), typeof(DateTimeOffset), typeof(String) );
            return default( System.DateTimeOffset );

		}
        public static System.DateTime ConvertTimeFromUtc( System.DateTime dateTime, System.TimeZoneInfo destinationTimeZone ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeFromUtc), typeof(DateTime), typeof(TimeZoneInfo) );
            return default( System.DateTime );

		}
        public static System.DateTime ConvertTimeToUtc( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeToUtc), typeof(DateTime) );
            return default( System.DateTime );

		}
        public static System.DateTime ConvertTimeToUtc( System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ConvertTimeToUtc), typeof(DateTime), typeof(TimeZoneInfo) );
            return default( System.DateTime );

		}
        internal static System.TimeSpan GetDateTimeNowUtcOffsetFromUtc( System.DateTime time, out System.Boolean isAmbiguousLocalDst ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDateTimeNowUtcOffsetFromUtc), typeof(DateTime), typeof(Boolean) );
            isAmbiguousLocalDst = default( System.Boolean );

            return default( System.TimeSpan );

		}
        public static System.TimeZoneInfo CreateCustomTimeZone( string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateCustomTimeZone), typeof(String), typeof(TimeSpan), typeof(String), typeof(String) );
            return default( System.TimeZoneInfo );

		}
        public static System.TimeZoneInfo CreateCustomTimeZone( string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateCustomTimeZone), typeof(String), typeof(TimeSpan), typeof(String), typeof(String), typeof(String), typeof(AdjustmentRule[]) );
            return default( System.TimeZoneInfo );

		}
        public static System.TimeZoneInfo CreateCustomTimeZone( string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateCustomTimeZone), typeof(String), typeof(TimeSpan), typeof(String), typeof(String), typeof(String), typeof(AdjustmentRule[]), typeof(Boolean) );
            return default( System.TimeZoneInfo );

		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public bool Equals( System.TimeZoneInfo other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(TimeZoneInfo) );
            return default( bool );

		}
        public static System.TimeZoneInfo FindSystemTimeZoneById( string id ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(FindSystemTimeZoneById), typeof(String) );
            return default( System.TimeZoneInfo );

		}
        public System.TimeZoneInfo.AdjustmentRule[][] GetAdjustmentRules() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAdjustmentRules) );
            return default( System.TimeZoneInfo.AdjustmentRule[][] );

		}
        public System.TimeSpan[][] GetAmbiguousTimeOffsets( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAmbiguousTimeOffsets), typeof(DateTime) );
            return default( System.TimeSpan[][] );

		}
        public System.TimeSpan[][] GetAmbiguousTimeOffsets( System.DateTimeOffset dateTimeOffset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetAmbiguousTimeOffsets), typeof(DateTimeOffset) );
            return default( System.TimeSpan[][] );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}
        public static System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> GetSystemTimeZones() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetSystemTimeZones) );
            return default( System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> );

		}
        public System.TimeSpan GetUtcOffset( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUtcOffset), typeof(DateTime) );
            return default( System.TimeSpan );

		}
        public System.TimeSpan GetUtcOffset( System.DateTimeOffset dateTimeOffset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUtcOffset), typeof(DateTimeOffset) );
            return default( System.TimeSpan );

		}
        public bool HasSameRules( System.TimeZoneInfo other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasSameRules), typeof(TimeZoneInfo) );
            return default( bool );

		}
        public bool IsAmbiguousTime( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAmbiguousTime), typeof(DateTime) );
            return default( bool );

		}
        public bool IsAmbiguousTime( System.DateTimeOffset dateTimeOffset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsAmbiguousTime), typeof(DateTimeOffset) );
            return default( bool );

		}
        public bool IsDaylightSavingTime( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDaylightSavingTime), typeof(DateTime) );
            return default( bool );

		}
        public bool IsDaylightSavingTime( System.DateTimeOffset dateTimeOffset ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsDaylightSavingTime), typeof(DateTimeOffset) );
            return default( bool );

		}
        internal System.Globalization.DaylightTime GetDaylightChanges( int year ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetDaylightChanges), typeof(Int32) );
            return default( System.Globalization.DaylightTime );

		}
        public bool IsInvalidTime( System.DateTime dateTime ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsInvalidTime), typeof(DateTime) );
            return default( bool );

		}
        public override string ToString() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(ToString) );
            return default( string );

		}
        internal static System.TimeSpan GetUtcOffsetFromUtc( System.DateTime time, System.TimeZoneInfo zone, out System.Boolean isDaylightSavings, out System.Boolean isAmbiguousLocalDst ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetUtcOffsetFromUtc), typeof(DateTime), typeof(TimeZoneInfo), typeof(Boolean), typeof(Boolean) );
            isDaylightSavings = default( System.Boolean ); isAmbiguousLocalDst = default( System.Boolean );

            return default( System.TimeSpan );

		}

        void @System.Runtime.Serialization.IDeserializationCallback.OnDeserialization( System.Object sender ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(@System.Runtime.Serialization.IDeserializationCallback.OnDeserialization), typeof(Object) );
		}
        public class AdjustmentRule: System.Runtime.Serialization.IDeserializationCallback, System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable {

        public System.DateTime DateStart {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DateStart));
				return default (DateTime);
			}
		}
        public System.DateTime DateEnd {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DateEnd));
				return default (DateTime);
			}
		}
        public System.TimeSpan DaylightDelta {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightDelta));
				return default (TimeSpan);
			}
		}
        public System.TimeZoneInfo.TransitionTime DaylightTransitionStart {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightTransitionStart));
				return default (TransitionTime);
			}
		}
        public System.TimeZoneInfo.TransitionTime DaylightTransitionEnd {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DaylightTransitionEnd));
				return default (TransitionTime);
			}
		}
        internal System.TimeSpan BaseUtcOffsetDelta {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(BaseUtcOffsetDelta));
				return default (TimeSpan);
			}
		}
        internal bool HasDaylightSaving {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(HasDaylightSaving));
				return default (Boolean);
			}
		}
        public bool Equals( System.TimeZoneInfo.AdjustmentRule other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(AdjustmentRule) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}

        public void OnDeserialization(object sender)
        {
            throw new NotImplementedException();
        }

        public static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule( System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateAdjustmentRule), typeof(DateTime), typeof(DateTime), typeof(TimeSpan), typeof(TransitionTime), typeof(TransitionTime) );
            return default( System.TimeZoneInfo.AdjustmentRule );

		}
        internal static System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule( System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateAdjustmentRule), typeof(DateTime), typeof(DateTime), typeof(TimeSpan), typeof(TransitionTime), typeof(TransitionTime), typeof(TimeSpan) );
            return default( System.TimeZoneInfo.AdjustmentRule );

		}
        internal bool IsStartDateMarkerForBeginningOfYear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsStartDateMarkerForBeginningOfYear) );
            return default( bool );

		}
        internal bool IsEndDateMarkerForEndOfYear() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsEndDateMarkerForEndOfYear) );
            return default( bool );

		}
        }
        public struct TransitionTime: System.Runtime.Serialization.IDeserializationCallback, System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable {

        public System.DateTime TimeOfDay {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(TimeOfDay));
				return default (DateTime);
			}
		}
        public int Month {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Month));
				return default (Int32);
			}
		}
        public int Week {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Week));
				return default (Int32);
			}
		}
        public int Day {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Day));
				return default (Int32);
			}
		}
        public System.DayOfWeek DayOfWeek {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(DayOfWeek));
				return default (DayOfWeek);
			}
		}
        public bool IsFixedDateRule {
			get{
				Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(IsFixedDateRule));
				return default (Boolean);
			}
		}
        public override bool Equals( System.Object obj ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(Object) );
            return default( bool );

		}
        public bool Equals( System.TimeZoneInfo.TransitionTime other ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(Equals), typeof(TransitionTime) );
            return default( bool );

		}
        public override int GetHashCode() {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(GetHashCode) );
            return default( int );

		}

        public void OnDeserialization(object sender)
        {
            throw new NotImplementedException();
        }

        public static System.TimeZoneInfo.TransitionTime CreateFixedDateRule( System.DateTime timeOfDay, int month, int day ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFixedDateRule), typeof(DateTime), typeof(Int32), typeof(Int32) );
            return default( System.TimeZoneInfo.TransitionTime );

		}
        public static System.TimeZoneInfo.TransitionTime CreateFloatingDateRule( System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek ) {
			Bridge.Luna.Utils.Debug.WarnNotImplementedMethod(nameof(CreateFloatingDateRule), typeof(DateTime), typeof(Int32), typeof(Int32), typeof(DayOfWeek) );
            return default( System.TimeZoneInfo.TransitionTime );

		}
        }
        public struct SYSTEMTIME {

        internal short  wYear;

        internal short  wMonth;

        internal short  wDayOfWeek;

        internal short  wDay;

        internal short  wHour;

        internal short  wMinute;

        internal short  wSecond;

        internal short  wMilliseconds;

        public SYSTEMTIME(short wMilliseconds, short wSecond, short wMinute, short wHour, short wDay, short wDayOfWeek, short wMonth, short wYear)
        {
            this.wMilliseconds = wMilliseconds;
            this.wSecond = wSecond;
            this.wMinute = wMinute;
            this.wHour = wHour;
            this.wDay = wDay;
            this.wDayOfWeek = wDayOfWeek;
            this.wMonth = wMonth;
            this.wYear = wYear;
        }
        }
        public struct TIME_ZONE_INFORMATION {

        internal int Bias;

        internal string StandardName;

        internal System.TimeZoneInfo.SYSTEMTIME StandardDate;

        internal int StandardBias;

        internal string DaylightName;

        internal System.TimeZoneInfo.SYSTEMTIME DaylightDate;

        internal int DaylightBias;

        public TIME_ZONE_INFORMATION(int daylightBias, SYSTEMTIME daylightDate, string daylightName, int standardBias, SYSTEMTIME standardDate, string standardName, int bias)
        {
            DaylightBias = daylightBias;
            DaylightDate = daylightDate;
            DaylightName = daylightName;
            StandardBias = standardBias;
            StandardDate = standardDate;
            StandardName = standardName;
            Bias = bias;
        }
        }
        public struct DYNAMIC_TIME_ZONE_INFORMATION {

        internal System.TimeZoneInfo.TIME_ZONE_INFORMATION TZI;

        internal string TimeZoneKeyName;

        internal byte DynamicDaylightTimeDisabled;

        public DYNAMIC_TIME_ZONE_INFORMATION(string timeZoneKeyName, byte dynamicDaylightTimeDisabled, TIME_ZONE_INFORMATION tzi)
        {
            TimeZoneKeyName = timeZoneKeyName;
            DynamicDaylightTimeDisabled = dynamicDaylightTimeDisabled;
            TZI = tzi;
        }
        }
    }
}