/**
 * @compiler Bridge.NET 17.9.3-luna
 */
Bridge.assembly("Bridge.Test.Bridge.ClientTest", function ($asm, globals) {
    

    /*Bridge.Test.Runtime.BridgeClientTestRunner start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner", {
        /*Bridge.Test.Runtime.BridgeClientTestRunner.Main:static start.*/
        main: function Main () {
            Bridge.Test.Runtime.ContextHelper.Init();
            QUnit.module("[ObjectLiteral]");
            QUnit.test("Methods and properties - TestObjectLiteral", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529.TestObjectLiteral);
            QUnit.test("CreateAndInitializationModes - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests.Test);
            QUnit.test("ObjectCreateMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests.Test);
            QUnit.test("ObjectInitializationMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests.Test);
            QUnit.test("Create<T> - TestExternalInterface", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectLiteralCreateTests.TestExternalInterface);
            QUnit.test("Create<T> - TestClass", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectLiteralCreateTests.TestClass);
            QUnit.module("Activator");
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.NonGenericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.GenericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithOneArgumentWorks_SPI_1542", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.GenericCreateInstanceWithOneArgumentWorks_SPI_1542);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543);
            QUnit.test("ActivatorTests - InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor", Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_ItemSet_KeyOfWrongType", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_KeyOfWrongType);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_ItemSet_ValueOfWrongType", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_ValueOfWrongType);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_Add_KeyOfWrongType", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_KeyOfWrongType);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_Add_ValueOfWrongType", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_ValueOfWrongType);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull);
            QUnit.test("SortedList_IDictionary_NonGeneric_Tests - IDictionary_NonGeneric_Contains_KeyOfWrongType", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Contains_KeyOfWrongType);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IComparer);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_IDictionary", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_IDictionary_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary_IComparer);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_int", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Constructor_int_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int_IComparer);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_setRoundTrips", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_setRoundTrips);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_GrowsDuringAdds", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_GrowsDuringAdds);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_ClearDoesntTrim", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearDoesntTrim);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_Capacity_ClearTrimsToInitialCapacity", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_ContainsValue_NotPresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_NotPresent);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_ContainsValue_Present", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_Present);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_ContainsValue_DefaultValueNotPresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValueNotPresent);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_ContainsValue_DefaultValuePresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValuePresent);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOfKey_EachKey", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfKey_EachKey);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOfValue_DefaultValueContainedInList", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueContainedInList);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_IndexOfValue_EachValue", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_EachValue);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_RemoveAt_EveryValue", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_EveryValue);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_RemoveAt_OutOfRangeValues", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_OutOfRangeValues);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack);
            QUnit.test("SortedList_Generic_Tests_int_int - SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack);
            QUnit.test("SortedList_Generic_Tests_int_int - IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys);
            QUnit.test("SortedList_Generic_Tests_int_int - IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IComparer);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_IDictionary", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_IDictionary_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary_IComparer);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_int", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Constructor_int_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int_IComparer);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_setRoundTrips", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_setRoundTrips);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_GrowsDuringAdds", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_GrowsDuringAdds);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_ClearDoesntTrim", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearDoesntTrim);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_Capacity_ClearTrimsToInitialCapacity", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_ContainsValue_NotPresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_NotPresent);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_ContainsValue_Present", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_Present);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_ContainsValue_DefaultValueNotPresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValueNotPresent);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_ContainsValue_DefaultValuePresent", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValuePresent);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_IndexOfKey_EachKey", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfKey_EachKey);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_IndexOfValue_DefaultValueContainedInList", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueContainedInList);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_IndexOfValue_EachValue", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_EachValue);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_RemoveAt_EveryValue", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_EveryValue);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_RemoveAt_OutOfRangeValues", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_OutOfRangeValues);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack);
            QUnit.test("SortedList_Generic_Tests_string_string - SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack);
            QUnit.test("SortedList_Generic_Tests_string_string - IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys);
            QUnit.test("SortedList_Generic_Tests_string_string - IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues", Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues);
            QUnit.module("Attribute");
            QUnit.test("CollectionDataContract attribute - AttributeUsageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CollectionDataContractAttributeTest.AttributeUsageWorks);
            QUnit.module("BitConverter");
            QUnit.test("BitConverter - ValueArgumentNull", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.ValueArgumentNull);
            QUnit.test("BitConverter - StartIndexBeyondLength", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.StartIndexBeyondLength);
            QUnit.test("BitConverter - StartIndexPlusNeededLengthTooLong", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.StartIndexPlusNeededLengthTooLong);
            QUnit.test("BitConverter - RoundtripDoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripDoubleToInt64Bits);
            QUnit.test("BitConverter - Int64BitsToDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.Int64BitsToDouble);
            QUnit.test("BitConverter - DoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.DoubleToInt64Bits);
            QUnit.test("BitConverter - RoundtripBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripBoolean);
            QUnit.test("BitConverter - RoundtripChar", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripChar);
            QUnit.test("BitConverter - RoundtripDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripDouble);
            QUnit.test("BitConverter - RoundtripSingle", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripSingle);
            QUnit.test("BitConverter - RoundtripInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt16);
            QUnit.test("BitConverter - RoundtripInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt32);
            QUnit.test("BitConverter - RoundtripInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt64);
            QUnit.test("BitConverter - RoundtripUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt16);
            QUnit.test("BitConverter - RoundtripUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt32);
            QUnit.test("BitConverter - RoundtripUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt64);
            QUnit.test("BitConverter - RoundtripString", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripString);
            QUnit.test("BitConverter - ToString_ByteArray_Long", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.ToString_ByteArray_Long);
            QUnit.module("Bridge Console");
            QUnit.test("TestLogMessageObject", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestLogMessageObject);
            QUnit.test("TestLogMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestLogMessageString);
            QUnit.test("TestDebugMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestDebugMessageString);
            QUnit.test("TestErrorMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestErrorMessageString);
            QUnit.test("TestToggling", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestToggling);
            QUnit.test("#2880 - TestHtmlTag", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestHtmlTag);
            QUnit.module("Bridge Namespace");
            QUnit.test("Validation.IsNull()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationIsNull);
            QUnit.test("Validation.IsNotNull()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationIsNotNull);
            QUnit.test("Validation.Email()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationEmail);
            QUnit.test("Validation.Url()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationUrl);
            QUnit.test("Validation.Alpha()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationAlpha);
            QUnit.test("Validation.AlphaNum()", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests.TestValidationAlphaNum);
            QUnit.module("C#");
            QUnit.test("RefParameterTests - CanUseReferenceToLocalVariables", Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests.CanUseReferenceToLocalVariables);
            QUnit.test("RefParameterTests - CanUseReferenceToField", Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests.CanUseReferenceToField);
            QUnit.test("RefParameterTests - CanUseReferenceToOneDimensionalArray", Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests.CanUseReferenceToOneDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToMultiDimensionalArray", Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests.CanUseReferenceToMultiDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToThis_SPI_1569", Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests.CanUseReferenceToThis_SPI_1569);
            QUnit.test("Abstract types - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestB);
            QUnit.test("Abstract types - TestC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestC);
            QUnit.test("Abstract types - TestBC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestBC);
            QUnit.test("Goto - TestGotoCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.TestGotoCase);
            QUnit.test("Goto - TestGotoLabel", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.TestGotoLabel);
            QUnit.test("Static overloads - TestA", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestA);
            QUnit.test("Static overloads - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestB);
            QUnit.test("Static overloads - TestAB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestAB);
            QUnit.test("Interfaces - TestInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestExplicitInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestExplicitInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestTwoInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestTwoInterfaces);
            QUnit.test("Method parameters - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass.Test);
            QUnit.test("Instance overloads - TestInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods.TestInstance);
            QUnit.test("Static overloads - TestStatic", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods.TestStatic);
            QUnit.test("Reference types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestInstanceConstructorsAndMethods);
            QUnit.test("Reference types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestStaticConstructorsAndMethods);
            QUnit.test("Reference types - TestMethodParameters", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestMethodParameters);
            QUnit.test("Try/Catch - SimpleTryCatch", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.SimpleTryCatch);
            QUnit.test("Try/Catch - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.CaughtExceptions);
            QUnit.test("Try/Catch - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.ThrownExceptions);
            QUnit.test("Try/Catch - Bridge320", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.Bridge320);
            QUnit.test("Try/Catch - Bridge343", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.Bridge343);
            QUnit.test("Try/Catch/Finally - SimpleTryCatchFinally", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.SimpleTryCatchFinally);
            QUnit.test("Try/Catch/Finally - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.CaughtExceptions);
            QUnit.test("Try/Catch/Finally - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.ThrownExceptions);
            QUnit.test("Value types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.TestInstanceConstructorsAndMethods);
            QUnit.test("Value types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.TestStaticConstructorsAndMethods);
            QUnit.test("Virtual methods - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods.TestB);
            QUnit.test("Auto properties - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps.TestBasic);
            QUnit.test("Await in catch and finally - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally.TestBasic);
            QUnit.test("ConditionAccess - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess.TestBasic);
            QUnit.test("Exception filter - TestFalseFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFalseFilter);
            QUnit.test("Exception filter - TestTrueFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestTrueFilter);
            QUnit.test("Exception filter - TestMultipleCatchClauses_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestMultipleCatchClauses_2223);
            QUnit.test("Exception filter - TestFailedFilter_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFailedFilter_2223);
            QUnit.test("Exception filter - TestFailedFilter2_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFailedFilter2_2223);
            QUnit.test("Expression-bodied function members - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction.TestBasic);
            QUnit.test("Index initializer - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer.TestBasic);
            QUnit.test("Interpolated Strings - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings.TestBasic);
            QUnit.test("NameOf - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf.TestBasic);
            QUnit.test("Using static - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic.TestBasic);
            QUnit.test("Binary Literals - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestBinaryLiterals.TestBasic);
            QUnit.test("Case label pattern - TestCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern.TestCase);
            QUnit.test("Case label pattern - TestVarCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern.TestVarCase);
            QUnit.test("Case label pattern - TestCaseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern.TestCaseNull);
            QUnit.test("DefaultLiteralExpression - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestDefaultLiteralExpression.TestBasic);
            QUnit.test("Discards and out variables - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestDiscardsAndOutVars.TestBasic);
            QUnit.test("Expression-bodied members - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyMember.Test);
            QUnit.test("Is pattern - IsPatternTests", Bridge.Test.Runtime.BridgeClientTestRunner.TestIsPattern.IsPatternTests);
            QUnit.test("Local function - LocalFunctionsTests", Bridge.Test.Runtime.BridgeClientTestRunner.TestLocalFunctions.LocalFunctionsTests);
            QUnit.test("Local function - ExpressioNBodiedLocalFunctionsTests", Bridge.Test.Runtime.BridgeClientTestRunner.TestLocalFunctions.ExpressioNBodiedLocalFunctionsTests);
            QUnit.test("C# Non-Trailing named arguments - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestNonTrailingNamedArg.TestBasic);
            QUnit.test("C# private protected - TestModifiers", Bridge.Test.Runtime.BridgeClientTestRunner.TestPrivateProtected.TestModifiers);
            QUnit.test("Ref return and ref local - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal.TestBasic);
            QUnit.test("Ref return and ref local - TestBasic2", Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal.TestBasic2);
            QUnit.test("Ref return and ref local - TestBasic3", Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal.TestBasic3);
            QUnit.test("Ref return and ref local - TestBasic4", Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal.TestBasic4);
            QUnit.test("Ref return and ref local - TestBasic5", Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal.TestBasic5);
            QUnit.test("C# 7.2's ReadOnly struct - TestReadOnlyStruct", Bridge.Test.Runtime.BridgeClientTestRunner.TestROStruct.TestReadOnlyStruct);
            QUnit.test("Throw expressions - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestThrowExpression.TestBasic);
            QUnit.test("ValueTuple and deconstruction - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTupleAndDeconstruction.TestBasic);
            QUnit.module("Checked/Unckecked");
            QUnit.test("CheckedInsideUnchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestInt32);
            QUnit.test("CheckedInsideUnchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestUInt32);
            QUnit.test("CheckedInsideUnchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestLong);
            QUnit.test("CheckedInsideUnchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestULong);
            QUnit.test("Checked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestInt32);
            QUnit.test("Checked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestUInt32);
            QUnit.test("Checked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestLong);
            QUnit.test("Checked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestULong);
            QUnit.test("UncheckedInsideChecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestInt32);
            QUnit.test("UncheckedInsideChecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestUInt32);
            QUnit.test("UncheckedInsideChecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestLong);
            QUnit.test("UncheckedInsideChecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestULong);
            QUnit.test("Unchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestInt32);
            QUnit.test("Unchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestUInt32);
            QUnit.test("Unchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestLong);
            QUnit.test("Unchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestULong);
            QUnit.test("WithNoUncheckedKeyword - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestInt32);
            QUnit.test("WithNoUncheckedKeyword - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestUInt32);
            QUnit.test("WithNoUncheckedKeyword - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestLong);
            QUnit.test("WithNoUncheckedKeyword - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestULong);
            QUnit.module("Collections");
            QUnit.test("Array - Set1 TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.TypePropertiesAreCorrect);
            QUnit.test("Array - Set1 ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547);
            QUnit.test("Array - Set1 CreateWithNegativeLenghtShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CreateWithNegativeLenghtShouldThrow);
            QUnit.test("Array - Set1 LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.LengthWorks);
            QUnit.test("Array - Set1 LongLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.LongLengthWorks);
            QUnit.test("Array - Set1 RankIsOne", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.RankIsOne);
            QUnit.test("Array - Set1 GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetLengthWorks);
            QUnit.test("Array - Set1 GetLowerBound", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetLowerBound);
            QUnit.test("Array - Set1 GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetUpperBoundWorks);
            QUnit.test("Array - Set1 GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GettingValueByIndexWorks);
            QUnit.test("Array - Set1 GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetValueWorks);
            QUnit.test("Array - Set1 SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SettingValueByIndexWorks);
            QUnit.test("Array - Set1 SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SetValueWorks);
            QUnit.test("Array - Set1 ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWorks);
            QUnit.test("Array - Set1 CloneWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CloneWorks);
            QUnit.test("Array - Set1 ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ConcatWorks);
            QUnit.test("Array - Set1 ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ContainsWorks);
            QUnit.test("Array - Set1 CopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToSameBoundWorks);
            QUnit.test("Array - Set1 CopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToOffsetBoundWorks);
            QUnit.test("Array - Set1 CopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ContainsUsesEqualsMethod);
            QUnit.test("Array - Set1 AllWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.AllWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SliceWithoutEndWorks);
            QUnit.test("Array - Set1 ForeachWithArrayItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWithArrayItemCallbackWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithoutStartIndexWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("Array - Set1 IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithStartIndexWorks);
            QUnit.test("Array - Set1 JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.JoinWithoutDelimiterWorks);
            QUnit.test("Array - Set1 ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ReverseWorks);
            QUnit.test("Array - Set1 AnyWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.AnyWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch1Works);
            QUnit.test("Array - Set1 BinarySearch2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch2Works);
            QUnit.test("Array - Set1 BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch3Works);
            QUnit.test("Array - Set1 BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch4Works);
            QUnit.test("Array - Set1 BinarySearchExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearchExceptionsWorks);
            QUnit.test("Array - Set1 SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SortWithDefaultCompareWorks);
            QUnit.test("Array - Set1 Sort1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort1Works);
            QUnit.test("Array - Set1 Sort2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort2Works);
            QUnit.test("Array - Set1 Sort3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort3Works);
            QUnit.test("Array - Set1 Sort4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort4Works);
            QUnit.test("Array - Set1 SortExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SortExceptionsWorks);
            QUnit.test("Array - Set1 SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SortWithCompareCallbackWorks);
            QUnit.test("Array - Set1 ForeachWhenCastToIListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWhenCastToIListWorks);
            QUnit.test("Array - Set1 ICollectionNonGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionNonGenericInterface);
            QUnit.test("Array - Set1 ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCountWorks);
            QUnit.test("Array - Set1 ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionIsReadOnlyWorks);
            QUnit.test("Array - Set1 ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionAddWorks);
            QUnit.test("Array - Set1 ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionClearWorks);
            QUnit.test("Array - Set1 ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionContainsWorks);
            QUnit.test("Array - Set1 ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionContainsUsesEqualsMethod);
            QUnit.test("Array - Set1 ICollectionCopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToSameBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToOffsetBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionRemoveWorks);
            QUnit.test("Array - Set1 IListNonGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListNonGenericInterface);
            QUnit.test("Array - Set1 IReadOnlyCollectionCountWorks_SPI_1626", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IReadOnlyCollectionCountWorks_SPI_1626);
            QUnit.test("Array - Set1 IReadOnlyCollectionContainsWorks_SPI_1626", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IReadOnlyCollectionContainsWorks_SPI_1626);
            QUnit.test("Array - Set1 IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIsReadOnlyWorks);
            QUnit.test("Array - Set1 IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexingWorks);
            QUnit.test("Array - Set1 IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexOfWorks);
            QUnit.test("Array - Set1 IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexOfUsesEqualsMethod);
            QUnit.test("Array - Set1 IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListInsertWorks);
            QUnit.test("Array - Set1 IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListRemoveAtWorks);
            QUnit.test("Array - Set1 IReadOnlyListIndexingWorks_SPI_1626", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IReadOnlyListIndexingWorks_SPI_1626);
            QUnit.test("Array - Set1 ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ClearWorks);
            QUnit.test("Array - Set1 CopyWithDifferentArraysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyWithDifferentArraysWorks);
            QUnit.test("Array - Set1 CopyWithDifferentArraysLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyWithDifferentArraysLongWorks);
            QUnit.test("Array - Set1 CopyWithinArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyWithinArrayWorks);
            QUnit.test("Array - Set2 TestArrayAsIListOfT", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestArrayAsIListOfT);
            QUnit.test("Array - Set2 TestTrivials", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestTrivials);
            QUnit.test("Array - Set2 TestGetAndSetValue", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestGetAndSetValue);
            QUnit.test("Array - Set2 TestClear", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestClear);
            QUnit.test("Array - Set2 TestCopy_GCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_GCRef);
            QUnit.test("Array - Set2 TestCopy_VTToObj", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTToObj);
            QUnit.test("Array - Set2 TestCopy_VTWithGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTWithGCRef);
            QUnit.test("Array - Set2 TestCopy_VTNoGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTNoGCRef);
            QUnit.test("Array - Set2 TestFind", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestFind);
            QUnit.test("Array - Set2 TestForEach", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestForEach);
            QUnit.test("Array - Set2 TestGetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestGetEnumerator);
            QUnit.test("Array - Set2 TestIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestIndexOf);
            QUnit.test("Array - Set2 TestLastIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestLastIndexOf);
            QUnit.test("Array - Set2 TestResize", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestResize);
            QUnit.test("Array - Set2 TestReverse", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestReverse);
            QUnit.test("Array - Set2 TestSort", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestSort);
            QUnit.test("Array - Set2 TestTrueForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestTrueForAll);
            QUnit.test("Array - Set2 TestSetValueCasting", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestSetValueCasting);
            QUnit.test("Array - Set2 TestValueTypeToReferenceCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestValueTypeToReferenceCopy);
            QUnit.test("Array - Set2 TestReferenceToValueTypeCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestReferenceToValueTypeCopy);
            QUnit.test("Array - Set2 TestArrayConstructionMultidimArrays", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestArrayConstructionMultidimArrays);
            QUnit.test("GenericDictionary - TestPerformance", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TestPerformance);
            QUnit.test("GenericDictionary - TestOrder", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TestOrder);
            QUnit.test("GenericDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("GenericDictionary - DefaultConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DefaultConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionary - CapacityConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CapacityConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionary - CapacityAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CapacityAndEqualityComparerWorks);
            QUnit.test("GenericDictionary - CopyConstructorWorks_SPI_1549", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CopyConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionary - EqualityComparerOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.EqualityComparerOnlyConstructorWorks);
            QUnit.test("GenericDictionary - ConstructorWithBothDictionaryAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ConstructorWithBothDictionaryAndEqualityComparerWorks);
            QUnit.test("GenericDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CountWorks);
            QUnit.test("GenericDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.KeysWorks);
            QUnit.test("GenericDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ValuesWorks);
            QUnit.test("GenericDictionary - IndexerGetterWorksForExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerGetterWorksForExistingItems);
            QUnit.test("GenericDictionary - IndexerSetterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerSetterWorks);
            QUnit.test("GenericDictionary - IndexerGetterThrowsForNonExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerGetterThrowsForNonExistingItems);
            QUnit.test("GenericDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.AddWorks);
            QUnit.test("GenericDictionary - AddThrowsIfItemAlreadyExists", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.AddThrowsIfItemAlreadyExists);
            QUnit.test("GenericDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ClearWorks);
            QUnit.test("GenericDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ContainsKeyWorks);
            QUnit.test("GenericDictionary - EnumeratingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.EnumeratingWorks);
            QUnit.test("GenericDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.RemoveWorks);
            QUnit.test("GenericDictionary - TryGetValueWithIntKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TryGetValueWithIntKeysWorks);
            QUnit.test("GenericDictionary - TryGetValueWithObjectKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TryGetValueWithObjectKeysWorks);
            QUnit.test("GenericDictionary - CanUseCustomComparer", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CanUseCustomComparer);
            QUnit.test("GenericDictionary - DictionaryAsIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIEnumerableWorks);
            QUnit.test("GenericDictionary - DictionaryAsICollectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsICollectionWorks);
            QUnit.test("GenericDictionary - DictionaryAsIDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIDictionaryWorks);
            QUnit.test("GenericDictionary - DictionaryAsIReadOnlyDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIReadOnlyDictionaryWorks);
            QUnit.test("GenericDictionary - DictionaryAsIReadOnlyCollectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIReadOnlyCollectionWorks);
            QUnit.test("ICollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.TypePropertiesAreCorrect);
            QUnit.test("ICollection - ArrayImplementsICollection", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayImplementsICollection);
            QUnit.test("ICollection - CustomClassThatShouldImplementICollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.CustomClassThatShouldImplementICollectionDoesSo);
            QUnit.test("ICollection - ArrayCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionCountWorks);
            QUnit.test("ICollection - ArrayCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionClearWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionClearWorks);
            QUnit.test("ICollection - ArrayCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCopyToWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionCopyToWorks);
            QUnit.test("IDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("IDictionary - ClassImplementsInterfaces_SPI_1626", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ClassImplementsInterfaces_SPI_1626);
            QUnit.test("IDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.CountWorks);
            QUnit.test("IDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.KeysWorks);
            QUnit.test("IDictionary - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.GetItemWorks);
            QUnit.test("IDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ValuesWorks);
            QUnit.test("IDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ContainsKeyWorks);
            QUnit.test("IDictionary - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.TryGetValueWorks);
            QUnit.test("IDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.AddWorks);
            QUnit.test("IDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ClearWorks);
            QUnit.test("IDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.RemoveWorks);
            QUnit.test("IDictionary - SetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.SetItemWorks);
            QUnit.test("IEnumerable - ArrayImplementsIEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayImplementsIEnumerable);
            QUnit.test("IEnumerable - CustomClassThatShouldImplementIEnumerableDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.CustomClassThatShouldImplementIEnumerableDoesSo);
            QUnit.test("IEnumerable - ArrayGetEnumeratorMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayGetEnumeratorMethodWorks);
            QUnit.test("IEnumerable - ArrayCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayCastToIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ClassImplementingIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated);
            QUnit.test("IList - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.TypePropertiesAreCorrect);
            QUnit.test("IList - ArrayImplementsIList", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayImplementsIList);
            QUnit.test("IList - CustomClassThatShouldImplementIListDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.CustomClassThatShouldImplementIListDoesSo);
            QUnit.test("IList - ArrayCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListGetItemWorks);
            QUnit.test("IList - ArrayCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListSetItemWorks);
            QUnit.test("IList - ArrayCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ArrayCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCopyToWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListCopyToWorks);
            QUnit.test("IReadOnlyCollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyCollection - ArrayImplementsIReadOnlyCollection", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayImplementsIReadOnlyCollection);
            QUnit.test("IReadOnlyCollection - CustomClassThatShouldImplementIReadOnlyCollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo);
            QUnit.test("IReadOnlyCollection - ArrayCastToIReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionCountWorks);
            QUnit.test("IReadOnlyCollection - ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks);
            QUnit.test("IReadOnlyCollection - ArrayCastToIReadOnlyCollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionContainsWorks);
            QUnit.test("IReadOnlyCollection - ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks);
            QUnit.test("IReadOnlyDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyDictionary - ClassImplementsInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ClassImplementsInterfaces);
            QUnit.test("IReadOnlyDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.CountWorks);
            QUnit.test("IReadOnlyDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.KeysWorks);
            QUnit.test("IReadOnlyDictionary - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.GetItemWorks);
            QUnit.test("IReadOnlyDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ValuesWorks);
            QUnit.test("IReadOnlyDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ContainsKeyWorks);
            QUnit.test("IReadOnlyDictionary - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.TryGetValueWorks);
            QUnit.test("IReadOnlyDictionary - UsersTestCase_1626_Works", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.UsersTestCase_1626_Works);
            QUnit.test("IReadOnlyList - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyList - CustomClassThatShouldImplementIReadOnlyListDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.CustomClassThatShouldImplementIReadOnlyListDoesSo);
            QUnit.test("IReadOnlyList - ArrayImplementsIReadOnlyList", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ArrayImplementsIReadOnlyList);
            QUnit.test("IReadOnlyList - ArrayCastToIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ArrayCastToIReadOnlyListGetItemWorks);
            QUnit.test("IReadOnlyList - ClassImplementingIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ClassImplementingIReadOnlyListGetItemWorks);
            QUnit.test("IReadOnlyList - ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554);
            QUnit.test("IteratorBlock - EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlock - ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554 Exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554);
            QUnit.test("IteratorBlock - EnumeratingIEnumerableIteratorToEndWorks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlock - ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554 exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlock - EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters);
            QUnit.test("IteratorBlock - DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals);
            QUnit.test("KeyValuePairTests - TheConstructorWithParametersCanBeUsed", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.TheConstructorWithParametersCanBeUsed);
            QUnit.test("KeyValuePairTests - TypeTestWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.TypeTestWorks);
            QUnit.test("KeyValuePairTests - TypeTestWorksGeneric_SPI_1556", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.TypeTestWorksGeneric_SPI_1556);
            QUnit.test("KeyValuePairTests - TheDefaultConstructorCanBeUsed_SPI_1556", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.TheDefaultConstructorCanBeUsed_SPI_1556);
            QUnit.test("KeyValuePairTests - CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556);
            QUnit.test("KeyValuePairTests - ActivatorCreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests.ActivatorCreateInstanceWorks);
            QUnit.test("List - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.TypePropertiesAreCorrect);
            QUnit.test("List - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.DefaultConstructorWorks);
            QUnit.test("List - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructorWithCapacityWorks);
            QUnit.test("List - ConstructingFromArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromArrayWorks);
            QUnit.test("List - ConstructingFromListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromListWorks);
            QUnit.test("List - ConstructingFromIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromIEnumerableWorks);
            QUnit.test("List - AsReadonlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.AsReadonlyWorks);
            QUnit.test("List - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CountWorks);
            QUnit.test("List - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexingWorks);
            QUnit.test("List - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWorks);
            QUnit.test("List - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.GetEnumeratorWorks);
            QUnit.test("List - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.AddWorks);
            QUnit.test("List - AddRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.AddRangeWorks);
            QUnit.test("List - BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch1Works);
            QUnit.test("List - BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch3Works);
            QUnit.test("List - BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch4Works);
            QUnit.test("List - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ClearWorks);
            QUnit.test("List - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConcatWorks);
            QUnit.test("List - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ContainsWorks);
            QUnit.test("List - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ContainsUsesEqualsMethod);
            QUnit.test("List - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodSameBound);
            QUnit.test("List - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodOffsetBound);
            QUnit.test("List - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodIllegalBound);
            QUnit.test("List - ForeachWithListItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWithListItemCallbackWorks);
            QUnit.test("List - IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithoutStartIndexWorks);
            QUnit.test("List - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("List - IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithStartIndexWorks);
            QUnit.test("List - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("List - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.InsertWorks);
            QUnit.test("List - InsertRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.InsertRangeWorks);
            QUnit.test("List - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveWorks);
            QUnit.test("List - RemoveReturnsFalseIfTheElementWasNotFound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveReturnsFalseIfTheElementWasNotFound);
            QUnit.test("List - RemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveCanRemoveNullItem);
            QUnit.test("List - RemoveCanRemoveNullItemFromEmptyList_N3149", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveCanRemoveNullItemFromEmptyList_N3149);
            QUnit.test("List - RemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveUsesEqualsMethod);
            QUnit.test("List - RemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveAtWorks);
            QUnit.test("List - TrueForAllWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.TrueForAllWorks);
            QUnit.test("List - FindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.FindWorks);
            QUnit.test("List - FindLastWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.FindLastWorks);
            QUnit.test("List - FindAllWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.FindAllWorks);
            QUnit.test("List - ExistsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ExistsWorks);
            QUnit.test("List - RemoveAllWorks_N3092", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveAllWorks_N3092);
            QUnit.test("List - RemoveRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveRangeWorks);
            QUnit.test("List - ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ReverseWorks);
            QUnit.test("List - SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithDefaultCompareWorks);
            QUnit.test("List - SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithCompareCallbackWorks);
            QUnit.test("List - SortWithIComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithIComparerWorks);
            QUnit.test("List - SortWithComparisonWorks_N3126", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithComparisonWorks_N3126);
            QUnit.test("List - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("List - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("List - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionCountWorks);
            QUnit.test("List - ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionAddWorks);
            QUnit.test("List - ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionClearWorks);
            QUnit.test("List - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionContainsWorks);
            QUnit.test("List - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("List - ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveWorks);
            QUnit.test("List - ICollectionRemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveCanRemoveNullItem);
            QUnit.test("List - ICollectionRemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveUsesEqualsMethod);
            QUnit.test("List - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexingWorks);
            QUnit.test("List - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexOfWorks);
            QUnit.test("List - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("List - IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListInsertWorks);
            QUnit.test("List - IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListRemoveAtWorks);
            QUnit.test("List - IListNonGenericAddWorks_N2925", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListNonGenericAddWorks_N2925);
            QUnit.test("List - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ToArrayWorks);
            QUnit.test("List - IReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyCollectionCountWorks);
            QUnit.test("List - IReadOnlyCollectionGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyCollectionGetEnumeratorWorks);
            QUnit.test("List - IReadOnlyListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListIndexingWorks);
            QUnit.test("List - IReadOnlyListCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListCountWorks);
            QUnit.test("List - IReadOnlyListGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListGetEnumeratorWorks);
            QUnit.test("Queue - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.TypePropertiesAreCorrect);
            QUnit.test("Queue - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.CountWorks);
            QUnit.test("Queue - EnqueueAndDequeueWork", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.EnqueueAndDequeueWork);
            QUnit.test("Queue - PeekWorks", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.PeekWorks);
            QUnit.test("Queue - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.ContainsWorks);
            QUnit.test("Queue - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.ContainsUsesEqualsMethod);
            QUnit.test("Queue - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests.ClearWorks);
            QUnit.test("ReadOnlyCollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.TypePropertiesAreCorrect);
            QUnit.test("ReadOnlyCollection - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ConstructorWorks);
            QUnit.test("ReadOnlyCollection - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CountWorks);
            QUnit.test("ReadOnlyCollection - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IndexingWorks);
            QUnit.test("ReadOnlyCollection - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ForeachWorks);
            QUnit.test("ReadOnlyCollection - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.GetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ContainsWorks);
            QUnit.test("ReadOnlyCollection - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionIllegalBound);
            QUnit.test("ReadOnlyCollection - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IndexOfWorks);
            QUnit.test("ReadOnlyCollection - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("ReadOnlyCollection - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionCountWorks);
            QUnit.test("ReadOnlyCollection - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionIsReadOnlyWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionContainsWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexingWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexOfWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIsReadOnlyWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyCollectionCountWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyCollectionGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyCollectionGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListIndexingWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListCountWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListGetEnumeratorWorks);
            QUnit.test("Stack - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.TypePropertiesAreCorrect);
            QUnit.test("Stack - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.DefaultConstructorWorks);
            QUnit.test("Stack - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ConstructorWithCapacityWorks);
            QUnit.test("Stack - ConstructingFromArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ConstructingFromArrayWorks);
            QUnit.test("Stack - ConstructingFromListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ConstructingFromListWorks);
            QUnit.test("Stack - ConstructingFromIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ConstructingFromIEnumerableWorks);
            QUnit.test("Stack - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.CountWorks);
            QUnit.test("Stack - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ForeachWorks);
            QUnit.test("Stack - PushWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.PushWorks);
            QUnit.test("Stack - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ClearWorks);
            QUnit.test("Stack - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ContainsWorks);
            QUnit.test("Stack - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ContainsUsesEqualsMethod);
            QUnit.test("Stack - ForeachWithListItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ForeachWithListItemCallbackWorks);
            QUnit.test("Stack - PopWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.PopWorks);
            QUnit.test("Stack - PeekWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.PeekWorks);
            QUnit.test("Stack - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StackTests.ToArrayWorks);
            QUnit.test("WeakMap - GettingSettingAndDeletingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests.GettingSettingAndDeletingWorks);
            QUnit.test("MultidimArray - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.TypePropertiesAreCorrect);
            QUnit.test("MultidimArray - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.LengthWorks);
            QUnit.test("MultidimArray - GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GettingValueByIndexWorks);
            QUnit.test("MultidimArray - GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWorks);
            QUnit.test("MultidimArray - GetValueWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWorksForUninitializedElement);
            QUnit.test("MultidimArray - GetValueByIndexWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueByIndexWorksForUninitializedElement);
            QUnit.test("MultidimArray - SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SettingValueByIndexWorks);
            QUnit.test("MultidimArray - SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SetValueWorks);
            QUnit.test("MultidimArray - GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetLengthWorks);
            QUnit.test("MultidimArray - GetLowerBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetLowerBoundWorks);
            QUnit.test("MultidimArray - GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetUpperBoundWorks);
            QUnit.test("MultidimArray - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.ForeachWorks);
            QUnit.test("MultidimArray - RankWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.RankWorks);
            QUnit.test("MultidimArray - GetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("MultidimArray - SetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("LinkedList_Generic_Tests_int - LinkedList_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable);
            QUnit.test("LinkedList_Generic_Tests_int - LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException);
            QUnit.test("LinkedList_Generic_Tests_int - AddAfter_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddAfter_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddAfter_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddAfter_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - AddAfter_LLNode_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddAfter_LLNode_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - AddBefore_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddBefore_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddBefore_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddBefore_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - AddBefore_LLNode_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddBefore_LLNode_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - AddFirst_T_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddFirst_T_Tests);
            QUnit.test("LinkedList_Generic_Tests_int - AddFirst_LinkedListNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddFirst_LinkedListNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddFirst_LinkedListNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddFirst_LinkedListNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - AddLast_T_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddLast_T_Tests);
            QUnit.test("LinkedList_Generic_Tests_int - AddLast_LinkedListNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddLast_LinkedListNode);
            QUnit.test("LinkedList_Generic_Tests_int - AddLast_LinkedListNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.AddLast_LinkedListNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - CtorTest", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.CtorTest);
            QUnit.test("LinkedList_Generic_Tests_int - Ctor_IEnumerableTest", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Ctor_IEnumerableTest);
            QUnit.test("LinkedList_Generic_Tests_int - Ctor_IEnumerableTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Ctor_IEnumerableTest_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - Find_T", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Find_T);
            QUnit.test("LinkedList_Generic_Tests_int - FindLast_T", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.FindLast_T);
            QUnit.test("LinkedList_Generic_Tests_int - Verify", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Verify);
            QUnit.test("LinkedList_Generic_Tests_int - RemoveFirst_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.RemoveFirst_Tests);
            QUnit.test("LinkedList_Generic_Tests_int - RemoveFirst_Tests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.RemoveFirst_Tests_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - RemoveLast_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.RemoveLast_Tests);
            QUnit.test("LinkedList_Generic_Tests_int - RemoveLast_Tests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.RemoveLast_Tests_Negative);
            QUnit.test("LinkedList_Generic_Tests_int - Remove_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Remove_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - Remove_Duplicates_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Remove_Duplicates_LLNode);
            QUnit.test("LinkedList_Generic_Tests_int - Remove_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int.Remove_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - LinkedList_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable);
            QUnit.test("LinkedList_Generic_Tests_string - LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException);
            QUnit.test("LinkedList_Generic_Tests_string - AddAfter_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddAfter_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddAfter_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddAfter_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - AddAfter_LLNode_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddAfter_LLNode_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - AddBefore_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddBefore_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddBefore_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddBefore_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - AddBefore_LLNode_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddBefore_LLNode_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - AddFirst_T_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddFirst_T_Tests);
            QUnit.test("LinkedList_Generic_Tests_string - AddFirst_LinkedListNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddFirst_LinkedListNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddFirst_LinkedListNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddFirst_LinkedListNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - AddLast_T_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddLast_T_Tests);
            QUnit.test("LinkedList_Generic_Tests_string - AddLast_LinkedListNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddLast_LinkedListNode);
            QUnit.test("LinkedList_Generic_Tests_string - AddLast_LinkedListNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.AddLast_LinkedListNode_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - CtorTest", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.CtorTest);
            QUnit.test("LinkedList_Generic_Tests_string - Ctor_IEnumerableTest", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Ctor_IEnumerableTest);
            QUnit.test("LinkedList_Generic_Tests_string - Ctor_IEnumerableTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Ctor_IEnumerableTest_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - Find_T", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Find_T);
            QUnit.test("LinkedList_Generic_Tests_string - FindLast_T", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.FindLast_T);
            QUnit.test("LinkedList_Generic_Tests_string - Verify", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Verify);
            QUnit.test("LinkedList_Generic_Tests_string - RemoveFirst_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.RemoveFirst_Tests);
            QUnit.test("LinkedList_Generic_Tests_string - RemoveFirst_Tests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.RemoveFirst_Tests_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - RemoveLast_Tests", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.RemoveLast_Tests);
            QUnit.test("LinkedList_Generic_Tests_string - RemoveLast_Tests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.RemoveLast_Tests_Negative);
            QUnit.test("LinkedList_Generic_Tests_string - Remove_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Remove_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - Remove_Duplicates_LLNode", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Remove_Duplicates_LLNode);
            QUnit.test("LinkedList_Generic_Tests_string - Remove_LLNode_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string.Remove_LLNode_Negative);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_EquatableBackwardsOrder - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups);
            QUnit.test("SortedSet_Generic_Tests_int - SortedSet_Generic_GetViewBetween_MinMax_Exhaustive", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax_Exhaustive);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_ModOfInt - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_int_With_NullComparer - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer.SetComparer_SetEqualsTests);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IComparer);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IEnumerable_Null", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_Null);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_MaxAndMin", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_MaxAndMin);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_GetViewBetween_EntireSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_EntireSet);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_GetViewBetween_MiddleOfSet", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_MiddleOfSet);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_GetViewBetween_Empty_MinMax", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_Empty_MinMax);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_RemoveWhere_AllElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_AllElements);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_RemoveWhere_NoElements", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NoElements);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_SetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_SetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_TestSubSetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_TestSubSetEnumerator);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_CopyTo_WithoutIndex", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithoutIndex);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_CopyTo_WithValidFullCount", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithValidFullCount);
            QUnit.test("SortedSet_Generic_Tests_string - SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException);
            QUnit.test("SortedSet_Generic_Tests_string - SetComparer_SetEqualsTests", Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string.SetComparer_SetEqualsTests);
            QUnit.module("Comparer");
            QUnit.test("TypePropertiesAreCorrect_SPI_1546", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.TypePropertiesAreCorrect_SPI_1546);
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.TypePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanOrderNumbers", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerCanOrderNumbers);
            QUnit.test("DefaultComparerCanOrderNullValues", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerCanOrderNullValues);
            QUnit.test("DefaultComparerUsesCompareMethodIfClassImplementsIComparable", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerUsesCompareMethodIfClassImplementsIComparable);
            QUnit.test("CreateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.CreateWorks);
            QUnit.module("Convention");
            QUnit.test("Convention.AssemblyAttribute - NotationTypeTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeTest);
            QUnit.test("Convention.AssemblyAttribute - NotationTypeClassOverrideTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeClassOverrideTest);
            QUnit.test("Convention.AssemblyAttribute - NotationTypeMemberOverrideTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeMemberOverrideTest);
            QUnit.test("Convention.AssemblyAttribute - NotationAccessibilityTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationAccessibilityTest);
            QUnit.test("Convention.ClassAttribute - AllTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.AllTest);
            QUnit.test("Convention.ClassAttribute - MembersTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.MembersTest);
            QUnit.test("Convention.ClassAttribute - ObjectLiteralTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ObjectLiteralTest);
            QUnit.test("Convention.ClassAttribute - InterfaceMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.InterfaceMemberTest);
            QUnit.test("Convention.ClassAttribute - InnerClassMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.InnerClassMemberTest);
            QUnit.test("Convention.ClassAttribute - ClassAttributeInheritanceTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ClassAttributeInheritanceTest);
            QUnit.test("Convention.ClassAttribute - OverrideMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.OverrideMemberTest);
            QUnit.test("Convention.ClassAttribute - NestedClassTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.NestedClassTest);
            QUnit.test("Convention.ClassAttribute - AccessibilityTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.AccessibilityTest);
            QUnit.test("Convention.ClassAttribute - ConstMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ConstMemberTest);
            QUnit.test("Convention.ClassAttribute - EventMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EventMemberTest);
            QUnit.test("Convention.ClassAttribute - EnumItemMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EnumItemMemberTest);
            QUnit.test("Convention.ClassAttribute - EnumTargetTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EnumTargetTest);
            QUnit.test("Convention.ClassAttribute - ExternalTargetTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ExternalTargetTest);
            QUnit.module("Convert");
            QUnit.test("Convert.FromBase64 - Roundtrip1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip1);
            QUnit.test("Convert.FromBase64 - Roundtrip2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip2);
            QUnit.test("Convert.FromBase64 - Roundtrip3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip3);
            QUnit.test("Convert.FromBase64 - EmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.EmptyString);
            QUnit.test("Convert.FromBase64 - ZeroLengthArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.ZeroLengthArray);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.PartialRoundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.PartialRoundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - ParseWithWhitespace", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.ParseWithWhitespace);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace2);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace3);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace4", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace4);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace5", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace5);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace6", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace6);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace7", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace7);
            QUnit.test("Convert.FromBase64 - RoundtripLargeString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripLargeString);
            QUnit.test("Convert.FromBase64 - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidOffset);
            QUnit.test("Convert.FromBase64 - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidLength);
            QUnit.test("Convert.FromBase64 - InvalidInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidInput);
            QUnit.test("Convert.FromBase64 - InvalidCharactersInInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidCharactersInInput);
            QUnit.test("Convert.FromBase64 - FromBase64StringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.FromBase64StringWorks);
            QUnit.test("Convert.ToDouble - TestBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest.TestBase);
            QUnit.test("Convert.ToDouble - TestTemperature", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest.TestTemperature);
            QUnit.test("Convert.ToDouble - ChangeTypeTest", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest.ChangeTypeTest);
            QUnit.test("Convert.ToDouble - ChangeTypeIdentity", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest.ChangeTypeIdentity);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ValidOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - ShortInputArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ShortInputArray);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ValidOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidInputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOutputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOutputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidInputLength);
            QUnit.test("Convert.ToBase64String - KnownByteSequence", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.KnownByteSequence);
            QUnit.test("Convert.ToBase64String - ZeroLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ZeroLength);
            QUnit.test("Convert.ToBase64String - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidInputBuffer);
            QUnit.test("Convert.ToBase64String - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidOffset);
            QUnit.test("Convert.ToBase64String - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidLength);
            QUnit.test("Convert.ToBase64String - ToBase64StringWithOnlyArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ToBase64StringWithOnlyArrayWorks);
            QUnit.test("Convert.ToBase64String - ToBase64StringWithArrayAndFormattingOptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ToBase64StringWithArrayAndFormattingOptionsWorks);
            QUnit.test("Convert.ToBase64String - ToBase64StringWithArrayAndOffsetAndLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthWorks);
            QUnit.test("Convert.ToBase64String - ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks);
            QUnit.test("Convert.ToString - FromBoxedObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromBoxedObject);
            QUnit.test("Convert.ToString - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromObject);
            QUnit.test("Convert.ToString - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDateTime);
            QUnit.test("Convert.ToString - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromChar);
            QUnit.test("Convert.ToString - FromByteBase2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase2);
            QUnit.test("Convert.ToString - FromByteBase8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase8);
            QUnit.test("Convert.ToString - FromByteBase10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase10);
            QUnit.test("Convert.ToString - FromByteBase16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase16);
            QUnit.test("Convert.ToString - FromByteInvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteInvalidBase);
            QUnit.test("Convert.ToString - FromInt16Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base2);
            QUnit.test("Convert.ToString - FromInt16Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base8);
            QUnit.test("Convert.ToString - FromInt16Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base10);
            QUnit.test("Convert.ToString - FromInt16Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base16);
            QUnit.test("Convert.ToString - FromInt16InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16InvalidBase);
            QUnit.test("Convert.ToString - FromInt32Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base2);
            QUnit.test("Convert.ToString - FromInt32Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base8);
            QUnit.test("Convert.ToString - FromInt32Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base10);
            QUnit.test("Convert.ToString - FromInt32Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base16);
            QUnit.test("Convert.ToString - FromInt32InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32InvalidBase);
            QUnit.test("Convert.ToString - FromInt64Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base2);
            QUnit.test("Convert.ToString - FromInt64Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base8);
            QUnit.test("Convert.ToString - FromInt64Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base10);
            QUnit.test("Convert.ToString - FromInt64Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base16);
            QUnit.test("Convert.ToString - FromInt64InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64InvalidBase);
            QUnit.test("Convert.ToString - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromBoolean);
            QUnit.test("Convert.ToString - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromSByte);
            QUnit.test("Convert.ToString - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByte);
            QUnit.test("Convert.ToString - FromInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Array);
            QUnit.test("Convert.ToString - FromUInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt16Array);
            QUnit.test("Convert.ToString - FromInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Array);
            QUnit.test("Convert.ToString - FromUInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt32Array);
            QUnit.test("Convert.ToString - FromInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Array);
            QUnit.test("Convert.ToString - FromUInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt64Array);
            QUnit.test("Convert.ToString - FromSingleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromSingleArray);
            QUnit.test("Convert.ToString - FromDoubleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDoubleArray);
            QUnit.test("Convert.ToString - FromDecimalArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDecimalArray);
            QUnit.test("Convert.ToString - FromDateTimeArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDateTimeArray);
            QUnit.test("Convert.ToString - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromString);
            QUnit.test("Convert.ToString - FromIFormattable", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromIFormattable);
            QUnit.test("Convert.ToString - FromNonIConvertible", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromNonIConvertible);
            QUnit.test("Convert.ToBoolean - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromBoolean);
            QUnit.test("Convert.ToBoolean - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromByte);
            QUnit.test("Convert.ToBoolean - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromDecimal);
            QUnit.test("Convert.ToBoolean - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromDouble);
            QUnit.test("Convert.ToBoolean - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt16);
            QUnit.test("Convert.ToBoolean - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt32);
            QUnit.test("Convert.ToBoolean - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt64);
            QUnit.test("Convert.ToBoolean - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromString);
            QUnit.test("Convert.ToBoolean - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromObject);
            QUnit.test("Convert.ToBoolean - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromSByte);
            QUnit.test("Convert.ToBoolean - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromSingle);
            QUnit.test("Convert.ToBoolean - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt16);
            QUnit.test("Convert.ToBoolean - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt32);
            QUnit.test("Convert.ToBoolean - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt64);
            QUnit.test("Convert.ToByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromBoolean);
            QUnit.test("Convert.ToByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromChar);
            QUnit.test("Convert.ToByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromDecimal);
            QUnit.test("Convert.ToByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromDouble);
            QUnit.test("Convert.ToByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt16);
            QUnit.test("Convert.ToByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt32);
            QUnit.test("Convert.ToByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt64);
            QUnit.test("Convert.ToByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromObject);
            QUnit.test("Convert.ToByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromSByte);
            QUnit.test("Convert.ToByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromSingle);
            QUnit.test("Convert.ToByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromString);
            QUnit.test("Convert.ToByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromStringWithBase);
            QUnit.test("Convert.ToByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt16);
            QUnit.test("Convert.ToByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt32);
            QUnit.test("Convert.ToByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt64);
            QUnit.test("Convert.ToChar - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromByte);
            QUnit.test("Convert.ToChar - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromChar);
            QUnit.test("Convert.ToChar - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDecimal);
            QUnit.test("Convert.ToChar - FromDecimalViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDecimalViaObject);
            QUnit.test("Convert.ToChar - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDouble);
            QUnit.test("Convert.ToChar - FromDoubleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDoubleViaObject);
            QUnit.test("Convert.ToChar - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt16);
            QUnit.test("Convert.ToChar - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt32);
            QUnit.test("Convert.ToChar - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt64);
            QUnit.test("Convert.ToChar - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromObject);
            QUnit.test("Convert.ToChar - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSByte);
            QUnit.test("Convert.ToChar - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSingle);
            QUnit.test("Convert.ToChar - FromSingleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSingleViaObject);
            QUnit.test("Convert.ToChar - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromString);
            QUnit.test("Convert.ToChar - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt16);
            QUnit.test("Convert.ToChar - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt32);
            QUnit.test("Convert.ToChar - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt64);
            QUnit.test("Convert.ToDateTime - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromString);
            QUnit.test("Convert.ToDateTime - FromStringWithCustomFormatProvider", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromStringWithCustomFormatProvider);
            QUnit.test("Convert.ToDateTime - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDateTime);
            QUnit.test("Convert.ToDateTime - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromObject);
            QUnit.test("Convert.ToDateTime - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromBoolean);
            QUnit.test("Convert.ToDateTime - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromChar);
            QUnit.test("Convert.ToDateTime - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt16);
            QUnit.test("Convert.ToDateTime - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt32);
            QUnit.test("Convert.ToDateTime - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt64);
            QUnit.test("Convert.ToDateTime - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt16);
            QUnit.test("Convert.ToDateTime - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt32);
            QUnit.test("Convert.ToDateTime - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt64);
            QUnit.test("Convert.ToDateTime - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromSingle);
            QUnit.test("Convert.ToDateTime - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDouble);
            QUnit.test("Convert.ToDateTime - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDecimal);
            QUnit.test("Convert.ToDecimal - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromBoolean);
            QUnit.test("Convert.ToDecimal - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromByte);
            QUnit.test("Convert.ToDecimal - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromDecimal);
            QUnit.test("Convert.ToDecimal - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromDouble);
            QUnit.test("Convert.ToDecimal - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt16);
            QUnit.test("Convert.ToDecimal - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt32);
            QUnit.test("Convert.ToDecimal - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt64);
            QUnit.test("Convert.ToDecimal - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromObject);
            QUnit.test("Convert.ToDecimal - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromSByte);
            QUnit.test("Convert.ToDecimal - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromSingle);
            QUnit.test("Convert.ToDecimal - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromString);
            QUnit.test("Convert.ToDecimal - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt16);
            QUnit.test("Convert.ToDecimal - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt32);
            QUnit.test("Convert.ToDecimal - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt64);
            QUnit.test("Convert.ToDouble - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromBoolean);
            QUnit.test("Convert.ToDouble - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromByte);
            QUnit.test("Convert.ToDouble - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromDecimal);
            QUnit.test("Convert.ToDouble - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromDouble);
            QUnit.test("Convert.ToDouble - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt16);
            QUnit.test("Convert.ToDouble - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt32);
            QUnit.test("Convert.ToDouble - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt64);
            QUnit.test("Convert.ToDouble - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromObject);
            QUnit.test("Convert.ToDouble - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromSByte);
            QUnit.test("Convert.ToDouble - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromSingle);
            QUnit.test("Convert.ToDouble - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromString);
            QUnit.test("Convert.ToDouble - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt16);
            QUnit.test("Convert.ToDouble - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt32);
            QUnit.test("Convert.ToDouble - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt64);
            QUnit.test("Convert.ToInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromBoolean);
            QUnit.test("Convert.ToInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromByte);
            QUnit.test("Convert.ToInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromChar);
            QUnit.test("Convert.ToInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromDecimal);
            QUnit.test("Convert.ToInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromDouble);
            QUnit.test("Convert.ToInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt16);
            QUnit.test("Convert.ToInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt32);
            QUnit.test("Convert.ToInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt64);
            QUnit.test("Convert.ToInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromObject);
            QUnit.test("Convert.ToInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromSByte);
            QUnit.test("Convert.ToInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromSingle);
            QUnit.test("Convert.ToInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromString);
            QUnit.test("Convert.ToInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt16);
            QUnit.test("Convert.ToInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt32);
            QUnit.test("Convert.ToInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt64);
            QUnit.test("Convert.ToInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromBoolean);
            QUnit.test("Convert.ToInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromByte);
            QUnit.test("Convert.ToInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromChar);
            QUnit.test("Convert.ToInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromDecimal);
            QUnit.test("Convert.ToInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromDouble);
            QUnit.test("Convert.ToInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt16);
            QUnit.test("Convert.ToInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt32);
            QUnit.test("Convert.ToInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt64);
            QUnit.test("Convert.ToInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromObject);
            QUnit.test("Convert.ToInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromSByte);
            QUnit.test("Convert.ToInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromSingle);
            QUnit.test("Convert.ToInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromString);
            QUnit.test("Convert.ToInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt16);
            QUnit.test("Convert.ToInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt32);
            QUnit.test("Convert.ToInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt64);
            QUnit.test("Convert.ToInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromBoolean);
            QUnit.test("Convert.ToInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromByte);
            QUnit.test("Convert.ToInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromChar);
            QUnit.test("Convert.ToInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromDecimal);
            QUnit.test("Convert.ToInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromDouble);
            QUnit.test("Convert.ToInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt16);
            QUnit.test("Convert.ToInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt32);
            QUnit.test("Convert.ToInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt64);
            QUnit.test("Convert.ToInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromObject);
            QUnit.test("Convert.ToInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromSByte);
            QUnit.test("Convert.ToInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromSingle);
            QUnit.test("Convert.ToInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromString);
            QUnit.test("Convert.ToInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt16);
            QUnit.test("Convert.ToInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt32);
            QUnit.test("Convert.ToInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt64);
            QUnit.test("Convert.ToSByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromBoolean);
            QUnit.test("Convert.ToSByte - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromByte);
            QUnit.test("Convert.ToSByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromChar);
            QUnit.test("Convert.ToSByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromDecimal);
            QUnit.test("Convert.ToSByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromDouble);
            QUnit.test("Convert.ToSByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt16);
            QUnit.test("Convert.ToSByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt32);
            QUnit.test("Convert.ToSByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt64);
            QUnit.test("Convert.ToSByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromObject);
            QUnit.test("Convert.ToSByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromSByte);
            QUnit.test("Convert.ToSByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromSingle);
            QUnit.test("Convert.ToSByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromString);
            QUnit.test("Convert.ToSByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromStringWithBase);
            QUnit.test("Convert.ToSByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt16);
            QUnit.test("Convert.ToSByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt32);
            QUnit.test("Convert.ToSByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt64);
            QUnit.test("Convert.ToSingle - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromBoolean);
            QUnit.test("Convert.ToSingle - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromByte);
            QUnit.test("Convert.ToSingle - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromDecimal);
            QUnit.test("Convert.ToSingle - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromDouble);
            QUnit.test("Convert.ToSingle - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt16);
            QUnit.test("Convert.ToSingle - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt32);
            QUnit.test("Convert.ToSingle - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt64);
            QUnit.test("Convert.ToSingle - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromObject);
            QUnit.test("Convert.ToSingle - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromSByte);
            QUnit.test("Convert.ToSingle - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromSingle);
            QUnit.test("Convert.ToSingle - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromString);
            QUnit.test("Convert.ToSingle - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt16);
            QUnit.test("Convert.ToSingle - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt32);
            QUnit.test("Convert.ToSingle - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt64);
            QUnit.test("Convert.ToUInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromBoolean);
            QUnit.test("Convert.ToUInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromByte);
            QUnit.test("Convert.ToUInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromChar);
            QUnit.test("Convert.ToUInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromDecimal);
            QUnit.test("Convert.ToUInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromDouble);
            QUnit.test("Convert.ToUInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt16);
            QUnit.test("Convert.ToUInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt32);
            QUnit.test("Convert.ToUInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt64);
            QUnit.test("Convert.ToUInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromObject);
            QUnit.test("Convert.ToUInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromSByte);
            QUnit.test("Convert.ToUInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromSingle);
            QUnit.test("Convert.ToUInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromString);
            QUnit.test("Convert.ToUInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt16);
            QUnit.test("Convert.ToUInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt32);
            QUnit.test("Convert.ToUInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt64);
            QUnit.test("Convert.ToUInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromBoolean);
            QUnit.test("Convert.ToUInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromByte);
            QUnit.test("Convert.ToUInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromChar);
            QUnit.test("Convert.ToUInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromDecimal);
            QUnit.test("Convert.ToUInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromDouble);
            QUnit.test("Convert.ToUInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt16);
            QUnit.test("Convert.ToUInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt32);
            QUnit.test("Convert.ToUInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt64);
            QUnit.test("Convert.ToUInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromObject);
            QUnit.test("Convert.ToUInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromSByte);
            QUnit.test("Convert.ToUInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromSingle);
            QUnit.test("Convert.ToUInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromString);
            QUnit.test("Convert.ToUInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt16);
            QUnit.test("Convert.ToUInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt32);
            QUnit.test("Convert.ToUInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt64);
            QUnit.test("Convert.ToUInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromBoolean);
            QUnit.test("Convert.ToUInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromByte);
            QUnit.test("Convert.ToUInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromChar);
            QUnit.test("Convert.ToUInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromDecimal);
            QUnit.test("Convert.ToUInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromDouble);
            QUnit.test("Convert.ToUInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt16);
            QUnit.test("Convert.ToUInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt32);
            QUnit.test("Convert.ToUInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt64);
            QUnit.test("Convert.ToUInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromObject);
            QUnit.test("Convert.ToUInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromSByte);
            QUnit.test("Convert.ToUInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromSingle);
            QUnit.test("Convert.ToUInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromString);
            QUnit.test("Convert.ToUInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt16);
            QUnit.test("Convert.ToUInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt32);
            QUnit.test("Convert.ToUInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt64);
            QUnit.module("Date and time");
            QUnit.test("DateTimeFormatInfo - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("DateTimeFormatInfo - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.GetFormatWorks);
            QUnit.test("DateTimeFormatInfo - InvariantWorks_SPI_1562", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.InvariantWorks_SPI_1562);
            QUnit.test("DateTime - TypePropertiesAreCorrect_SPI_1607_1608_1609", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TypePropertiesAreCorrect_SPI_1607_1608_1609);
            QUnit.test("DateTime - DefaultConstructorWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DefaultConstructorWorks_SPI_1606);
            QUnit.test("DateTime - DefaultValueWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DefaultValueWorks_SPI_1606);
            QUnit.test("DateTime - CreatingInstanceReturnsDateWithZeroValue_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CreatingInstanceReturnsDateWithZeroValue_SPI_1606);
            QUnit.test("DateTime - MillisecondSinceEpochConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MillisecondSinceEpochConstructorWorks);
            QUnit.test("DateTime - LongConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.LongConstructorWorks);
            QUnit.test("DateTime - LongConstructorUtcWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.LongConstructorUtcWorks);
            QUnit.test("DateTime - YMDConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDConstructorWorks);
            QUnit.test("DateTime - YMDHConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHConstructorWorks);
            QUnit.test("DateTime - YMDHConstructorUtcWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHConstructorUtcWorks);
            QUnit.test("DateTime - YMDHNConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNConstructorWorks);
            QUnit.test("DateTime - YMDHNConstructorUtcWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNConstructorUtcWorks);
            QUnit.test("DateTime - YMDHNSConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSConstructorWorks);
            QUnit.test("DateTime - YMDHNSConstructorUtcWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSConstructorUtcWorks);
            QUnit.test("DateTime - YMDHNSUConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSUConstructorWorks);
            QUnit.test("DateTime - YMDHNSUConstructorUtcWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSUConstructorUtcWorks);
            QUnit.test("DateTime - MinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MinWorks);
            QUnit.test("DateTime - MaxWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MaxWorks);
            QUnit.test("DateTime - NowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.NowWorks);
            QUnit.test("DateTime - UtcNowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.UtcNowWorks);
            QUnit.test("DateTime - ToUniversalWorksDoesNotDoubleCompute", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToUniversalWorksDoesNotDoubleCompute);
            QUnit.test("#2929 #2524 - ToUniversalTimeWorks_N2929_N2524", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToUniversalTimeWorks_N2929_N2524);
            QUnit.test("DateTime - ToLocalWorksDoesNotDoubleCompute", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToLocalWorksDoesNotDoubleCompute);
            QUnit.test("#2929 #2524 - ToLocalTimeWorks_N2929_N2524", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToLocalTimeWorks_N2929_N2524);
            QUnit.test("DateTime - TodayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TodayWorks);
            QUnit.test("DateTime - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.FormatWorks);
            QUnit.test("DateTime - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToStringWithFormatWorks);
            QUnit.test("DateTime - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("DateTime - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.IFormattableToStringWorks);
            QUnit.test("DateTime - LocaleFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.LocaleFormatWorks);
            QUnit.test("DateTime - GetFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetFullYearWorks);
            QUnit.test("DateTime - GetMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMonthWorks);
            QUnit.test("DateTime - GetDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetDateWorks);
            QUnit.test("DateTime - GetHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetHoursWorks);
            QUnit.test("DateTime - GetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMinutesWorks);
            QUnit.test("DateTime - GetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetSecondsWorks);
            QUnit.test("DateTime - GetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMillisecondsWorks);
            QUnit.test("DateTime - GetDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetDayWorks);
            QUnit.test("DateTime - TicksWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TicksWorks);
            QUnit.test("DateTime - GetUTCFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCFullYearWorks);
            QUnit.test("DateTime - GetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUtcMonthWorks);
            QUnit.test("DateTime - GetUTCDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCDateWorks);
            QUnit.test("DateTime - GetUTCHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCHoursWorks);
            QUnit.test("DateTime - GetUTCMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCMinutesWorks);
            QUnit.test("DateTime - GetUTCSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCSecondsWorks);
            QUnit.test("DateTime - GetUTCMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCMillisecondsWorks);
            QUnit.test("DateTime - GetUTCDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCDayWorks);
            QUnit.test("DateTime - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseWorks);
            QUnit.test("DateTime - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactWorks);
            QUnit.test("DateTime - ParseExactReturnsNullIfTheInputIsInvalid", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTime - ParseExactWithCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactWithCultureWorks);
            QUnit.test("DateTime - ParseExactWithCultureReturnsNullIfTheInputIsInvalid", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactWithCultureReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTime - SubtractingDatesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SubtractingDatesWorks);
            QUnit.test("DateTime - SubtractMethodReturningTimeSpanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SubtractMethodReturningTimeSpanWorks);
            QUnit.test("DateTime - DateEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateEqualityWorks);
            QUnit.test("DateTime - DateInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateInequalityWorks);
            QUnit.test("DateTime - DateLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateLessThanWorks);
            QUnit.test("DateTime - DateLessEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateLessEqualWorks);
            QUnit.test("DateTime - DateGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateGreaterThanWorks);
            QUnit.test("DateTime - DateGreaterEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateGreaterEqualWorks);
            QUnit.test("DateTime - DateTimeGreaterThanAndLessThanOperators_N3138", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateTimeGreaterThanAndLessThanOperators_N3138);
            QUnit.test("DateTime - DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138);
            QUnit.test("DateTime - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetHashCodeWorks);
            QUnit.test("DateTime - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.EqualsWorks);
            QUnit.test("DateTime - IEquatableEqualsWorks_SPI_1608", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.IEquatableEqualsWorks_SPI_1608);
            QUnit.test("DateTime - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.StaticEqualsWorks);
            QUnit.test("DateTime - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CompareToWorks);
            QUnit.test("DateTime - StaticCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.StaticCompareWorks);
            QUnit.test("DateTime - IComparableCompareToWorks_SPI_1609", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.IComparableCompareToWorks_SPI_1609);
            QUnit.test("DateTime - DatePropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DatePropertyWorks);
            QUnit.test("DateTime - DayPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DayPropertyWorks);
            QUnit.test("DateTime - DayOfWeekPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DayOfWeekPropertyWorks);
            QUnit.test("DateTime - DayOfYearPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DayOfYearPropertyWorks);
            QUnit.test("DateTime - HourPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.HourPropertyWorks);
            QUnit.test("DateTime - MillisecondPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MillisecondPropertyWorks);
            QUnit.test("DateTime - MinutePropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MinutePropertyWorks);
            QUnit.test("DateTime - MonthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MonthPropertyWorks);
            QUnit.test("DateTime - SecondPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SecondPropertyWorks);
            QUnit.test("DateTime - YearPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YearPropertyWorks);
            QUnit.test("DateTime - AddDaysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddDaysWorks);
            QUnit.test("#2967 - AddDaysForDSTWorks_N2967", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddDaysForDSTWorks_N2967);
            QUnit.test("DateTime - AddHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddHoursWorks);
            QUnit.test("DateTime - AddMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddMillisecondsWorks);
            QUnit.test("DateTime - AddMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddMinutesWorks);
            QUnit.test("DateTime - AddMonthsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddMonthsWorks);
            QUnit.test("#2542 - AddMonthsEdgeCasesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddMonthsEdgeCasesWorks);
            QUnit.test("DateTime - AddSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddSecondsWorks);
            QUnit.test("DateTime - AddYearsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddYearsWorks);
            QUnit.test("#2963 - AddYearsWorks_N2963", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.AddYearsWorks_N2963);
            QUnit.test("DateTime - DaysInMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DaysInMonthWorks);
            QUnit.test("DateTime - IsLeapYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.IsLeapYearWorks);
            QUnit.test("DateTime - SpecifyKindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SpecifyKindWorks);
            QUnit.test("DateTime - CreateUnixTimestampAndConvertBackToDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CreateUnixTimestampAndConvertBackToDateTime);
            QUnit.test("#2149 - ToShortDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToShortDateStringWorks);
            QUnit.test("#2149 - ToShortTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToShortTimeStringWorks);
            QUnit.test("TimeSpan - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("TimeSpan - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DefaultConstructorWorks);
            QUnit.test("TimeSpan - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DefaultValueWorks);
            QUnit.test("TimeSpan - ZeroWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ZeroWorks);
            QUnit.test("TimeSpan - CreatingInstanceReturnsTimeSpanWithZeroValue", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CreatingInstanceReturnsTimeSpanWithZeroValue);
            QUnit.test("TimeSpan - ParameterConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ParameterConstructorsWorks);
            QUnit.test("TimeSpan - FactoryMethodsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.FactoryMethodsWork);
            QUnit.test("TimeSpan - PropertiesWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.PropertiesWork);
            QUnit.test("TimeSpan - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CompareToWorks);
            QUnit.test("TimeSpan - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CompareWorks);
            QUnit.test("TimeSpan - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.StaticEqualsWorks);
            QUnit.test("TimeSpan - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.EqualsWorks);
            QUnit.test("TimeSpan - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.IEquatableEqualsWorks);
            QUnit.test("TimeSpan - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ToStringWorks);
            QUnit.test("TimeSpan - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.AddWorks);
            QUnit.test("TimeSpan - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.SubtractWorks);
            QUnit.test("TimeSpan - DurationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DurationWorks);
            QUnit.test("TimeSpan - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.NegateWorks);
            QUnit.test("TimeSpan - ComparisonOperatorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ComparisonOperatorsWork);
            QUnit.test("TimeSpan - AdditionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.AdditionOperatorWorks);
            QUnit.test("TimeSpan - SubtractionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.SubtractionOperatorWorks);
            QUnit.test("TimeSpan - UnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.UnaryPlusWorks);
            QUnit.test("TimeSpan - UnaryMinusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.UnaryMinusWorks);
            QUnit.test("TimeSpan - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ParseWorks);
            QUnit.module("Decimal Math");
            QUnit.test("TestSubtractOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestSubtractOperator);
            QUnit.test("TestRemainderOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestRemainderOperator);
            QUnit.test("TestMultiplyOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestMultiplyOperator);
            QUnit.test("TestDivideOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestDivideOperator);
            QUnit.test("TestAddOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestAddOperator);
            QUnit.test("TestAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestAddMethod);
            QUnit.test("TestDivideMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestDivideMethod);
            QUnit.test("TestMultiplyMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestMultiplyMethod);
            QUnit.test("TestRemainderMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestRemainderMethod);
            QUnit.test("TestSubtractMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestSubtractMethod);
            QUnit.test("TestCeilingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestCeilingMethod);
            QUnit.test("TestFloorMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestFloorMethod);
            QUnit.module("Delegate");
            QUnit.test("DelegateTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.TypePropertiesAreCorrect);
            QUnit.test("DelegateTests - CreatingAndInvokingADelegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CreatingAndInvokingADelegateWorks);
            QUnit.test("DelegateTests - CombineWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CombineWorks);
            QUnit.test("DelegateTests - CombineDoesAddsDuplicateDelegates", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CombineDoesAddsDuplicateDelegates);
            QUnit.test("DelegateTests - CombineDoesNotAffectOriginal_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CombineDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.AddWorks);
            QUnit.test("DelegateTests - AddAssignWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.AddAssignWorks);
            QUnit.test("DelegateTests - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.RemoveWorks);
            QUnit.test("DelegateTests - RemoveDoesNotAffectOriginal_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.RemoveDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - SubtractingDelegateFromItselfReturnsNull", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.SubtractingDelegateFromItselfReturnsNull);
            QUnit.test("DelegateTests - RemoveWorksWithMethodGroupConversion_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.RemoveWorksWithMethodGroupConversion_SPI_1563);
            QUnit.test("DelegateTests - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.SubtractWorks);
            QUnit.test("DelegateTests - SubtractAssignWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.SubtractAssignWorks);
            QUnit.test("DelegateTests - CloningDelegateToADifferentTypeIsANoOp", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CloningDelegateToADifferentTypeIsANoOp);
            QUnit.test("DelegateTests - CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563);
            QUnit.test("DelegateTests - EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForImportedFunction_SPI_1563", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.GetInvocationListWorksForImportedFunction_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForMulticastDelegate", Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests.GetInvocationListWorksForMulticastDelegate);
            QUnit.module("Diagnostics");
            QUnit.test("Contract - Assume", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Assume);
            QUnit.test("Contract - AssumeWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.AssumeWithUserMessage);
            QUnit.test("Contract - _Assert", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests._Assert);
            QUnit.test("Contract - AssertWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.AssertWithUserMessage);
            QUnit.test("Contract - Requires", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Requires);
            QUnit.test("Contract - RequiresWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiresWithUserMessage);
            QUnit.test("Contract - RequiresWithTypeException", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiresWithTypeException);
            QUnit.test("Contract - RequiredWithTypeExceptionAndUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiredWithTypeExceptionAndUserMessage);
            QUnit.test("Contract - ForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ForAll);
            QUnit.test("Contract - ForAllWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ForAllWithCollection);
            QUnit.test("Contract - Exists", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Exists);
            QUnit.test("Contract - ExistsWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ExistsWithCollection);
            QUnit.test("Stopwatch - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.TypePropertiesAreCorrect);
            QUnit.test("Stopwatch - GetTimestamp", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.GetTimestamp);
            QUnit.test("Stopwatch - ConstructStartAndStop", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ConstructStartAndStop);
            QUnit.test("Stopwatch - StartNewAndReset", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewAndReset);
            QUnit.test("Stopwatch - StartNewAndRestart", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewAndRestart);
            QUnit.test("Stopwatch - StopShouldContinue", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StopShouldContinue);
            QUnit.test("Stopwatch - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.DefaultConstructorWorks);
            QUnit.test("Stopwatch - ConstantsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ConstantsWorks);
            QUnit.test("Stopwatch - StartNewWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewWorks);
            QUnit.test("Stopwatch - StartAndStopWork", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartAndStopWork);
            QUnit.test("Stopwatch - ElapsedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ElapsedWorks);
            QUnit.test("Stopwatch - GetTimestampWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.GetTimestampWorks);
            QUnit.module("Encoding");
            QUnit.test("ASCIIEncoding - Decode", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingDecodeTests.Decode);
            QUnit.test("ASCIIEncoding - Decode_InvalidBytes", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingDecodeTests.Decode_InvalidBytes);
            QUnit.test("ASCIIEncoding - Encode", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingEncodeTests.Encode);
            QUnit.test("ASCIIEncoding - Encode_InvalidChars", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingEncodeTests.Encode_InvalidChars);
            QUnit.test("ASCIIEncoding - GetMaxByteCount", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingGetMaxTests.GetMaxByteCount);
            QUnit.test("ASCIIEncoding - GetMaxCharCount", Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingGetMaxTests.GetMaxCharCount);
            QUnit.test("UnicodeEncoding - Decode", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingDecodeTests.Decode);
            QUnit.test("UnicodeEncoding - Decode_InvalidBytes", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingDecodeTests.Decode_InvalidBytes);
            QUnit.test("UnicodeEncoding - Encode", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingEncodeTests.Encode);
            QUnit.test("UnicodeEncoding - Encode_InvalidChars", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingEncodeTests.Encode_InvalidChars);
            QUnit.test("UnicodeEncoding - GetMaxByteCount", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingGetMaxTests.GetMaxByteCount);
            QUnit.test("UnicodeEncoding - GetMaxCharCount", Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingGetMaxTests.GetMaxCharCount);
            QUnit.test("UTF32Encoding - Decode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingDecodeTests.Decode);
            QUnit.test("UTF32Encoding - Decode_InvalidBytes", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingDecodeTests.Decode_InvalidBytes);
            QUnit.test("UTF32Encoding - Encode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingEncodeTests.Encode);
            QUnit.test("UTF32Encoding - Encode_InvalidChars", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingEncodeTests.Encode_InvalidChars);
            QUnit.test("UTF32Encoding - GetMaxByteCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingGetMaxTests.GetMaxByteCount);
            QUnit.test("UTF32Encoding - GetMaxCharCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingGetMaxTests.GetMaxCharCount);
            QUnit.test("UTF7Encoding - Decode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingDecodeTests.Decode);
            QUnit.test("UTF7Encoding - Encode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingEncodeTests.Encode);
            QUnit.test("UTF7Encoding - EncodeAdvanced", Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingEncodeTests.EncodeAdvanced);
            QUnit.test("UTF7Encoding - GetMaxByteCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingGetMaxTests.GetMaxByteCount);
            QUnit.test("UTF7Encoding - GetMaxCharCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingGetMaxTests.GetMaxCharCount);
            QUnit.test("UTF8Encoding - Decode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingDecodeTests.Decode);
            QUnit.test("UTF8Encoding - Encode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests.Encode);
            QUnit.test("UTF8Encoding - GetBytes_ValidASCIIUnicode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests.GetBytes_ValidASCIIUnicode);
            QUnit.test("UTF8Encoding - GetBytes_InvalidASCIIUnicode", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests.GetBytes_InvalidASCIIUnicode);
            QUnit.test("UTF8Encoding - Encode_InvalidChars", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests.Encode_InvalidChars);
            QUnit.test("UTF8Encoding - GetMaxByteCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingGetMaxTests.GetMaxByteCount);
            QUnit.test("UTF8Encoding - GetMaxCharCount", Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingGetMaxTests.GetMaxCharCount);
            QUnit.module("Enum");
            QUnit.test("Enum - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TypePropertiesAreCorrect);
            QUnit.test("Enum - DefaultValueOfEnumClassIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultValueOfEnumClassIsNull);
            QUnit.test("Enum - DefaultValueOfEnumTypeIsFirstValue_SPI_1595", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultValueOfEnumTypeIsFirstValue_SPI_1595);
            QUnit.test("Enum - DefaultConstructorOfEnumTypeReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultConstructorOfEnumTypeReturnsZero);
            QUnit.test("Enum - DefaultConstructorOfEnumTypeReturnsZero_SPI_1595", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultConstructorOfEnumTypeReturnsZero_SPI_1595);
            QUnit.test("Enum - FirstValueOfEnumIsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.FirstValueOfEnumIsZero);
            QUnit.test("Enum - CreatingInstanceOfEnumTypeReturnsZero_SPI_1595", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.CreatingInstanceOfEnumTypeReturnsZero_SPI_1595);
            QUnit.test("Enum - DefaultExpressionWithEnumReturnsZero_SPI_1595", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultExpressionWithEnumReturnsZero_SPI_1595);
            QUnit.test("Enum - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.GetHashCodeWorks);
            QUnit.test("Enum - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.EqualsWorks);
            QUnit.test("Enum - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.ParseWorks);
            QUnit.test("Enum - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestParse);
            QUnit.test("Enum - TestParseIgnoreCase", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestParseIgnoreCase);
            QUnit.test("Enum - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestToString);
            QUnit.test("Enum - StaticToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.StaticToStringWorks);
            QUnit.test("Enum - ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596);
            QUnit.test("Enum - GetValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.GetValuesWorks);
            QUnit.test("Enum - TestGetValues", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestGetValues);
            QUnit.test("Enum - TestCompareTo", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestCompareTo);
            QUnit.test("Enum - TestFormat", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestFormat);
            QUnit.test("Enum - TestGetName", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestGetName);
            QUnit.test("Enum - TestGetNames", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestGetNames);
            QUnit.test("Enum - TestHasFlag", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestHasFlag);
            QUnit.test("Enum - TestIsDefined", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestIsDefined);
            QUnit.test("Enum - TestTryParse", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TestTryParse);
            QUnit.module("EqualityComparer");
            QUnit.test("TypePropertiesAreCorrect_SPI_1546", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.TypePropertiesAreCorrect_SPI_1546);
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.TypePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanGetHashCodeOfNumber", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerCanGetHashCodeOfNumber);
            QUnit.test("DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined);
            QUnit.test("DefaultComparerCanDetermineEquality", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerCanDetermineEquality);
            QUnit.test("DefaultComparerInvokesOverriddenGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerInvokesOverriddenGetHashCode);
            QUnit.test("DefaultComparerInvokesOverriddenEquals", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerInvokesOverriddenEquals);
            QUnit.module("Exceptions");
            QUnit.test("AggregateException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AggregateException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.DefaultConstructorWorks);
            QUnit.test("AggregateException - ConstructorWithIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithInnerExceptionArrayWorks);
            QUnit.test("AggregateException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageAndInnerExceptionArrayWorks);
            QUnit.test("AggregateException - FlattenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.FlattenWorks);
            QUnit.test("AmbiguousMatchException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AmbiguousMatchException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.DefaultConstructorWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameAndInnerExceptionWorks);
            QUnit.test("ArgumentNullException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentNullException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentNullException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndActualValueAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndActualValueAndMessageWorks);
            QUnit.test("ArithmeticException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArithmeticException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Try/Catch/Finally - ThrowingAndCatchingExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.ThrowingAndCatchingExceptionsWorks);
            QUnit.test("Try/Catch/Finally - ExceptionOfWrongTypeIsNotCaught", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.ExceptionOfWrongTypeIsNotCaught);
            QUnit.test("Try/Catch/Finally - CanCatchExceptionAsBaseType", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchExceptionAsBaseType);
            QUnit.test("Try/Catch/Finally - CanCatchStringAsException", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchStringAsException);
            QUnit.test("Exception - CanCatchStringAsCatchAll", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchStringAsCatchAll);
            QUnit.test("CultureNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("CultureNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.DefaultConstructorWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndParamNameWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureNameAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureNameAndMessage);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureIdAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureIdAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureIdAndMessage);
            QUnit.test("DivideByZeroException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("DivideByZeroException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.DefaultConstructorWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("Exception - DefaultConstructorWorks_SPI_1669", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.DefaultConstructorWorks_SPI_1669);
            QUnit.test("Exception - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("Exception - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - MessagePropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.MessagePropertyCanBeOverridden);
            QUnit.test("Exception - InnerExceptionPropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.InnerExceptionPropertyCanBeOverridden);
            QUnit.test("FormatException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("FormatException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.DefaultConstructorWorks);
            QUnit.test("FormatException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("FormatException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("IndexOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("IndexOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.DefaultConstructorWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidCastException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidCastException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidOperationException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidOperationException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("KeyNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("KeyNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.DefaultConstructorWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotImplementedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotImplementedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotSupportedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotSupportedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NullReferenceException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.DefaultConstructorWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("OperationCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OperationCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("OperationCanceledException - CancellationTokenOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.CancellationTokenOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndCancellationTokenConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndInnerExceptionAndCancellationTokenConstructorWorks);
            QUnit.test("OutOfMemoryException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OutOfMemoryException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.DefaultConstructorWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("OverflowException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OverflowException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.DefaultConstructorWorks);
            QUnit.test("OverflowException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("OverflowException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("PromiseException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("PromiseException - ArgumentsOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsOnlyConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsAndMessageConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsAndMessageAndInnerExceptionConstructorWorks);
            QUnit.test("RankException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("RankException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.DefaultConstructorWorks);
            QUnit.test("RankException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("RegexMatchTimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.DefaultConstructorWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithExceptionDetailsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithExceptionDetailsWorks);
            QUnit.test("SystemException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("SystemException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.DefaultConstructorWorks);
            QUnit.test("SystemException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("SystemException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("TaskCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("TaskCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("TaskCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - TaskOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.TaskOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("TimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("TimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.DefaultConstructorWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.module("Functions");
            QUnit.test("Arguments - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.LengthWorks);
            QUnit.test("Arguments - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.GetArgumentWorks);
            QUnit.test("Arguments - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.ToArrayWorks);
            QUnit.test("Arguments - ToArrayOfTWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.ToArrayOfTWorks);
            QUnit.test("Function - TestConstructorArgumentsBodyInOneParameter", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsBodyInOneParameter);
            QUnit.test("Function - TestConstructorArgumentsBodyInTwoParameters", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsBodyInTwoParameters);
            QUnit.test("Function - TestConstructorArgumentsInArray", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsInArray);
            QUnit.test("Mixin - TestGlobalMethods", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.TestGlobalMethods);
            QUnit.test("Mixin - TestMixin", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.TestMixin);
            QUnit.test("Mixin - TestMixin_N3156", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.TestMixin_N3156);
            QUnit.module("Guid");
            QUnit.test("Guid - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TypePropertiesAreCorrect);
            QUnit.test("Guid - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.DefaultValueWorks);
            QUnit.test("Guid - CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.CreateInstanceWorks);
            QUnit.test("Guid - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.DefaultConstructorWorks);
            QUnit.test("Guid - EmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EmptyWorks);
            QUnit.test("Guid - ToStringWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToStringWithoutArgumentsWorks);
            QUnit.test("Guid - ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ByteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.Int32Int16Int16ByteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.Int32Int16Int16BytesConstructorWorks);
            QUnit.test("Guid - UInt32UInt16UInt16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.UInt32UInt16UInt16BytesConstructorWorks);
            QUnit.test("Guid - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.StringConstructorWorks);
            QUnit.test("Guid - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ParseWorks);
            QUnit.test("Guid - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ParseExactWorks);
            QUnit.test("Guid - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TryParseWorks);
            QUnit.test("Guid - TryParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TryParseExactWorks);
            QUnit.test("Guid - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.CompareToWorks);
            QUnit.test("Guid - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.IComparableCompareToWorks);
            QUnit.test("Guid - EqualsObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualsObjectWorks);
            QUnit.test("Guid - EqualsGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualsGuidWorks);
            QUnit.test("Guid - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.IEquatableEqualsWorks);
            QUnit.test("Guid - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.GetHashCodeWorks);
            QUnit.test("Guid - EqualityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualityOperatorWorks);
            QUnit.test("Guid - InequalityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.InequalityOperatorWorks);
            QUnit.test("Guid - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToStringWithFormatWorks);
            QUnit.test("Guid - NewGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.NewGuidWorks);
            QUnit.test("Guid - ToByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToByteArrayWorks);
            QUnit.module("HTML5");
            QUnit.test("DOMParser #1728 - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.ConstructorWorks);
            QUnit.test("DOMParser #1728 - XmlParsingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.XmlParsingWorks);
            QUnit.test("DOMParser #1728 - XmlParsingShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.XmlParsingShouldThrow);
            QUnit.test("JSON - NonGenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks);
            QUnit.test("JSON - GenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks);
            QUnit.test("JSON - NonGenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks);
            QUnit.test("JSON - GenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks);
            QUnit.test("JSON - NonGenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks3);
            QUnit.test("JSON - GenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks3);
            QUnit.test("JSON - NonGenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks3);
            QUnit.test("JSON - GenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks3);
            QUnit.test("JSON - NonGenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks4);
            QUnit.test("JSON - GenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks4);
            QUnit.test("JSON - NonGenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks4);
            QUnit.test("JSON - GenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks4);
            QUnit.test("JSON - StringifyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWorks);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks);
            QUnit.test("JSON - StringifyWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks);
            QUnit.test("JSON - StringifyWithCallbackAndIndentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks);
            QUnit.test("JSON - StringifyWithCallbackAndIndentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks3);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks3);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks3);
            QUnit.test("JSON - StringifyWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks3);
            QUnit.test("JSON - StringifyWithCallbackAndIndentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks3);
            QUnit.test("JSON - StringifyWithCallbackAndIndentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks3);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks4);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks4);
            QUnit.test("JSON - StringifyWithSerializableMembersArrayAndIntentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks4);
            QUnit.test("JSON - StringifyWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks4);
            QUnit.test("JSON - StringifyWithCallbackAndIndentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks4);
            QUnit.test("JSON - StringifyWithCallbackAndIndentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks4);
            QUnit.test("MutationObserver - TestNewlyAttachedElements", Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests.TestNewlyAttachedElements);
            QUnit.test("Date - TypePropertiesAreCorrect_SPI_1608_1609", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.TypePropertiesAreCorrect_SPI_1608_1609);
            QUnit.test("Date - DefaultConstructorReturnsTodaysDate", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DefaultConstructorReturnsTodaysDate);
            QUnit.test("Date - CreatingInstanceReturnsTodaysDate_SPI_1604", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.CreatingInstanceReturnsTodaysDate_SPI_1604);
            QUnit.test("Date - MillisecondSinceEpochConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.MillisecondSinceEpochConstructorWorks);
            QUnit.test("Date - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.StringConstructorWorks);
            QUnit.test("Date - YMDConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.YMDConstructorWorks);
            QUnit.test("Date - YMDHConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.YMDHConstructorWorks);
            QUnit.test("Date - YMDHNConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.YMDHNConstructorWorks);
            QUnit.test("Date - YMDHNSConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.YMDHNSConstructorWorks);
            QUnit.test("Date - YMDHNSUConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.YMDHNSUConstructorWorks);
            QUnit.test("Date - NowWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.NowWorks_SPI_1624);
            QUnit.test("Date - GetFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetFullYearWorks);
            QUnit.test("Date - GetMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetMonthWorks);
            QUnit.test("Date - GetDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetDateWorks);
            QUnit.test("Date - GetHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetHoursWorks);
            QUnit.test("Date - GetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetMinutesWorks);
            QUnit.test("Date - GetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetSecondsWorks);
            QUnit.test("Date - GetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetMillisecondsWorks);
            QUnit.test("Date - GetDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetDayWorks);
            QUnit.test("Date - GetTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetTimeWorks);
            QUnit.test("Date - ValueOfWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ValueOfWorks_SPI_1624);
            QUnit.test("Date - GetTimezoneOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetTimezoneOffsetWorks);
            QUnit.test("Date - GetUtcFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcFullYearWorks);
            QUnit.test("Date - GetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcMonthWorks);
            QUnit.test("Date - GetUtcHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcHoursWorks);
            QUnit.test("Date - GetUtcMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcMinutesWorks);
            QUnit.test("Date - GetUtcSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcSecondsWorks);
            QUnit.test("Date - GetUtcMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetUtcMillisecondsWorks);
            QUnit.test("Date - ParseWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ParseWorks_SPI_1624);
            QUnit.test("Date - ToLocaleDateStringIsWorking_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToLocaleDateStringIsWorking_1624);
            QUnit.test("Date - ToDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToDateStringWorks);
            QUnit.test("Date - ToTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToTimeStringWorks);
            QUnit.test("Date - ToUtcStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToUtcStringWorks);
            QUnit.test("Date - ToLocaleDateStringWorks_SPI_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToLocaleDateStringWorks_SPI_1624);
            QUnit.test("Date - DateUTCIsWorking_SPI_1624", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateUTCIsWorking_SPI_1624);
            QUnit.test("Date - ToLocaleTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.ToLocaleTimeStringWorks);
            QUnit.test("Date - SubtractingDatesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SubtractingDatesWorks);
            QUnit.test("Date - DateEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateEqualityWorks);
            QUnit.test("Date - DateInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateInequalityWorks);
            QUnit.test("Date - DateLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateLessThanWorks);
            QUnit.test("Date - DateLessEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateLessEqualWorks);
            QUnit.test("Date - DateGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateGreaterThanWorks);
            QUnit.test("Date - DateGreaterEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.DateGreaterEqualWorks);
            QUnit.test("Date - SetFullYearWithOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetFullYearWithOneParameterWorks);
            QUnit.test("Date - SetFullYearWithTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetFullYearWithTwoParametersWorks);
            QUnit.test("Date - SetFullYearWithThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetFullYearWithThreeParametersWorks);
            QUnit.test("Date - SetMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetMonthWorks);
            QUnit.test("Date - SetDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetDateWorks);
            QUnit.test("Date - SetHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetHoursWorks);
            QUnit.test("Date - SetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetMinutesWorks);
            QUnit.test("Date - SetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetSecondsWorks);
            QUnit.test("Date - SetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetMillisecondsWorks);
            QUnit.test("Date - SetTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetTimeWorks);
            QUnit.test("Date - SetTimeAsDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetTimeAsDoubleWorks);
            QUnit.test("Date - SetUtcFullYearWithOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcFullYearWithOneParameterWorks);
            QUnit.test("Date - SetUtcFullYearWithTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcFullYearWithTwoParametersWorks);
            QUnit.test("Date - SetUtcFullYearWithThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcFullYearWithThreeParametersWorks);
            QUnit.test("Date - SetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcMonthWorks);
            QUnit.test("Date - SetUtcDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcDateWorks);
            QUnit.test("Date - SetUtcHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcHoursWorks);
            QUnit.test("Date - SetUtcMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcMinutesWorks);
            QUnit.test("Date - SetUtcSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcSecondsWorks);
            QUnit.test("Date - SetUtcMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.SetUtcMillisecondsWorks);
            QUnit.test("Date - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.GetHashCodeWorks);
            QUnit.test("Date - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTests.EqualsWorks);
            QUnit.test("String - CharAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.CharAtWorks);
            QUnit.test("String - CharCodeAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.CharCodeAtWorks);
            QUnit.test("String - FromCharCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.FromCharCodeWorks);
            QUnit.test("String - LocaleCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.LocaleCompareWorks);
            QUnit.test("String - SliceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SliceWorks);
            QUnit.test("String - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithCharWorks);
            QUnit.test("String - SplitWithLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithLimitWorks);
            QUnit.test("String - SplitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWorks);
            QUnit.test("String - SplitWithCharAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithCharAndLimitWorks);
            QUnit.test("String - SplitWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithStringWorks);
            QUnit.test("String - JsSplitWithStringAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.JsSplitWithStringAndLimitWorks);
            QUnit.test("String - SubstrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SubstrWorks);
            QUnit.test("String - JavaScriptSubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.JavaScriptSubstringWorks);
            QUnit.test("String - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.Strings);
            QUnit.module("IO");
            QUnit.test("BaseStream - GetBaseStream", Bridge.Test.Runtime.BridgeClientTestRunner.BaseStream.GetBaseStream);
            QUnit.test("BinaryReaderTests - BinaryReader_DisposeTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests.BinaryReader_DisposeTests);
            QUnit.test("BinaryReaderTests - BinaryReader_CloseTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests.BinaryReader_CloseTests);
            QUnit.test("BinaryReaderTests - BinaryReader_DisposeTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests.BinaryReader_DisposeTests_Negative);
            QUnit.test("BinaryReaderTests - BinaryReader_CloseTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests.BinaryReader_CloseTests_Negative);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest_Negative);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteByteTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteByteTest);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteSByteTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteSByteTest_NegativeCase", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest_NegativeCase);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteBArrayTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteBArrayTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest_Negative);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteBArrayTest2", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest2);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharArrayTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharArrayTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest_Negative);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharArrayTest2", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest2);
            QUnit.test("BinaryWriter_WriteByteCharTests - BinaryWriter_WriteCharArrayTest3", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest3);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteBoolTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteBoolTest);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteDecimalTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteDecimalTest);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteDoubleTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteDoubleTest);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteInt16Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteInt16Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteInt32Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteInt32Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteInt64Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteInt64Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteUInt16Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteUInt16Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteUInt32Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteUInt32Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteUInt64Test", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteUInt64Test);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteStringTest", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteStringTest);
            QUnit.test("BinaryWriter_WriteTests - BinaryWriter_WriteStringTest_Null", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests.BinaryWriter_WriteStringTest_Null);
            QUnit.test("BinaryWriterTests - BinaryWriter_CtorAndWriteTests1", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_CtorAndWriteTests1);
            QUnit.test("BinaryWriterTests - BinaryWriter_CtorAndWriteTests1_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_CtorAndWriteTests1_Negative);
            QUnit.test("BinaryWriterTests - BinaryWriter_EncodingCtorAndWriteTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_EncodingCtorAndWriteTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests_Negative);
            QUnit.test("BinaryWriterTests - BinaryWriter_SeekTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_SeekTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_SeekTests_NegativeOffset", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_SeekTests_NegativeOffset);
            QUnit.test("BinaryWriterTests - BinaryWriter_SeekTests_InvalidSeekOrigin", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_SeekTests_InvalidSeekOrigin);
            QUnit.test("BinaryWriterTests - BinaryWriter_BaseStreamTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_BaseStreamTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_FlushTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_FlushTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_DisposeTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_DisposeTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_CloseTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_CloseTests);
            QUnit.test("BinaryWriterTests - BinaryWriter_DisposeTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_DisposeTests_Negative);
            QUnit.test("BinaryWriterTests - BinaryWriter_CloseTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests.BinaryWriter_CloseTests_Negative);
            QUnit.test("BufferedStream_InvalidParameters - NullConstructor_Throws_ArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.NullConstructor_Throws_ArgumentNullException);
            QUnit.test("BufferedStream_InvalidParameters - NegativeBufferSize_Throws_ArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.NegativeBufferSize_Throws_ArgumentOutOfRangeException);
            QUnit.test("BufferedStream_InvalidParameters - ZeroBufferSize_Throws_ArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.ZeroBufferSize_Throws_ArgumentNullException);
            QUnit.test("BufferedStream_InvalidParameters - UnderlyingStreamDisposed_Throws_ObjectDisposedException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.UnderlyingStreamDisposed_Throws_ObjectDisposedException);
            QUnit.test("BufferedStream_InvalidParameters - SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException);
            QUnit.test("BufferedStream_InvalidParameters - Read_Arguments", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.Read_Arguments);
            QUnit.test("BufferedStream_InvalidParameters - Write_Arguments", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.Write_Arguments);
            QUnit.test("BufferedStream_InvalidParameters - SetLength_NegativeValue", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.SetLength_NegativeValue);
            QUnit.test("BufferedStream_InvalidParameters - ReadOnUnreadableStream_Throws_NotSupportedException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.ReadOnUnreadableStream_Throws_NotSupportedException);
            QUnit.test("BufferedStream_InvalidParameters - WriteOnUnwritableStream_Throws_NotSupportedException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.WriteOnUnwritableStream_Throws_NotSupportedException);
            QUnit.test("BufferedStream_InvalidParameters - SeekOnUnseekableStream_Throws_NotSupportedException", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.SeekOnUnseekableStream_Throws_NotSupportedException);
            QUnit.test("BufferedStream_InvalidParameters - CopyTo_InvalidArguments_Throws", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters.CopyTo_InvalidArguments_Throws);
            QUnit.test("BufferedStream_Stream - CopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream.CopyToTest);
            QUnit.test("BufferedStream_Stream - UnderlyingStreamThrowsExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream.UnderlyingStreamThrowsExceptions);
            QUnit.test("BufferedStream_Stream - CopyToTest_RequiresFlushingOfWrites", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream.CopyToTest_RequiresFlushingOfWrites);
            QUnit.test("BufferedStream_Stream - CopyToTest_ReadBeforeCopy_CopiesAllData", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream.CopyToTest_ReadBeforeCopy_CopiesAllData);
            QUnit.test("StreamMethods - Synchronized_NewObject", Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods.Synchronized_NewObject);
            QUnit.test("StreamMethods - MemoryStreamSeekStress", Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods.MemoryStreamSeekStress);
            QUnit.test("StreamMethods - MemoryStreamSeekStressWithInitialBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods.MemoryStreamSeekStressWithInitialBuffer);
            QUnit.test("StreamMethods - MemoryStreamStress", Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods.MemoryStreamStress);
            QUnit.test("StreamMethods - FlushAsyncTest", Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods.FlushAsyncTest);
            QUnit.test("TestLeaveOpen - StreamReaderTest", Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen.StreamReaderTest);
            QUnit.test("TestLeaveOpen - BinaryReaderTest", Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen.BinaryReaderTest);
            QUnit.test("TestLeaveOpen - StreamWriterTest", Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen.StreamWriterTest);
            QUnit.test("TestLeaveOpen - BinaryWriterTest", Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen.BinaryWriterTest);
            QUnit.test("BufferedStreamFlushTests - ShouldNotFlushUnderlyingStreamIfReadOnly", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStreamFlushTests.ShouldNotFlushUnderlyingStreamIfReadOnly);
            QUnit.test("BufferedStreamFlushTests - ShouldAlwaysFlushUnderlyingStreamIfWritable", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStreamFlushTests.ShouldAlwaysFlushUnderlyingStreamIfWritable);
            QUnit.test("CloseTests - AfterDisposeThrows", Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests.AfterDisposeThrows);
            QUnit.test("CloseTests - AfterCloseThrows", Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests.AfterCloseThrows);
            QUnit.test("CloseTests - CloseCausesFlush", Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests.CloseCausesFlush);
            QUnit.test("CloseTests - CantFlushAfterDispose", Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests.CantFlushAfterDispose);
            QUnit.test("CloseTests - CantFlushAfterClose", Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests.CantFlushAfterClose);
            QUnit.test("CtorTests - CreateStreamWriter", Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests.CreateStreamWriter);
            QUnit.test("CtorTests - NullEncodingThrows", Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests.NullEncodingThrows);
            QUnit.test("CtorTests - UTF8Encoding", Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests.UTF8Encoding);
            QUnit.test("CtorTests - BigEndianUnicodeEncoding", Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests.BigEndianUnicodeEncoding);
            QUnit.test("CtorTests - UnicodeEncoding", Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests.UnicodeEncoding);
            QUnit.test("FlushTests - AutoFlushSetTrue", Bridge.Test.Runtime.BridgeClientTestRunner.FlushTests.AutoFlushSetTrue);
            QUnit.test("FlushTests - AutoFlushSetFalse", Bridge.Test.Runtime.BridgeClientTestRunner.FlushTests.AutoFlushSetFalse);
            QUnit.test("MemoryStream_ConstructorTests - MemoryStream_Ctor_NegativeIndeces", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests.MemoryStream_Ctor_NegativeIndeces);
            QUnit.test("MemoryStream_ConstructorTests - MemoryStream_Ctor_OutOfRangeIndeces", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests.MemoryStream_Ctor_OutOfRangeIndeces);
            QUnit.test("MemoryStream_ConstructorTests - MemoryStream_Ctor_NullArray", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests.MemoryStream_Ctor_NullArray);
            QUnit.test("MemoryStream_ConstructorTests - MemoryStream_Ctor_InvalidCapacities", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests.MemoryStream_Ctor_InvalidCapacities);
            QUnit.test("MemoryStream_GetBufferTests - MemoryStream_GetBuffer_Length", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Length);
            QUnit.test("MemoryStream_GetBufferTests - MemoryStream_GetBuffer_NonExposable", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests.MemoryStream_GetBuffer_NonExposable);
            QUnit.test("MemoryStream_GetBufferTests - MemoryStream_GetBuffer_Exposable", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Exposable);
            QUnit.test("MemoryStream_GetBufferTests - MemoryStream_GetBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests.MemoryStream_GetBuffer);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_AlwaysReturnsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsTrue);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ReturnsArray", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsArray);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_MultipleCallsReturnsSameArray", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_MultipleCallsReturnsSameArray);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_WhenDisposed_ReturnsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsTrue);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_WhenDisposed_ReturnsCountSetToCount", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsCountSetToCount);
            QUnit.test("MemoryStream_TryGetBufferTests - TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer);
            QUnit.test("MemoryStreamTests - MemoryStream_Write_BeyondCapacity", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_Write_BeyondCapacity);
            QUnit.test("MemoryStreamTests - MemoryStream_WriteByte_BeyondCapacity", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_WriteByte_BeyondCapacity);
            QUnit.test("MemoryStreamTests - MemoryStream_GetPositionTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_GetPositionTest_Negative);
            QUnit.test("MemoryStreamTests - MemoryStream_LengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_LengthTest);
            QUnit.test("MemoryStreamTests - MemoryStream_LengthTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_LengthTest_Negative);
            QUnit.test("MemoryStreamTests - MemoryStream_ReadTest_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_ReadTest_Negative);
            QUnit.test("MemoryStreamTests - MemoryStream_WriteToTests", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_WriteToTests);
            QUnit.test("MemoryStreamTests - MemoryStream_WriteToTests_Negative", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_WriteToTests_Negative);
            QUnit.test("MemoryStreamTests - MemoryStream_CopyTo_Invalid", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.MemoryStream_CopyTo_Invalid);
            QUnit.test("MemoryStreamTests - CopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests.CopyTo);
            QUnit.test("NullTests - TestNullStream_Flush", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_Flush);
            QUnit.test("NullTests - TestNullStream_Dispose", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_Dispose);
            QUnit.test("NullTests - TestNullStream_CopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_CopyTo);
            QUnit.test("NullTests - TestNullStream_CopyToAsyncValidation", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_CopyToAsyncValidation);
            QUnit.test("NullTests - TestNullStream_Read", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_Read);
            QUnit.test("NullTests - TestNullStream_ReadByte", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_ReadByte);
            QUnit.test("NullTests - TestNullStream_Write", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_Write);
            QUnit.test("NullTests - TestNullStream_WriteByte", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullStream_WriteByte);
            QUnit.test("NullTests - TestNullTextReader", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TestNullTextReader);
            QUnit.test("NullTests - TextNullTextWriter", Bridge.Test.Runtime.BridgeClientTestRunner.NullTests.TextNullTextWriter);
            QUnit.test("ReaderTests - StringReaderWithNullString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.StringReaderWithNullString);
            QUnit.test("ReaderTests - StringReaderWithEmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.StringReaderWithEmptyString);
            QUnit.test("ReaderTests - StringReaderWithGenericString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.StringReaderWithGenericString);
            QUnit.test("ReaderTests - ReadEmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadEmptyString);
            QUnit.test("ReaderTests - ReadString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadString);
            QUnit.test("ReaderTests - ReadLine", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadLine);
            QUnit.test("ReaderTests - ReadPseudoRandomString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadPseudoRandomString);
            QUnit.test("ReaderTests - PeekEmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.PeekEmptyString);
            QUnit.test("ReaderTests - PeekString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.PeekString);
            QUnit.test("ReaderTests - PeekPseudoRandomString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.PeekPseudoRandomString);
            QUnit.test("ReaderTests - ReadToEndEmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadToEndEmptyString);
            QUnit.test("ReaderTests - ReadToEndString", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadToEndString);
            QUnit.test("ReaderTests - ReadToEndPseudoRandom", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.ReadToEndPseudoRandom);
            QUnit.test("ReaderTests - Closed_DisposedExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.Closed_DisposedExceptions);
            QUnit.test("ReaderTests - Disposed_DisposedExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests.Disposed_DisposedExceptions);
            QUnit.test("StreamAPMTests - BeginEndReadTest", Bridge.Test.Runtime.BridgeClientTestRunner.StreamAPMTests.BeginEndReadTest);
            QUnit.test("StreamAPMTests - BeginEndWriteTest", Bridge.Test.Runtime.BridgeClientTestRunner.StreamAPMTests.BeginEndWriteTest);
            QUnit.test("StreamCopyToTests - IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled);
            QUnit.test("StreamCopyToTests - AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled);
            QUnit.test("StreamCopyToTests - IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce);
            QUnit.test("StreamCopyToTests - AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce);
            QUnit.test("StreamCopyToTests - IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize);
            QUnit.test("StreamCopyToTests - IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive);
            QUnit.test("StreamCopyToTests - IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally", Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests.IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally);
            QUnit.test("StreamReader_ctorTests - StreamReaderNullPath", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests.StreamReaderNullPath);
            QUnit.test("StreamReader_ctorTests - InputStreamClosed", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests.InputStreamClosed);
            QUnit.test("StreamReader_ctorTests - CreationFromMemoryStreamWithEncodingFalse", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingFalse);
            QUnit.test("StreamReader_ctorTests - CreationFromMemoryStreamWithEncodingTrue", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingTrue);
            QUnit.test("StreamReader_ctorTests - NullArgs_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests.NullArgs_ThrowsArgumentNullException);
            QUnit.test("StreamReader_ctorTests - EmptyPath_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests.EmptyPath_ThrowsArgumentException);
            QUnit.test("StreamReader_ctorTests - NegativeBufferSize_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException);
            QUnit.test("StreamReaderTests - ObjectClosedReadLine", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectClosedReadLine);
            QUnit.test("StreamReaderTests - ObjectClosedReadLineBaseStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectClosedReadLineBaseStream);
            QUnit.test("StreamReaderTests - Synchronized_NewObject", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.Synchronized_NewObject);
            QUnit.test("StreamReaderTests - EndOfStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.EndOfStream);
            QUnit.test("StreamReaderTests - EndOfStreamSmallDataLargeBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.EndOfStreamSmallDataLargeBuffer);
            QUnit.test("StreamReaderTests - EndOfStreamLargeDataSmallBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.EndOfStreamLargeDataSmallBuffer);
            QUnit.test("StreamReaderTests - EndOfStreamLargeDataLargeBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.EndOfStreamLargeDataLargeBuffer);
            QUnit.test("StreamReaderTests - ReadToEnd", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ReadToEnd);
            QUnit.test("StreamReaderTests - GetBaseStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.GetBaseStream);
            QUnit.test("StreamReaderTests - TestRead", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.TestRead);
            QUnit.test("StreamReaderTests - TestPeek", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.TestPeek);
            QUnit.test("StreamReaderTests - ArgumentNullOnNullArray", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ArgumentNullOnNullArray);
            QUnit.test("StreamReaderTests - ArgumentOutOfRangeOnInvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ArgumentOutOfRangeOnInvalidOffset);
            QUnit.test("StreamReaderTests - ArgumentOutOfRangeOnNegativCount", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ArgumentOutOfRangeOnNegativCount);
            QUnit.test("StreamReaderTests - ArgumentExceptionOffsetAndCount", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ArgumentExceptionOffsetAndCount);
            QUnit.test("StreamReaderTests - ObjectDisposedExceptionDisposedStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectDisposedExceptionDisposedStream);
            QUnit.test("StreamReaderTests - ObjectDisposedExceptionDisposedBaseStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectDisposedExceptionDisposedBaseStream);
            QUnit.test("StreamReaderTests - EmptyStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.EmptyStream);
            QUnit.test("StreamReaderTests - VanillaReads1", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.VanillaReads1);
            QUnit.test("StreamReaderTests - VanillaReads2WithAsync", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.VanillaReads2WithAsync);
            QUnit.test("StreamReaderTests - ObjectDisposedReadLine", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectDisposedReadLine);
            QUnit.test("StreamReaderTests - ObjectDisposedReadLineBaseStream", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ObjectDisposedReadLineBaseStream);
            QUnit.test("StreamReaderTests - VanillaReadLines", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.VanillaReadLines);
            QUnit.test("StreamReaderTests - VanillaReadLines2", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.VanillaReadLines2);
            QUnit.test("StreamReaderTests - ContinuousNewLinesAndTabsAsync", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.ContinuousNewLinesAndTabsAsync);
            QUnit.test("StreamReaderTests - CurrentEncoding", Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests.CurrentEncoding);
            QUnit.test("StreamTests - CopyToAsyncTest", Bridge.Test.Runtime.BridgeClientTestRunner.StreamTests.CopyToAsyncTest);
            QUnit.test("StreamWriter_StringCtorTests - NullArgs_ThrowsArgumentNullException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests.NullArgs_ThrowsArgumentNullException);
            QUnit.test("StreamWriter_StringCtorTests - EmptyPath_ThrowsArgumentException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests.EmptyPath_ThrowsArgumentException);
            QUnit.test("StreamWriter_StringCtorTests - NegativeBufferSize_ThrowsArgumentOutOfRangeException", Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException);
            QUnit.test("WriteTests - Synchronized_NewObject", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.Synchronized_NewObject);
            QUnit.test("WriteTests - WriteChars", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.WriteChars);
            QUnit.test("WriteTests - NullArray", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.NullArray);
            QUnit.test("WriteTests - NegativeOffset", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.NegativeOffset);
            QUnit.test("WriteTests - NegativeCount", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.NegativeCount);
            QUnit.test("WriteTests - WriteCustomLenghtStrings", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.WriteCustomLenghtStrings);
            QUnit.test("WriteTests - WriteToStreamWriter", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.WriteToStreamWriter);
            QUnit.test("WriteTests - TestWritingPastEndOfArray", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.TestWritingPastEndOfArray);
            QUnit.test("WriteTests - VerifyWrittenString", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.VerifyWrittenString);
            QUnit.test("WriteTests - NullStreamThrows", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.NullStreamThrows);
            QUnit.test("WriteTests - NullNewLineAsync", Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests.NullNewLineAsync);
            QUnit.test("StringWriterTests - Ctor", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.Ctor);
            QUnit.test("StringWriterTests - CtorWithStringBuilder", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CtorWithStringBuilder);
            QUnit.test("StringWriterTests - CtorWithCultureInfo", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CtorWithCultureInfo);
            QUnit.test("StringWriterTests - SimpleWriter", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.SimpleWriter);
            QUnit.test("StringWriterTests - WriteArray", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.WriteArray);
            QUnit.test("StringWriterTests - CantWriteNullArray", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CantWriteNullArray);
            QUnit.test("StringWriterTests - CantWriteNegativeOffset", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CantWriteNegativeOffset);
            QUnit.test("StringWriterTests - CantWriteNegativeCount", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CantWriteNegativeCount);
            QUnit.test("StringWriterTests - CantWriteIndexLargeValues", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CantWriteIndexLargeValues);
            QUnit.test("StringWriterTests - CantWriteCountLargeValues", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.CantWriteCountLargeValues);
            QUnit.test("StringWriterTests - WriteWithOffset", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.WriteWithOffset);
            QUnit.test("StringWriterTests - WriteWithLargeIndex", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.WriteWithLargeIndex);
            QUnit.test("StringWriterTests - WriteWithLargeCount", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.WriteWithLargeCount);
            QUnit.test("StringWriterTests - NewStringWriterIsEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.NewStringWriterIsEmpty);
            QUnit.test("StringWriterTests - NewStringWriterHasEmptyStringBuilder", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.NewStringWriterHasEmptyStringBuilder);
            QUnit.test("StringWriterTests - ToStringReturnsWrittenData", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.ToStringReturnsWrittenData);
            QUnit.test("StringWriterTests - StringBuilderHasCorrectData", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.StringBuilderHasCorrectData);
            QUnit.test("StringWriterTests - Closed_DisposedExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.Closed_DisposedExceptions);
            QUnit.test("StringWriterTests - Disposed_DisposedExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.Disposed_DisposedExceptions);
            QUnit.test("StringWriterTests - FlushAsyncWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.FlushAsyncWorks);
            QUnit.test("StringWriterTests - MiscWrites", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.MiscWrites);
            QUnit.test("StringWriterTests - MiscWritesAsync", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.MiscWritesAsync);
            QUnit.test("StringWriterTests - MiscWriteLineAsync", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.MiscWriteLineAsync);
            QUnit.test("StringWriterTests - GetEncoding", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.GetEncoding);
            QUnit.test("StringWriterTests - TestWriteMisc", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.TestWriteMisc);
            QUnit.test("StringWriterTests - TestWriteObject", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.TestWriteObject);
            QUnit.test("StringWriterTests - TestWriteLineMisc", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.TestWriteLineMisc);
            QUnit.test("StringWriterTests - TestWriteLineObject", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.TestWriteLineObject);
            QUnit.test("StringWriterTests - TestWriteLineAsyncCharArray", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.TestWriteLineAsyncCharArray);
            QUnit.test("StringWriterTests - NullNewLineAsync", Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests.NullNewLineAsync);
            QUnit.test("TimeoutTests - TestReadTimeoutCustomStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestReadTimeoutCustomStream);
            QUnit.test("TimeoutTests - TestReadTimeoutMemoryStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestReadTimeoutMemoryStream);
            QUnit.test("TimeoutTests - TestWriteTimeoutCustomStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestWriteTimeoutCustomStream);
            QUnit.test("TimeoutTests - TestWriteTimeoutMemoryStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestWriteTimeoutMemoryStream);
            QUnit.test("TimeoutTests - TestCanTimeoutCustomStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestCanTimeoutCustomStream);
            QUnit.test("TimeoutTests - TestCanTimeoutMemoryStream", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests.TestCanTimeoutMemoryStream);
            QUnit.test("BinaryWriterWithBufferedStream_Tests - BinaryWriter_FlushTests", Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterWithBufferedStream_Tests.BinaryWriter_FlushTests);
            QUnit.test("BufferedStream_StreamMethods - ReadByte_ThenRead_EndOfStreamCorrectlyFound", Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_StreamMethods.ReadByte_ThenRead_EndOfStreamCorrectlyFound);
            QUnit.test("StreamWriterWithBufferedStream_FlushTests - WriteAfterRead_NonSeekableStream_Throws", Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriterWithBufferedStream_FlushTests.WriteAfterRead_NonSeekableStream_Throws);
            QUnit.module("LINQ");
            QUnit.test("Aggregate - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.Test);
            QUnit.test("Aggregate - Bridge315", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.Bridge315);
            QUnit.test("Conversion - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators.Test);
            QUnit.test("Element - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators.Test);
            QUnit.test("Generation - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators.Test);
            QUnit.test("Grouping - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.Test);
            QUnit.test("Grouping - TestComplexGrouping", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.TestComplexGrouping);
            QUnit.test("Grouping - TestAnagrams", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.TestAnagrams);
            QUnit.test("Join - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators.Test);
            QUnit.test("Misc - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators.Test);
            QUnit.test("Ordering - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators.Test);
            QUnit.test("Partitioning - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators.Test);
            QUnit.test("Projection - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators.Test);
            QUnit.test("Quantifiers - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers.Test);
            QUnit.test("Query - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution.Test);
            QUnit.test("Restriction- Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators.Test);
            QUnit.test("Set - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators.Test);
            QUnit.module("LINQ Expressions");
            QUnit.test("LINQ Expressions - ExpressionProtectedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ExpressionProtectedConstructorWorks);
            QUnit.test("LINQ Expressions - SimpleExpressionTreeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SimpleExpressionTreeWorks);
            QUnit.test("LINQ Expressions - LambdaWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LambdaWorks);
            QUnit.test("LINQ Expressions - ParameterAndVariableWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ParameterAndVariableWork);
            QUnit.test("LINQ Expressions - ConstantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConstantWorks);
            QUnit.test("LINQ Expressions - BinaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BinaryExpressionsWork);
            QUnit.test("LINQ Expressions - UnaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.UnaryExpressionsWork);
            QUnit.test("LINQ Expressions - ArrayLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayLengthWorks);
            QUnit.test("LINQ Expressions - ConversionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConversionsWork);
            QUnit.test("LINQ Expressions - ArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayIndexWorks);
            QUnit.test("LINQ Expressions - MultiDimensionalArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MultiDimensionalArrayIndexWorks);
            QUnit.test("LINQ Expressions - ConditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConditionWorks);
            QUnit.test("LINQ Expressions - CallWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.CallWorks);
            QUnit.test("LINQ Expressions - MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MethodGroupConversionWorks);
            QUnit.test("LINQ Expressions - InvokeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.InvokeWorks);
            QUnit.test("LINQ Expressions - ArrayCreationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayCreationWorks);
            QUnit.test("LINQ Expressions - PropertiesAndFieldsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.PropertiesAndFieldsWork);
            QUnit.test("LINQ Expressions - IndexersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IndexersWork);
            QUnit.test("LINQ Expressions - IndexExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IndexExpressionsWork);
            QUnit.test("LINQ Expressions - ObjectConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ObjectConstructionWorks);
            QUnit.test("LINQ Expressions - AnonymousTypeConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.AnonymousTypeConstructionWorks);
            QUnit.test("LINQ Expressions - TransparentIdentifiersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TransparentIdentifiersWork);
            QUnit.test("LINQ Expressions - NewExpressionWithMembersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.NewExpressionWithMembersWork);
            QUnit.test("LINQ Expressions - BindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BindWorks);
            QUnit.test("LINQ Expressions - ElementInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ElementInitWorks);
            QUnit.test("LINQ Expressions - ListBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ListBindWorks);
            QUnit.test("LINQ Expressions - MemberBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MemberBindWorks);
            QUnit.test("LINQ Expressions - MemberInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MemberInitWorks);
            QUnit.test("LINQ Expressions - ListInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ListInitWorks);
            QUnit.test("LINQ Expressions - TypeIsAndTypeEqualWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TypeIsAndTypeEqualWork);
            QUnit.test("LINQ Expressions - QuoteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.QuoteWorks);
            QUnit.test("LINQ Expressions - LocalVariableReferenceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LocalVariableReferenceWorks);
            QUnit.test("LINQ Expressions - ThrowAndRethrowWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ThrowAndRethrowWork);
            QUnit.test("LINQ Expressions - DefaultAndEmptyWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.DefaultAndEmptyWork);
            QUnit.test("LINQ Expressions - BlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BlockWorks);
            QUnit.test("LINQ Expressions - IfThenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IfThenWorks);
            QUnit.test("LINQ Expressions - LabelTargetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LabelTargetWorks);
            QUnit.test("LINQ Expressions - GotoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.GotoWorks);
            QUnit.test("LINQ Expressions - LabelExpressionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LabelExpressionWorks);
            QUnit.test("LINQ Expressions - LoopWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LoopWorks);
            QUnit.test("LINQ Expressions - SwitchCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SwitchCaseWorks);
            QUnit.test("LINQ Expressions - SwitchWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SwitchWorks);
            QUnit.test("LINQ Expressions - CatchBlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.CatchBlockWorks);
            QUnit.test("LINQ Expressions - TryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TryWorks);
            QUnit.test("LINQ Expressions - DynamicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.DynamicWorks);
            QUnit.module("Math");
            QUnit.test("Math - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ConstantsWork);
            QUnit.test("Math - ConstantsWork_N2473", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ConstantsWork_N2473);
            QUnit.test("Math - AbsOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfDoubleWorks);
            QUnit.test("Math - AbsOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfIntWorks);
            QUnit.test("Math - AbsOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfLongWorks);
            QUnit.test("Math - AbsOfSbyteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfSbyteWorks);
            QUnit.test("Math - AbsOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfShortWorks);
            QUnit.test("Math - AbsOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfFloatWorks);
            QUnit.test("Math - AbsOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfDecimalWorks);
            QUnit.test("Math - AcosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AcosWorks);
            QUnit.test("Math - AsinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AsinWorks);
            QUnit.test("Math - AtanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AtanWorks);
            QUnit.test("Math - Atan2Works", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.Atan2Works);
            QUnit.test("Math - CeilingOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.CeilingOfDoubleWorks);
            QUnit.test("Math - CeilingOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.CeilingOfDecimalWorks);
            QUnit.test("Math - CosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.CosWorks);
            QUnit.test("Math - CoshWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.CoshWorks);
            QUnit.test("Math - SinhWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SinhWorks);
            QUnit.test("Math - TanhWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.TanhWorks);
            QUnit.test("Math - DivRemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.DivRemWorks);
            QUnit.test("Math - ExpWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ExpWorks);
            QUnit.test("Math - FloorOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.FloorOfDoubleWorks);
            QUnit.test("Math - FloorOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.FloorOfDecimalWorks);
            QUnit.test("Math - LogWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.LogWorks);
            QUnit.test("Math - LogWithBaseWorks_SPI_1566", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.LogWithBaseWorks_SPI_1566);
            QUnit.test("Math - Log10Works_SPI_1629", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.Log10Works_SPI_1629);
            QUnit.test("Math - MaxOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfByteWorks);
            QUnit.test("Math - MaxOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfDecimalWorks);
            QUnit.test("Math - MaxOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfDoubleWorks);
            QUnit.test("Math - MaxOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfShortWorks);
            QUnit.test("Math - MaxOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfIntWorks);
            QUnit.test("Math - MaxOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfLongWorks);
            QUnit.test("Math - MaxOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfSByteWorks);
            QUnit.test("Math - MaxOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfFloatWorks);
            QUnit.test("Math - MaxOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfUShortWorks);
            QUnit.test("Math - MaxOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfUIntWorks);
            QUnit.test("Math - MaxOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfULongWorks);
            QUnit.test("Math - MinOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfByteWorks);
            QUnit.test("Math - MinOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfDecimalWorks);
            QUnit.test("Math - MinOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfDoubleWorks);
            QUnit.test("Math - MinOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfShortWorks);
            QUnit.test("Math - MinOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfIntWorks);
            QUnit.test("Math - MinOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfLongWorks);
            QUnit.test("Math - MinOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfSByteWorks);
            QUnit.test("Math - MinOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfFloatWorks);
            QUnit.test("Math - MinOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfUShortWorks);
            QUnit.test("Math - MinOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfUIntWorks);
            QUnit.test("Math - MinOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfULongWorks);
            QUnit.test("Math - PowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.PowWorks);
            QUnit.test("Math - RandomWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RandomWorks);
            QUnit.test("Math - RoundOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundOfDoubleWorks);
            QUnit.test("Math - RoundDecimalWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDecimalWithModeWorks);
            QUnit.test("Math - RoundDecimalWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDecimalWithPrecisionAndModeWorks);
            QUnit.test("Math - RoundDoubleWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDoubleWithModeWorks);
            QUnit.test("Math - RoundDoubleWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDoubleWithPrecisionAndModeWorks);
            QUnit.test("Math - JsRoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.JsRoundWorks);
            QUnit.test("Math - IEEERemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.IEEERemainderWorks);
            QUnit.test("Math - SignWithDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SignWithDecimalWorks);
            QUnit.test("Math - SignWithDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SignWithDoubleWorks);
            QUnit.test("Math - SignWithFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SignWithFloatWorks);
            QUnit.test("Math - SinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SinWorks);
            QUnit.test("Math - SqrtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SqrtWorks);
            QUnit.test("Math - TanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.TanWorks);
            QUnit.test("Math - TruncateWithDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.TruncateWithDoubleWorks);
            QUnit.test("Math - TruncateWithDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.TruncateWithDecimalWorks);
            QUnit.module("Nullable");
            QUnit.test("Nullable - TypePropertiesAreCorrect_SPI_1567", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.TypePropertiesAreCorrect_SPI_1567);
            QUnit.test("Nullable - ConvertingToNullableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.ConvertingToNullableWorks);
            QUnit.test("Nullable - HasValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.HasValueWorks);
            QUnit.test("Nullable - BoxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.BoxingWorks);
            QUnit.test("Nullable - UnboxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.UnboxingWorks);
            QUnit.test("Nullable - ValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.ValueWorks);
            QUnit.test("Nullable - UnboxingValueOfWrongTypeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.UnboxingValueOfWrongTypeThrowsAnException);
            QUnit.test("Nullable - GetValueOrDefaultWithArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.GetValueOrDefaultWithArgWorks);
            QUnit.test("Nullable - LiftedGetHashCode1Works", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGetHashCode1Works);
            QUnit.test("Nullable - LiftedGetHashCode2Works", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGetHashCode2Works);
            QUnit.test("Nullable - LiftedGetHashCode3Works", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGetHashCode3Works);
            QUnit.test("Nullable - LiftedEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedEqualityWorks);
            QUnit.test("Nullable - LiftedInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedInequalityWorks);
            QUnit.test("Nullable - LiftedLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanWorks);
            QUnit.test("Nullable - LiftedGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanWorks);
            QUnit.test("Nullable - LiftedLessThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanOrEqualWorks);
            QUnit.test("Nullable - LiftedGreaterThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanOrEqualWorks);
            QUnit.test("Nullable - LiftedSubtractionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedSubtractionWorks);
            QUnit.test("Nullable - LiftedAdditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedAdditionWorks);
            QUnit.test("Nullable - LiftedModWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedModWorks);
            QUnit.test("Nullable - LiftedFloatingPointDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedFloatingPointDivisionWorks);
            QUnit.test("Nullable - LiftedIntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedIntegerDivisionWorks);
            QUnit.test("Nullable - LiftedMultiplicationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedMultiplicationWorks);
            QUnit.test("Nullable - LiftedBitwiseAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseAndWorks);
            QUnit.test("Nullable - LiftedBitwiseOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseOrWorks);
            QUnit.test("Nullable - LiftedBitwiseXorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseXorWorks);
            QUnit.test("Nullable - LiftedLeftShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLeftShiftWorks);
            QUnit.test("Nullable - LiftedSignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedSignedRightShiftWorks);
            QUnit.test("Nullable - LiftedUnsignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedUnsignedRightShiftWorks);
            QUnit.test("Nullable - LiftedEqualityWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedEqualityWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedInequalityWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedInequalityWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedLessThanWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedGreaterThanWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedLessThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedGreaterThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedAdditionWorksWithUserDefinedOperators", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedAdditionWorksWithUserDefinedOperators);
            QUnit.test("Nullable - LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634);
            QUnit.test("LiftedBooleanAndWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanAndWorks);
            QUnit.test("LiftedBooleanOrWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanOrWorks);
            QUnit.test("Nullable - LiftedBooleanXorWorks_SPI_1568", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanXorWorks_SPI_1568);
            QUnit.test("Nullable - LiftedBooleanNotWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanNotWorks);
            QUnit.test("Nullable - LiftedNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedNegationWorks);
            QUnit.test("Nullable - LiftedUnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedUnaryPlusWorks);
            QUnit.test("Nullable - LiftedOnesComplementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedOnesComplementWorks);
            QUnit.test("CoalesceWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.CoalesceWorks);
            QUnit.test("BoxedandUnboxedEnumToStringWorks #2620", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.BoxedandUnboxedEnumToStringWorks);
            QUnit.module("NumberFormatInfo");
            QUnit.test("NumberFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("NumberFormatInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.GetFormatWorks);
            QUnit.test("NumberFormatInfoTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.InvariantWorks);
            QUnit.test("NumberFormatSpecifiersTests - CurrencyFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CurrencyFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - DecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.DecimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - ExponentialFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.ExponentialFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - FixedPointFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.FixedPointFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - GeneralFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.GeneralFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - NumericFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.NumericFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - PercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.PercentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - RoundTripFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.RoundTripFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - HexadecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.HexadecimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomZeroFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomZeroFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomHashFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomHashFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomDotFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomDotFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomCommaFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomCommaFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomPercentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPerMileFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomPerMileFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomEscapeFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomEscapeFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomSemicolonFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomSemicolonFormatSpecifierWorks);
            QUnit.module("Property accessor");
            QUnit.test("AccessorsCanBeInvokedInstance", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedInstance);
            QUnit.test("AccessorsCanBeInvokedStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedStatic);
            QUnit.test("AccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedGeneric);
            QUnit.test("AccessorsCanBeInvokedGenericStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedGenericStatic);
            QUnit.test("BaseAccessorsCanBeInvoked", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.BaseAccessorsCanBeInvoked);
            QUnit.test("BaseAccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.BaseAccessorsCanBeInvokedGeneric);
            QUnit.module("Random");
            QUnit.test("Random - Unseeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Unseeded);
            QUnit.test("Random - Seeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Seeded);
            QUnit.test("Random - Sample", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Sample);
            QUnit.test("Random - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.TypePropertiesAreCorrect);
            QUnit.test("Random - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.DefaultConstructorWorks);
            QUnit.test("Random - SeedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.SeedConstructorWorks);
            QUnit.test("Random - NextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.NextWorks);
            QUnit.test("Random - NextWithMaxWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.NextWithMaxWorks);
            QUnit.test("Random - NextWithMinAndMaxWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.NextWithMinAndMaxWorks);
            QUnit.test("Random - NextDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.NextDoubleWorks);
            QUnit.test("Random - NextBytesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.NextBytesWorks);
            QUnit.module("Reflection");
            QUnit.test("Reflection - Assembly GetExecutingAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetExecutingAssemblyWorks);
            QUnit.test("Reflection - Assembly GetAssemblyForTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetAssemblyForTypeWorks);
            QUnit.test("Reflection - Assembly FullNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.FullNameWorks);
            QUnit.test("Reflection - Assembly ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.ToStringWorks);
            QUnit.test("Reflection - Assembly GetTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypesWorks);
            QUnit.test("Reflection - Assembly GetTypesWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypesWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly GetTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWorks);
            QUnit.test("Reflection - Assembly GetTypeWorksWithGenerics", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWorksWithGenerics);
            QUnit.test("Reflection - Assembly GetTypeWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly AssemblyOfBuiltInTypes", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.AssemblyOfBuiltInTypes);
            QUnit.test("Reflection - Assembly CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.CreateInstanceWorks);
            QUnit.test("Reflection - Assembly GetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetCustomAttributesWorks);
            QUnit.test("Reflection - Assembly LoadCanReturnReferenceToLoadedAssembly", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.LoadCanReturnReferenceToLoadedAssembly);
            QUnit.test("Reflection - Assembly GetManifestResourceNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceNamesWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataAsBase64WithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataAsBase64WithTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataWithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataWithTypeWorks);
            QUnit.test("Reflection - Assembly UriBelongsSystem", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.UriBelongsSystem);
            QUnit.test("Reflection - Attribute GetCustomAttributesForAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForAssemblyWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForEnumMember", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForEnumMember);
            QUnit.test("Reflection - GetMembers GetMembersWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMembersWorksForInterface", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWorksForInterface);
            QUnit.test("Reflection - GetMembers GetMembersWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMemberWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMemberWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetConstructorsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetConstructorWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertiesWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertiesWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldWithNameWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventWithNameWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers IsOperatorForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.IsOperatorForMemberInfoWorks);
            QUnit.test("Reflection - Reflection GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute);
            QUnit.test("Reflection - Reflection StructMemberReflectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.StructMemberReflectionWorks);
            QUnit.test("Reflection - Reflection IsStaticFlagWorksForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticFlagWorksForMethod);
            QUnit.test("Reflection - Reflection MemberTypeIsMethodForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsMethodForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsFalseForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsConstructorIsFalseForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsTrueForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsConstructorIsTrueForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsFalseForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsConstructorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsConstructorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection NameIsCtorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCtorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticMethodIsTrueOnlyForStaticMethodConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticMethodIsTrueOnlyForStaticMethodConstructors);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsExpandParamsIsCorrectForConstructors);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeShouldBeCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeShouldBeCorrectForMethods);
            QUnit.test("Reflection - Reflection ReturnTypeAndParameterTypesAreCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ReturnTypeAndParameterTypesAreCorrectForMethods);
            QUnit.test("Reflection - Reflection ParameterTypesShouldBeCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ParameterTypesShouldBeCorrectForConstructors);
            QUnit.test("Reflection - Reflection VoidIsConsideredObjectAsReturnType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.VoidIsConsideredObjectAsReturnType);
            QUnit.test("Reflection - Reflection MethodNameIsTheCSharpName", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MethodNameIsTheCSharpName);
            QUnit.test("Reflection - Reflection TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes);
            QUnit.test("Reflection - Reflection TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes);
            QUnit.test("Reflection - Reflection MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes);
            QUnit.test("Reflection - Reflection IsGenericMethodDefinitionAndTypeParameterCountWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsGenericMethodDefinitionAndTypeParameterCountWork);
            QUnit.test("Reflection - Reflection ScriptNameWorksForAllKindsOfMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameWorksForAllKindsOfMethods);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsExpandParamsIsCorrectForMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection DelegateCreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DelegateCreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethodOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethodOfGenericType);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInstanceMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericStaticMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericStaticMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForExpandParamsMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForExpandParamsConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsFieldForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsFieldForField);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection NameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForField);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForField);
            QUnit.test("Reflection - Reflection FieldTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.FieldTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameIsCorrectForField);
            QUnit.test("Reflection - Reflection GetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection GetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetValueWorksForStaticField);
            QUnit.test("Reflection - Reflection SetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SetValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection SetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SetValueWorksForStaticField);
            QUnit.test("Reflection - Reflection MemberTypeIsEventForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsEventForEvent);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForEvent);
            QUnit.test("Reflection - Reflection NameIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForEvent);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection PropertiesForAddMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForAddMethodAreCorrect);
            QUnit.test("Reflection - Reflection PropertiesForRemoveMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForRemoveMethodAreCorrect);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsPropertyForProperty);
            QUnit.test("Reflection - Reflection ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsPropertyForIndexer);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection NameIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForProperty);
            QUnit.test("Reflection - Reflection NameIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForProperty);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsFalseForIndexer);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreEmptyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IndexParameterTypesAreEmptyForProperty);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IndexParameterTypesAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndPropertiesWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CanReadAndWriteAndPropertiesWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndIndexersWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CanReadAndWriteAndIndexersWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection PropertyInfoGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyInfoGetValueWorks);
            QUnit.test("Reflection - Reflection PropertyInfoSetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyInfoSetValueWorks);
            QUnit.test("Reflection - Reflection MemberAttributesWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberAttributesWork);
            QUnit.test("Reflection - Reflection MembersReflectableAttributeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MembersReflectableAttributeWorks);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForTypeWithNoAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForTypeWithNoAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForClassWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForClassWithAttributes);
            QUnit.test("Reflection - Type attributes NonScriptableAttributesAreNotIncluded", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NonScriptableAttributesAreNotIncluded);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForInterfaceWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForInterfaceWithAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForEnumWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForEnumWithAttributes);
            QUnit.test("Reflection - Type attributes InheritedFlagToGetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.InheritedFlagToGetCustomAttributesWorks);
            QUnit.test("Reflection - Type attributes DeepInheritanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.DeepInheritanceWorks);
            QUnit.test("Reflection - Type attributes OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass);
            QUnit.test("Reflection - Type attributes ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute);
            QUnit.test("Reflection - Type attributes NonInheritedAttributeIsNotInherited", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NonInheritedAttributeIsNotInherited);
            QUnit.test("Reflection - Type attributes GetCustomAttributesTypeFilterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesTypeFilterWorks);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForOpenGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForOpenGenericInterface);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericInterface);
            QUnit.test("Reflection - Type attributes AllSupportedScalarTypesCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.AllSupportedScalarTypesCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes ArraysCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ArraysCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes NamedValuesEnumCanBeUsedAsAttributeArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NamedValuesEnumCanBeUsedAsAttributeArgument);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes FieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.FieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CreatingAttributeWithNamedConstructorWorks);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithInlineCodeConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CreatingAttributeWithInlineCodeConstructorWorks);
            QUnit.test("Reflection - Type attributes ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeIsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeIsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeAsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeAsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.CastWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeWorksOnObjects", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.GetTypeWorksOnObjects);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeOnNullInstanceThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.GetTypeOnNullInstanceThrowsException);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeCheckForSubTypeOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeCheckForSubTypeOfGenericType);
            QUnit.test("Reflection - TypeSystem FullNamePropertyReturnsTheNameWithTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.FullNamePropertyReturnsTheNameWithTheNamespace);
            QUnit.test("Reflection - TypeSystem AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName);
            QUnit.test("Reflection - TypeSystem AssemblyPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AssemblyPropertyWorks);
            QUnit.test("Reflection - TypeSystem NamespacePropertyReturnsTheNamespaceWithoutTheName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NamespacePropertyReturnsTheNamespaceWithoutTheName);
            QUnit.test("Reflection - TypeSystem InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks);
            QUnit.test("Reflection - TypeSystem NamePropertyRemovesTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NamePropertyRemovesTheNamespace);
            QUnit.test("Reflection - TypeSystem GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GettingBaseTypeWorks);
            QUnit.test("Reflection - TypeSystem GettingImplementedInterfacesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GettingImplementedInterfacesWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfAnOpenGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfAnOpenGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfInstantiatedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfInstantiatedGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance);
            QUnit.test("Reflection - TypeSystem AccessingAStaticMemberInAGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AccessingAStaticMemberInAGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfNestedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfNestedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem BaseTypeAndImplementedInterfacesForGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.BaseTypeAndImplementedInterfacesForGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsAbstractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsAbstractWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsNestedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedWorks);
            QUnit.test("Reflection - TypeSystem IsPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPrivateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedPrivateWorks);
            QUnit.test("Reflection - TypeSystem IsNestedFamilyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedFamilyWorks);
            QUnit.test("Reflection - TypeSystem IsNestedAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedAssemblyWorks);
            QUnit.test("Reflection - TypeSystem IsNotPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNotPublicWorks);
            QUnit.test("Reflection - TypeSystem IsSealedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsSealedWorks);
            QUnit.test("Reflection - TypeSystem AttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AttributesWorks);
            QUnit.test("Reflection - TypeSystem ContainsGenericParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ContainsGenericParametersWorks);
            QUnit.test("Reflection - TypeSystem DeclaringTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DeclaringTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericParameterWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumNamesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumNameWorks);
            QUnit.test("Reflection - TypeSystem GetEnumValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumValuesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumUnderlyingTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumUnderlyingTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeDefinitionWorksAsExpected", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericTypeDefinitionWorksAsExpected);
            QUnit.test("Reflection - TypeSystem GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes);
            QUnit.test("Reflection - TypeSystem GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull);
            QUnit.test("Reflection - TypeSystem GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull);
            QUnit.test("Reflection - TypeSystem IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsAssignableFromWorks);
            QUnit.test("Reflection - TypeSystem IsSubclassOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsSubclassOfWorks);
            QUnit.test("Reflection - TypeSystem IsClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsClassWorks);
            QUnit.test("Reflection - TypeSystem IsEnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsEnumWorks);
            QUnit.test("Reflection - TypeSystem IsArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsArrayWorks);
            QUnit.test("Reflection - TypeSystem IsFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsFlagsWorks);
            QUnit.test("Reflection - TypeSystem IsInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsInterfaceWorks);
            QUnit.test("Reflection - TypeSystem IsInstanceOfTypeWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsInstanceOfTypeWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseUnnamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseUnnamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseNamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseNamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks2", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks2);
            QUnit.test("Reflection - TypeSystem InvokingBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem InvokingGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnGenericMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument);
            QUnit.test("Reflection - TypeSystem FalseIsFunctionShouldReturnFalse", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.FalseIsFunctionShouldReturnFalse);
            QUnit.test("Reflection - TypeSystem CastingUndefinedToOtherTypeShouldReturnUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingUndefinedToOtherTypeShouldReturnUndefined);
            QUnit.test("Reflection - TypeSystem NonSerializableTypeCanInheritFromSerializableType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NonSerializableTypeCanInheritFromSerializableType);
            QUnit.test("Reflection - TypeSystem InheritingFromRecordWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InheritingFromRecordWorks);
            QUnit.test("Reflection - TypeSystem InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.StaticGetTypeMethodWorks);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWithGenericsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.StaticGetTypeMethodWithGenericsWorks);
            QUnit.test("Reflection - TypeSystem CastingToNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingToNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem CastingToImportedNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingToImportedNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem DefaultValueOfNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DefaultValueOfNamedValuesEnumIsNull);
            QUnit.test("Reflection - TypeSystem DefaultValueOfImportedNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DefaultValueOfImportedNamedValuesEnumIsNull);
            QUnit.module("Regex");
            QUnit.test("Regex.IsMatch - IsMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchTest);
            QUnit.test("Regex.IsMatch - IsMatchWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchWithOffsetTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticWithOptionsTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceTest1);
            QUnit.test("Regex.Replace - ReplaceAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceAtPositionTest);
            QUnit.test("Regex.Replace - ReplaceAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceAtPositionAndLengthTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorAndCountTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountAtPostitionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorAndCountAtPostitionTest);
            QUnit.test("Regex.Replace - ReplaceStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticTest1);
            QUnit.test("Regex.Replace - ReplaceStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticTest2);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest);
            QUnit.test("Regex.Split - SplitTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest1);
            QUnit.test("Regex.Split - SplitTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest2);
            QUnit.test("Regex.Split - SplitTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest3);
            QUnit.test("Regex.Split - SplitTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest4);
            QUnit.test("Regex.Split - SplitTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest5);
            QUnit.test("Regex.Split - SplitWithCountTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest1);
            QUnit.test("Regex.Split - SplitWithCountTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest2);
            QUnit.test("Regex.Split - SplitWithCountTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest3);
            QUnit.test("Regex.Split - SplitWithCountTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest4);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest1);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest2);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest3);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest4);
            QUnit.test("Regex.Split - SplitStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest1);
            QUnit.test("Regex.Split - SplitStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest2);
            QUnit.test("Regex.Split - SplitStaticTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest3);
            QUnit.test("Regex.Split - SplitStaticTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest4);
            QUnit.test("Regex.Split - SplitStaticTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest5);
            QUnit.test("Regex.Split - SplitStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticWithOptionsTest);
            QUnit.test("Regex.Split - SplitStaticWithOptionsAndTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticWithOptionsAndTimeout);
            QUnit.test("RegexCaptureCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaseDataTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionFieldsTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionForeachTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionEnumeratorTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionCopyToTest);
            QUnit.test("Regex Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.CaseDataTest);
            QUnit.test("Regex Entity - GetGroupNamesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GetGroupNamesTest);
            QUnit.test("Regex Entity - GetGroupNumbersTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GetGroupNumbersTest);
            QUnit.test("Regex Entity - GroupNameFromNumberTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupNameFromNumberTest);
            QUnit.test("Regex Entity - GroupNumberFromNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupNumberFromNameTest);
            QUnit.test("Regex Entity - SupportedOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.SupportedOptionsTest);
            QUnit.test("Regex Entity - MatchNamedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchNamedGroupTest);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchInnerNamedGroupTest1);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchInnerNamedGroupTest2);
            QUnit.test("Regex Entity - GroupOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupOrderingTest);
            QUnit.test("Regex Entity - RepeatingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.RepeatingGroupTest);
            QUnit.test("Regex Entity - ZeroResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.ZeroResultTest);
            QUnit.test("Regex Entity - NonCapturingGroupsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.NonCapturingGroupsTest);
            QUnit.test("RegexGroupCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.CaseDataTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionFieldsTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionForeachTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionEnumeratorTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.CaseDataTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionFieldsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionItemsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionItemsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionForeachTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionEnumeratorTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionWithEmptyPatternTest);
            QUnit.test("Match Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.CaseDataTest);
            QUnit.test("Match Entity - MatchEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchEmptyPatternTest);
            QUnit.test("Match Entity - MatchEmptyFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchEmptyFieldsTest);
            QUnit.test("Match Entity - MatchNextMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchNextMatchTest);
            QUnit.test("Match Entity - MatchNextMatchWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchNextMatchWithEmptyPatternTest);
            QUnit.test("Match Entity - MatchResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchResultTest);
            QUnit.test("Match Entity - MatchSearchGroupByNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchSearchGroupByNameTest);
            QUnit.test("MatchSparse Entity - GroupOrderingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest1);
            QUnit.test("MatchSparse Entity - GroupOrderingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest2);
            QUnit.test("MatchSparse Entity - GroupOrderingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest3);
            QUnit.test("MatchSparse Entity - SparseOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.SparseOrderingTest);
            QUnit.test("MatchSparse Entity - GroupCapturesMergeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupCapturesMergeTest);
            QUnit.test("Regex.Escape - MsdnEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.MsdnEscapeTest);
            QUnit.test("Regex.Escape - MsdnUnescapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.MsdnUnescapeTest);
            QUnit.test("Regex.Escape - EscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.EscapeCharSetTest);
            QUnit.test("Regex.Escape - NonEscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.NonEscapeCharSetTest);
            QUnit.test("Regex.Matches - MatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesTest);
            QUnit.test("Regex.Matches - MatchesAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesAtPositionTest);
            QUnit.test("Regex.Matches - MatchesStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticWithOptionsTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Match - MatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchTest);
            QUnit.test("Regex.Match - MatchAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchAtPositionTest);
            QUnit.test("Regex.Match - MatchAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchAtPositionAndLengthTest);
            QUnit.test("Regex.Match - MatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticWithOptionsTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest1);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest2);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest3);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNameExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNameExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNumberExprTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNumberExprTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest2);
            QUnit.test("Regex: Alternations - SimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest3);
            QUnit.test("Regex: Alternations - AlternationWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonCapturingTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookaheadTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadTest2);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookbehindTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindTest2);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonBacktrackingTest);
            QUnit.test("Regex: Alternations - AlternationGroupCommentTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupCommentTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithNameInConditionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithNameInConditionTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithIncorrectRefTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithIncorrectRefTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest1);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest2);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest4);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest5);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonCapturingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonBacktrackingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxAndGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxAndGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchExceptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchExceptionTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOrLineTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineMultilineModeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOrLineMultilineModeTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest1);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest2);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest3);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest4);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrNewlineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrNewlineTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnContiguousMatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnContiguousMatchesTest);
            QUnit.test("Regex: Anchors - MsdnWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnWordBoundaryTest);
            QUnit.test("Regex: Anchors - MsdnNonWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnNonWordBoundaryTest);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.StartAndEndOfStringCustomTest1);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.StartAndEndOfStringCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOrNewlineCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOrNewlineCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest3);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.ContiguousMatchesCustomTest1);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.ContiguousMatchesCustomTest2);
            QUnit.test("Regex: Backreferences - MsdnNumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNumberedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithNumberAsNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithNumberAsNameTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithRedefinedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithRedefinedGroupTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest1);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest2);
            QUnit.test("Regex: Backreferences - NamedBackrefToUnreachableGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToUnreachableGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToSelfGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToSelfGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToParentGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToParentGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - ComplexBackrefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.ComplexBackrefTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.MsdnBalancingGroupTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.MsdnBalancingGroupTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithoutName1Test", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithoutName1Test);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithQuantifierTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithQuantifierTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithEmptyIntervalTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithEmptyIntervalTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupStackApproachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupStackApproachTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest2);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNegativeCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNegativeCharGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest3);
            QUnit.test("Regex: Char Classes - MsdnCharRangeInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharRangeInGroupTest);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest4);
            QUnit.test("Regex: Char Classes - CharClassesInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassesInCharGroupTest);
            QUnit.test("Regex: Char Classes - CaretSymbolInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CaretSymbolInCharGroupTest);
            QUnit.test("Regex: Char Classes - NegativeCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.NegativeCharGroupTest);
            QUnit.test("Regex: Char Classes - CombiningCharRangesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CombiningCharRangesTest);
            QUnit.test("Regex: Char Classes - SubstractGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNestedGroupsTest1);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNestedGroupsTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupIsNotLastTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupIsNotLastTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithEscapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithEscapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithUnescapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithUnescapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - EmptyRangeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.EmptyRangeTest);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.ClosingSquareBracketTest1);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.ClosingSquareBracketTest2);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.OpeningSquareBracketTest1);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.OpeningSquareBracketTest2);
            QUnit.test("Regex: Escapes - MsdnBellCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnBellCharTest);
            QUnit.test("Regex: Escapes - MsdnBackspaceCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnBackspaceCharTest);
            QUnit.test("Regex: Escapes - MsdnTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnTabCharTest);
            QUnit.test("Regex: Escapes - MsdnCarriageRetCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnCarriageRetCharTest);
            QUnit.test("Regex: Escapes - MsdnVerticalTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnVerticalTabCharTest);
            QUnit.test("Regex: Escapes - MsdnFormFeedCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnFormFeedCharTest);
            QUnit.test("Regex: Escapes - MsdnNewLineCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnNewLineCharTest);
            QUnit.test("Regex: Escapes - MsdnEscapeCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnEscapeCharTest);
            QUnit.test("Regex: Escapes - MsdnOctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnOctalEscapeTest);
            QUnit.test("Regex: Escapes - MsdnHexEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnHexEscapeTest);
            QUnit.test("Regex: Escapes - MsdnAsciiEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnAsciiEscapeTest);
            QUnit.test("Regex: Escapes - MsdnUnicodeEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnUnicodeEscapeTest);
            QUnit.test("Regex: Escapes - MsdnSpecialEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnSpecialEscapesTest);
            QUnit.test("Regex: Escapes - MsdnCharEscapesExampleTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnCharEscapesExampleTest);
            QUnit.test("Regex: Escapes - CharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.CharEscapesTest);
            QUnit.test("Regex: Escapes - RangeWithCharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.RangeWithCharEscapesTest);
            QUnit.test("Regex: Escapes - ControlCharsTestUpperTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.ControlCharsTestUpperTest);
            QUnit.test("Regex: Escapes - ControlCharsTestLowerTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.ControlCharsTestLowerTest);
            QUnit.test("Regex: Escapes - BasicLatinEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.BasicLatinEscapeTest);
            QUnit.test("Regex: Escapes - OctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.OctalEscapeTest);
            QUnit.test("Regex: Examples - EmailParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.EmailParseTest);
            QUnit.test("Regex: Examples - PhoneParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.PhoneParseTest);
            QUnit.test("Regex: Examples - PasswordValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.PasswordValidationTest);
            QUnit.test("Regex: Examples - WordSlplittingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.WordSlplittingTest);
            QUnit.test("Regex: Examples - IpAddressValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.IpAddressValidationTest);
            QUnit.test("Regex: Examples - EscapeQuotedWordsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.EscapeQuotedWordsTest);
            QUnit.test("Regex: Examples - CreditCardExpirationParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.CreditCardExpirationParsingTest);
            QUnit.test("Regex: Examples - UrlParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.UrlParsingTest);
            QUnit.test("Regex IMNSX - MsdnInlineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnInlineOptionsTest);
            QUnit.test("Regex IMNSX - MsdnIgnoreCaseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIgnoreCaseTest);
            QUnit.test("Regex IMNSX - MsdnMultilineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnMultilineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnSinglelineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnSinglelineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest1);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest3);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest4);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest1);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest2);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest3);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest4);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest6);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest7);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest1);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest2);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest4);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest5);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest6);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest7);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest8", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest8);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest9", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest9);
            QUnit.test("Regex IMNSX - InlineCommentTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.InlineCommentTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest3);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest4);
            QUnit.test("Regex: Lookahead - MsdnPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.MsdnPositiveLookaheadTest);
            QUnit.test("Regex: Lookahead - MsdnNegativeLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.MsdnNegativeLookaheadTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadTest1);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadTest2);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadTest1);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadTest2);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadGroupCombineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadGroupCombineTest);
            QUnit.test("Regex: Lookbehind - MsdnPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.MsdnPositiveLookbehindTest);
            QUnit.test("Regex: Lookbehind - MsdnNegativeLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.MsdnNegativeLookbehindTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest1);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest3);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithMatchOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithMatchOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindTest1);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindWithOffsetTest);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.MsdnNonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.MsdnNonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest3);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest4);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest5);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingWithOffsetTest);
            QUnit.test("RegexOptions - MsdnIgnoreCaseOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnIgnoreCaseOptionTest);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnMultilineOptionTest1);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnMultilineOptionTest2);
            QUnit.test("RegexOptions - MsdnSinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnSinglelineOptionTest);
            QUnit.test("RegexOptions - MsdnIgnoreWhitespaceOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnIgnoreWhitespaceOptionTest);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnExplicitCaptureOptionTest1);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnExplicitCaptureOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest1);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest3);
            QUnit.test("RegexOptions - DefaultLineOptionsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.DefaultLineOptionsTest1);
            QUnit.test("RegexOptions - DefaultLineOptionsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.DefaultLineOptionsTest2);
            QUnit.test("RegexOptions - MultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineOptionTest1);
            QUnit.test("RegexOptions - MultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineOptionTest2);
            QUnit.test("RegexOptions - SinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.SinglelineOptionTest);
            QUnit.test("RegexOptions - SinglelineDotCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.SinglelineDotCharTest);
            QUnit.test("RegexOptions - MultilineAndSinglelineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineAndSinglelineOptionsTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNTimesTest1);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNTimesTest2);
            QUnit.test("Regex: Quantifiers - MsdnNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNToMTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNToMTimesTest);
            QUnit.test("Regex: Quantifiers - ZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.ZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest3);
            QUnit.test("Regex: Quantifiers - ZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.ZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyOneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyOneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrOneTimeTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrOneTimeTest2);
            QUnit.test("Regex Timeouts - RegexTimeoutValidationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexTimeoutValidationWorks);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexIsMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexIsMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexNextMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexNextMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceEvaluatorWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceEvaluatorWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexSplitWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexSplitWorksWithLongTimeout);
            QUnit.module("RegexJS");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.TypePropertiesAreCorrect);
            QUnit.test("StringOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.StringOnlyConstructorWorks);
            QUnit.test("ConstructorWithFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.ConstructorWithFlagsWorks);
            QUnit.test("GlobalFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.GlobalFlagWorks);
            QUnit.test("IgnoreCaseFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.IgnoreCaseFlagWorks);
            QUnit.test("MultilineFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.MultilineFlagWorks);
            QUnit.test("PatternPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.PatternPropertyWorks);
            QUnit.test("SourcePropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.SourcePropertyWorks);
            QUnit.test("ExecWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.ExecWorks);
            QUnit.test("LastIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.LastIndexWorks);
            QUnit.test("TestWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.TestWorks);
            QUnit.module("Runtime helpers");
            QUnit.test("GetHashCodeWoksForObject_SPI_1570", Bridge.Test.Runtime.BridgeClientTestRunner.RuntimeHelpersTests.GetHashCodeWoksForObject_SPI_1570);
            QUnit.module("RValue");
            QUnit.test("RValue - TestSimpleStruct", Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests.TestSimpleStruct);
            QUnit.test("RValue - TestSimpleClass", Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests.TestSimpleClass);
            QUnit.test("RValue - TestSimpleType", Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests.TestSimpleType);
            QUnit.test("RValue - TestRefOutGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests.TestRefOutGeneric);
            QUnit.module("Script");
            QUnit.test("BooleanWorks_SPI_1619", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.BooleanWorks_SPI_1619);
            QUnit.test("EvalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.EvalWorks);
            QUnit.test("IsNullWorks_SPI_1618", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.IsNullWorks_SPI_1618);
            QUnit.test("IsUndefinedWorks_SPI_1616", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.IsUndefinedWorks_SPI_1616);
            QUnit.test("HasValueWorks_SPI_1617", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.HasValueWorks_SPI_1617);
            QUnit.test("TypeOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.TypeOfWorks);
            QUnit.test("DeleteWorksForJsClass_SPI_1571", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.DeleteWorksForJsClass_SPI_1571);
            QUnit.test("DeleteWorksForClassPrototype_SPI_1571", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.DeleteWorksForClassPrototype_SPI_1571);
            QUnit.test("InWorks_SPI_1573", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.InWorks_SPI_1573);
            QUnit.test("InvokeMethodWorks_SPI_1572", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.InvokeMethodWorks_SPI_1572);
            QUnit.test("ParseIntWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.ParseIntWithoutRadixWorks);
            QUnit.test("ParseIntWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests.ParseIntWithRadixWorks);
            QUnit.module("Simple types");
            QUnit.test("Boolean - TypePropertiesAreCorrect_SPI_1575", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.TypePropertiesAreCorrect_SPI_1575);
            QUnit.test("Boolean - DefaultValueIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.DefaultValueIsFalse);
            QUnit.test("Boolean - CreatingInstanceReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.CreatingInstanceReturnsFalse);
            QUnit.test("Boolean - DefaultConstructorReturnsFalse_SPI_1576", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.DefaultConstructorReturnsFalse_SPI_1576);
            QUnit.test("Boolean - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.GetHashCodeWorks);
            QUnit.test("Boolean - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ObjectEqualsWorks);
            QUnit.test("Boolean - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.IEquatableEqualsWorks);
            QUnit.test("Boolean - LogicalExclusiveOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalExclusiveOrWorks);
            QUnit.test("Boolean - LogicalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalAndWorks);
            QUnit.test("Boolean - LogicalNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalNegationWorks);
            QUnit.test("Boolean - ConditionalOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalOperatorWorks);
            QUnit.test("Boolean - ConditionalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalAndWorks);
            QUnit.test("Boolean - ConditionalOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalOrWorks);
            QUnit.test("Boolean - EqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.EqualityWorks);
            QUnit.test("Boolean - InequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.InequalityWorks);
            QUnit.test("Boolean - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.CompareToWorks);
            QUnit.test("Boolean - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.IComparableCompareToWorks);
            QUnit.test("Boolean - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ParseWorks);
            QUnit.test("Boolean - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.TryParseWorks);
            QUnit.test("Boolean - BoolStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.BoolStringWorks);
            QUnit.test("Byte - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Byte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CastsWork);
            QUnit.test("Byte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.DefaultValueIs0);
            QUnit.test("Byte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.DefaultConstructorReturnsZero);
            QUnit.test("Byte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CreatingInstanceReturnsZero);
            QUnit.test("Byte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ConstantsWork);
            QUnit.test("Byte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.FormatWorks);
            QUnit.test("Byte - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithFormatWorks);
            QUnit.test("Byte - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Byte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IFormattableToStringWorks);
            QUnit.test("Byte - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.TryParseWorks_SPI_1592);
            QUnit.test("Byte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ParseWorks);
            QUnit.test("Byte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithoutRadixWorks);
            QUnit.test("Byte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithRadixWorks);
            QUnit.test("Byte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.GetHashCodeWorks);
            QUnit.test("Byte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.EqualsWorks);
            QUnit.test("Byte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IEquatableEqualsWorks);
            QUnit.test("Byte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CompareToWorks);
            QUnit.test("Byte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IComparableCompareToWorks);
            QUnit.test("Char - TypePropertiesAreInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.TypePropertiesAreInt32);
            QUnit.test("Char - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CastsWork);
            QUnit.test("Char - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.DefaultValueWorks);
            QUnit.test("Char - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.DefaultConstructorReturnsZero);
            QUnit.test("Char - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CreatingInstanceReturnsZero);
            QUnit.test("Char - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ConstantsWork);
            QUnit.test("Char - CharComparisonWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CharComparisonWorks);
            QUnit.test("Char - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ParseWorks);
            QUnit.test("Char - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.FormatWorks);
            QUnit.test("Char - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IFormattableToStringWorks);
            QUnit.test("Char - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToStringWorks);
            QUnit.test("Char - StaticToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.StaticToStringWorks);
            QUnit.test("Char - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.GetHashCodeWorks);
            QUnit.test("Char - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.EqualsWorks);
            QUnit.test("Char - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IEquatableEqualsWorks);
            QUnit.test("Char - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CompareToWorks);
            QUnit.test("Char - IsLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsLowerWorks);
            QUnit.test("Char - IsUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsUpperWorks);
            QUnit.test("Char - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToLowerWorks);
            QUnit.test("Char - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToUpperWorks);
            QUnit.test("Char - IsDigitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsDigitWorks);
            QUnit.test("Char - IsDigitWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsDigitWithStringAndIndexWorks);
            QUnit.test("Char - IsWhiteSpaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsWhiteSpaceWorks);
            QUnit.test("Char - IsWhiteSpaceWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsWhiteSpaceWithStringAndIndexWorks);
            QUnit.test("Char - IsPunctuationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsPunctuationWorks);
            QUnit.test("Char - IsPunctuationWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsPunctuationWithStringAndIndexWorks);
            QUnit.test("Char - IsLetterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsLetterWorks);
            QUnit.test("Char - IsLetterWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsLetterWithStringAndIndexWorks);
            QUnit.test("Decimal - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Decimal - DefaultValueIsDecimal0", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DefaultValueIsDecimal0);
            QUnit.test("Decimal - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CreatingInstanceReturnsZero);
            QUnit.test("Decimal - LiteralDecimalsWork_SPI_1590", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.LiteralDecimalsWork_SPI_1590);
            QUnit.test("Decimal - ConstantsWork_SPI_1590", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConstantsWork_SPI_1590);
            QUnit.test("Decimal - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DefaultConstructorReturnsZero);
            QUnit.test("Decimal - ConvertingConstructorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConvertingConstructorsWork);
            QUnit.test("Decimal - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FormatWorks);
            QUnit.test("Decimal - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ToStringWithRadixWorks);
            QUnit.test("Decimal - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ToStringWithoutRadixWorks);
            QUnit.test("Decimal - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Decimal - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.IFormattableToStringWorks);
            QUnit.test("Decimal - AddWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.AddWithStringWorks);
            QUnit.test("Decimal - ConversionsToDecimalWork_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConversionsToDecimalWork_SPI_1580);
            QUnit.test("Decimal - ConversionsFromDecimalWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConversionsFromDecimalWork);
            QUnit.test("Decimal - NullableConversionsToDecimalWork_SPI_1580_1581_1587", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableConversionsToDecimalWork_SPI_1580_1581_1587);
            QUnit.test("Decimal - DecimalToSByte_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToSByte_SPI_1580);
            QUnit.test("Decimal - DecimalToByte_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToByte_SPI_1580);
            QUnit.test("Decimal - DecimalToShort_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToShort_SPI_1580);
            QUnit.test("Decimal - DecimalToUShort_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToUShort_SPI_1580);
            QUnit.test("Decimal - DecimalToChar", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToChar);
            QUnit.test("Decimal - DecimalToInt_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToInt_SPI_1580);
            QUnit.test("Decimal - DecimalToUInt_SPI_1580", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToUInt_SPI_1580);
            QUnit.test("Decimal - DecimalToLong_SPI_1578", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToLong_SPI_1578);
            QUnit.test("Decimal - DecimalToULong_SPI_1584_1585", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToULong_SPI_1584_1585);
            QUnit.test("Decimal - DecimalToFloat", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToFloat);
            QUnit.test("Decimal - DecimalToDouble", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalToDouble);
            QUnit.test("Decimal - NullableDecimalToSByte", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToSByte);
            QUnit.test("Decimal - NullableDecimalToByte", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToByte);
            QUnit.test("Decimal - NullableDecimalToShort", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToShort);
            QUnit.test("Decimal - NullableDecimalToUShort", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToUShort);
            QUnit.test("Decimal - NullableDecimalToChar", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToChar);
            QUnit.test("Decimal - NullableDecimalToInt", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToInt);
            QUnit.test("Decimal - NullableDecimalToUInt", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToUInt);
            QUnit.test("Decimal - NullableDecimalToFloat_SPI_1579", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToFloat_SPI_1579);
            QUnit.test("Decimal - NullableDecimalToDouble_SPI_1579", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NullableDecimalToDouble_SPI_1579);
            QUnit.test("Decimal - OperatorsWork_SPI_1583", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.OperatorsWork_SPI_1583);
            QUnit.test("Decimal - LiftedOperatorsWork_SPI_1583", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.LiftedOperatorsWork_SPI_1583);
            QUnit.test("Decimal - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.AddWorks);
            QUnit.test("Decimal - CeilingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CeilingWorks);
            QUnit.test("Decimal - DivideWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DivideWorks);
            QUnit.test("Decimal - FloorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FloorWorks);
            QUnit.test("Decimal - RemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RemainderWorks);
            QUnit.test("Decimal - MultiplyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.MultiplyWorks);
            QUnit.test("Decimal - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NegateWorks);
            QUnit.test("Decimal - RoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RoundWorks);
            QUnit.test("Decimal - RoundWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RoundWithModeWorks);
            QUnit.test("Decimal - ParseWorks_SPI_1586", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ParseWorks_SPI_1586);
            QUnit.test("Decimal - TryParseWorks_SPI_1586", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.TryParseWorks_SPI_1586);
            QUnit.test("Decimal - TruncateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.TruncateWorks);
            QUnit.test("Decimal - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.SubtractWorks);
            QUnit.test("Decimal - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.GetHashCodeWorks);
            QUnit.test("Decimal - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ObjectEqualsWorks);
            QUnit.test("Decimal - DecimalEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalEqualsWorks);
            QUnit.test("Decimal - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.IEquatableEqualsWorks);
            QUnit.test("Decimal - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CompareToWorks);
            QUnit.test("Decimal - StaticCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.StaticCompareWorks);
            QUnit.test("Decimal - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.IComparableCompareToWorks);
            QUnit.test("Decimal - FullCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FullCoalesceWorks);
            QUnit.test("Decimal - ShortCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ShortCoalesceWorks);
            QUnit.test("Decimal - ImplementationTests_SPI_1588_1590_1650", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ImplementationTests_SPI_1588_1590_1650);
            QUnit.test("Decimal - InternalGetBytesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.InternalGetBytesWorks);
            QUnit.test("Decimal - InternalFromBytesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.InternalFromBytesWorks);
            QUnit.test("Double - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Double - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.DefaultValueIs0);
            QUnit.test("Double - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.CreatingInstanceReturnsZero);
            QUnit.test("Double - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ConstantsWork);
            QUnit.test("Double - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.DefaultConstructorReturnsZero);
            QUnit.test("Double - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.FormatWorks);
            QUnit.test("Double - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToStringWithFormatWorks);
            QUnit.test("Double - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Double - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IFormattableToStringWorks);
            QUnit.test("Double - IFormattableToStringWithCultureInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IFormattableToStringWithCultureInfoWorks);
            QUnit.test("Double - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToStringWorks);
            QUnit.test("Double - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToExponentialWorks);
            QUnit.test("Double - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("Double - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToFixed);
            QUnit.test("Double - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("Double - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToPrecisionWorks);
            QUnit.test("Double - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("Double - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsPositiveInfinityWorks_SPI_1600);
            QUnit.test("Double - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsNegativeInfinityWorks);
            QUnit.test("Double - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsInfinityWorks);
            QUnit.test("Double - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsFiniteWorks);
            QUnit.test("Double - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsNaNWorks);
            QUnit.test("Double - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.GetHashCodeWorks);
            QUnit.test("Double - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ObjectEqualsWorks);
            QUnit.test("Double - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IEquatableEqualsWorks);
            QUnit.test("Double - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.CompareToWorks);
            QUnit.test("Double - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IComparableCompareToWorks);
            QUnit.test("Double - ParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseCurrentCultureWorks);
            QUnit.test("Double - ParseCurrentCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseCurrentCultureThrows);
            QUnit.test("Double - ParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseRuCultureWorks);
            QUnit.test("Double - ParseRuCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseRuCultureThrows);
            QUnit.test("Double - TryParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TryParseCurrentCultureWorks);
            QUnit.test("Double - TryParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TryParseRuCultureWorks);
            QUnit.test("Int16 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CastsWork);
            QUnit.test("Int16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.DefaultValueIs0);
            QUnit.test("Int16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ConstantsWork);
            QUnit.test("Int16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.FormatWorks);
            QUnit.test("Int16 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithFormatWorks);
            QUnit.test("Int16 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IFormattableToStringWorks);
            QUnit.test("Int16 - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.TryParseWorks_SPI_1592);
            QUnit.test("Int16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ParseWorks);
            QUnit.test("Int16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithRadixWorks);
            QUnit.test("Int16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.GetHashCodeWorks);
            QUnit.test("Int16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.EqualsWorks);
            QUnit.test("Int16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IEquatableEqualsWorks);
            QUnit.test("Int16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CompareToWorks);
            QUnit.test("Int16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IComparableCompareToWorks);
            QUnit.test("Int32 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CastsWork);
            QUnit.test("Int32 - TypeIsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypeIsWorksForInt32);
            QUnit.test("Int32 - TypeAsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypeAsWorksForInt32);
            QUnit.test("Int32 - UnboxingWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.UnboxingWorksForInt32);
            QUnit.test("Int32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DefaultValueIs0);
            QUnit.test("Int32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ConstantsWork);
            QUnit.test("Int32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.FormatWorks);
            QUnit.test("Int32 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithFormatWorks);
            QUnit.test("Int32 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IFormattableToStringWorks);
            QUnit.test("Int32 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TryParseWorks);
            QUnit.test("Int32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ParseWorks);
            QUnit.test("Int32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithRadixWorks);
            QUnit.test("Int32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.GetHashCodeWorks);
            QUnit.test("Int32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.EqualsWorks);
            QUnit.test("Int32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IEquatableEqualsWorks);
            QUnit.test("Int32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CompareToWorks);
            QUnit.test("Int32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IComparableCompareToWorks);
            QUnit.test("Int32 - IntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerDivisionWorks);
            QUnit.test("Int32 - IntegerModuloWorks_SPI_1602", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerModuloWorks_SPI_1602);
            QUnit.test("Int32 - IntegerDivisionByZeroThrowsDivideByZeroException", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerDivisionByZeroThrowsDivideByZeroException);
            QUnit.test("Int32 - DoublesAreTruncatedWhenConvertedToIntegers", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DoublesAreTruncatedWhenConvertedToIntegers);
            QUnit.test("Int64 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.MinMaxValuesAreCorrect);
            QUnit.test("Int64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CastsWork);
            QUnit.test("Int64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.OverflowWorks);
            QUnit.test("Int64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CombinedTypesOperationsWork);
            QUnit.test("Int64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DefaultValueIs0);
            QUnit.test("Int64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.FormatWorks);
            QUnit.test("Int64 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithFormatWorks);
            QUnit.test("Int64 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Int64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IFormattableToStringWorks);
            QUnit.test("Int64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.TryParseWorks);
            QUnit.test("Int64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ParseWorks);
            QUnit.test("Int64 - CastingOfLargeDoublesToInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CastingOfLargeDoublesToInt64Works);
            QUnit.test("Int64 - DivisionOfLargeInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DivisionOfLargeInt64Works);
            QUnit.test("Int64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithRadixWorks);
            QUnit.test("Int64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.GetHashCodeWorks);
            QUnit.test("Int64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.EqualsWorks);
            QUnit.test("Int64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IEquatableEqualsWorks);
            QUnit.test("Int64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CompareToWorks);
            QUnit.test("Int64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IComparableCompareToWorks);
            QUnit.test("Int64 - ShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ShiftWorks);
            QUnit.test("Object - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.TypePropertiesAreCorrect);
            QUnit.test("Object - CanGetHashCodeForObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.CanGetHashCodeForObject);
            QUnit.test("Object - RepeatedCallsToGetHashCodeReturnsSameValue", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.RepeatedCallsToGetHashCodeReturnsSameValue);
            QUnit.test("Object - ObjectIsEqualToItself", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ObjectIsEqualToItself);
            QUnit.test("Object - ObjectIsNotEqualToOtherObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ObjectIsNotEqualToOtherObject);
            QUnit.test("Object - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.StaticEqualsWorks);
            QUnit.test("Object - ReferenceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ReferenceEqualsWorks);
            QUnit.test("Object - ToStringOverride", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ToStringOverride);
            QUnit.test("SByte - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("SByte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CastsWork);
            QUnit.test("SByte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.DefaultValueIs0);
            QUnit.test("SByte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.DefaultConstructorReturnsZero);
            QUnit.test("SByte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CreatingInstanceReturnsZero);
            QUnit.test("SByte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ConstantsWork);
            QUnit.test("SByte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.FormatWorks);
            QUnit.test("SByte - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithFormatWorks);
            QUnit.test("SByte - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("SByte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IFormattableToStringWorks);
            QUnit.test("SByte - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.TryParseWorks_SPI_1592);
            QUnit.test("SByte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ParseWorks);
            QUnit.test("SByte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithoutRadixWorks);
            QUnit.test("SByte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithRadixWorks);
            QUnit.test("SByte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.GetHashCodeWorks);
            QUnit.test("SByte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.EqualsWorks);
            QUnit.test("SByte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IEquatableEqualsWorks);
            QUnit.test("SByte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CompareToWorks);
            QUnit.test("SByte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IComparableCompareToWorks);
            QUnit.test("Float - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("Float - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.DefaultValueIs0);
            QUnit.test("Float - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.CreatingInstanceReturnsZero);
            QUnit.test("Float - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ConstantsWork);
            QUnit.test("Float - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.DefaultConstructorReturnsZero);
            QUnit.test("Float - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.FormatWorks);
            QUnit.test("Float - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToStringWithFormatWorks);
            QUnit.test("Float - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToStringWithFormatAndProviderWorks);
            QUnit.test("Float - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IFormattableToStringWorks);
            QUnit.test("Float - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToStringWorks);
            QUnit.test("Float - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToExponentialWorks);
            QUnit.test("Float - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("Float - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToFixed);
            QUnit.test("Float - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("Float - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToPrecisionWorks);
            QUnit.test("Float - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("Float - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsPositiveInfinityWorks_SPI_1600);
            QUnit.test("Float - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsNegativeInfinityWorks);
            QUnit.test("Float - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsInfinityWorks);
            QUnit.test("Float - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsFiniteWorks);
            QUnit.test("Float - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsNaNWorks);
            QUnit.test("Float - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.GetHashCodeWorks);
            QUnit.test("Float - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.EqualsWorks);
            QUnit.test("Float - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IEquatableEqualsWorks);
            QUnit.test("Float - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.CompareToWorks);
            QUnit.test("Float - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IComparableCompareToWorks);
            QUnit.test("Version - TestConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestConstructors);
            QUnit.test("Version - TestCloneCompare", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestCloneCompare);
            QUnit.test("Version - TestEqualsGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestEqualsGetHashCode);
            QUnit.test("Version - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestToString);
            QUnit.test("Version - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestParse);
            QUnit.test("Version - TestOperators", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestOperators);
            QUnit.test("Tuple - Tuple1Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple1Works);
            QUnit.test("Tuple - Tuple2Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple2Works);
            QUnit.test("Tuple - Tuple3Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple3Works);
            QUnit.test("Tuple - Tuple4Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple4Works);
            QUnit.test("Tuple - Tuple5Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple5Works);
            QUnit.test("Tuple - Tuple6Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple6Works);
            QUnit.test("Tuple - Tuple7Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple7Works);
            QUnit.test("Tuple - Tuple8Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple8Works);
            QUnit.test("UInt16 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CastsWork);
            QUnit.test("UInt16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.DefaultValueIs0);
            QUnit.test("UInt16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ConstantsWork);
            QUnit.test("UInt16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.FormatWorks);
            QUnit.test("UInt16 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithFormatWorks);
            QUnit.test("UInt16 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IFormattableToStringWorks);
            QUnit.test("UInt16 - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.TryParseWorks_SPI_1592);
            QUnit.test("UInt16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ParseWorks);
            QUnit.test("UInt16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithRadixWorks);
            QUnit.test("UInt16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.GetHashCodeWorks);
            QUnit.test("UInt16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.EqualsWorks);
            QUnit.test("UInt16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IEquatableEqualsWorks);
            QUnit.test("UInt16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CompareToWorks);
            QUnit.test("UInt16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IComparableCompareToWorks);
            QUnit.test("UInt32 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CastsWork);
            QUnit.test("UInt32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.DefaultValueIs0);
            QUnit.test("UInt32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ConstantsWork);
            QUnit.test("UInt32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.FormatWorks);
            QUnit.test("UInt32 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithFormatWorks);
            QUnit.test("UInt32 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IFormattableToStringWorks);
            QUnit.test("UInt32 - TryParseWorks_SPI_1592", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.TryParseWorks_SPI_1592);
            QUnit.test("UInt32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ParseWorks);
            QUnit.test("UInt32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithRadixWorks);
            QUnit.test("UInt32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.GetHashCodeWorks);
            QUnit.test("UInt32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.EqualsWorks);
            QUnit.test("UInt32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IEquatableEqualsWorks);
            QUnit.test("UInt32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CompareToWorks);
            QUnit.test("UInt32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IComparableCompareToWorks);
            QUnit.test("UInt64 - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.TypePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.MinMaxValuesAreCorrect);
            QUnit.test("UInt64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CastsWork);
            QUnit.test("UInt64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.OverflowWorks);
            QUnit.test("UInt64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CombinedTypesOperationsWork);
            QUnit.test("UInt64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DefaultValueIs0);
            QUnit.test("UInt64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt64 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ConstantsWork);
            QUnit.test("UInt64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.FormatWorks);
            QUnit.test("UInt64 - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithFormatWorks);
            QUnit.test("UInt64 - ToStringWithFormatAndProviderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithFormatAndProviderWorks);
            QUnit.test("UInt64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IFormattableToStringWorks);
            QUnit.test("UInt64 - CastingOfLargeValuesToUInt64Works_SPI_1591", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CastingOfLargeValuesToUInt64Works_SPI_1591);
            QUnit.test("UInt64 - DivisionOfLargeUInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DivisionOfLargeUInt64Works);
            QUnit.test("UInt64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.TryParseWorks);
            QUnit.test("UInt64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ParseWorks);
            QUnit.test("UInt64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithRadixWorks);
            QUnit.test("UInt64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.GetHashCodeWorks);
            QUnit.test("UInt64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.EqualsWorks);
            QUnit.test("UInt64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IEquatableEqualsWorks);
            QUnit.test("UInt64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CompareToWorks);
            QUnit.test("UInt64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IComparableCompareToWorks);
            QUnit.module("String");
            QUnit.test("StringFormatTests - FormatShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.FormatShouldThrow);
            QUnit.test("StringFormatTests - FormatProviderShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.FormatProviderShouldThrow);
            QUnit.test("StringFormatTests - Simple", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.Simple);
            QUnit.test("StringFormatTests - ValueFormating", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.ValueFormating);
            QUnit.test("StringFormatTests - SpaceControlling", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.SpaceControlling);
            QUnit.test("StringFormatTests - Aligment", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.Aligment);
            QUnit.test("StringFormatTests - PadIntegerWithLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadIntegerWithLeadingZeros);
            QUnit.test("StringFormatTests - PadIntegerWithSpecificNumberLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadIntegerWithSpecificNumberLeadingZeros);
            QUnit.test("StringFormatTests - PadNumericWithLeadingZerosToLength", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadNumericWithLeadingZerosToLength);
            QUnit.test("StringFormatTests - PadNumericWithSpecificNumberOfLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadNumericWithSpecificNumberOfLeadingZeros);
            QUnit.test("FormattableString - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.TypePropertiesAreCorrect);
            QUnit.test("FormattableString - ArgumentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ArgumentCountWorks);
            QUnit.test("FormattableString - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.FormatWorks);
            QUnit.test("FormattableString - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.GetArgumentWorks);
            QUnit.test("FormattableString - GetArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.GetArgumentsWorks);
            QUnit.test("FormattableString - ArrayReturnedByGetArgumentsCanBeModified", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ArrayReturnedByGetArgumentsCanBeModified);
            QUnit.test("FormattableString - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ToStringWorks);
            QUnit.test("FormattableString - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.InvariantWorks);
            QUnit.test("String - TypePropertiesAreCorrect_SPI_1597", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TypePropertiesAreCorrect_SPI_1597);
            QUnit.test("String - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.DefaultConstructorWorks);
            QUnit.test("String - CharAndCountConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CharAndCountConstructorWorks);
            QUnit.test("String - CharArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CharArrayConstructorWorks);
            QUnit.test("String - CharArrayWithStartIndexAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CharArrayWithStartIndexAndLengthConstructorWorks);
            QUnit.test("String - CopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CopyToWorks);
            QUnit.test("String - EmptyFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EmptyFieldWorks);
            QUnit.test("String - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LengthPropertyWorks);
            QUnit.test("String - CompareToWorks_353", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareToWorks_353);
            QUnit.test("String - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareWorks);
            QUnit.test("String - CompareWithIgnoreCaseArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareWithIgnoreCaseArgWorks);
            QUnit.test("String - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ConcatWorks);
            QUnit.test("String - ConcatWithObjectsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ConcatWithObjectsWorks);
            QUnit.test("String - EndsWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EndsWithCharWorks);
            QUnit.test("String - EndsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EndsWithStringWorks);
            QUnit.test("String - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StaticEqualsWorks);
            QUnit.test("String - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorks);
            QUnit.test("String - FormatWorksExtended", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorksExtended);
            QUnit.test("String - FormatWorksWithIFormattable_SPI_1598", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorksWithIFormattable_SPI_1598);
            QUnit.test("String - FormatWorksWithIFormattableAndFormatProvider_SPI_1598", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorksWithIFormattableAndFormatProvider_SPI_1598);
            QUnit.test("String - FormatCanUseEscapedBraces", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatCanUseEscapedBraces);
            QUnit.test("String - IndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWorks);
            QUnit.test("String - IndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWorks);
            QUnit.test("String - IndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWithStartIndexWorks);
            QUnit.test("String - IndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWithStartIndexWorks);
            QUnit.test("String - IndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWithStartIndexWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.InsertWorks);
            QUnit.test("String - IsNullOrEmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IsNullOrEmptyWorks);
            QUnit.test("String - LastIndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWorks);
            QUnit.test("String - LastIndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWithStartIndexWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWithStartIndexWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWithStartIndexWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - PadLeftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadLeftWorks);
            QUnit.test("String - PadLeftWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadLeftWithCharWorks);
            QUnit.test("String - PadRightWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadRightWorks);
            QUnit.test("String - PadRightWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadRightWithCharWorks);
            QUnit.test("String - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.RemoveWorks);
            QUnit.test("String - RemoveWithCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.RemoveWithCountWorks);
            QUnit.test("String - ReplaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ReplaceWorks);
            QUnit.test("String - ReplaceCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ReplaceCharWorks);
            QUnit.test("String - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharWorks);
            QUnit.test("String - SplitWithCharsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsAndLimitWorks);
            QUnit.test("String - SplitWithCharsAndStringSplitOptionsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsAndStringSplitOptionsAndLimitWorks);
            QUnit.test("String - SomeNetSplitTests", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SomeNetSplitTests);
            QUnit.test("String - SplitWithCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsWorks);
            QUnit.test("String - SplitWithStringsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithStringsWorks);
            QUnit.test("String - SplitWithStringsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithStringsAndLimitWorks);
            QUnit.test("String - StartsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StartsWithStringWorks);
            QUnit.test("String - SubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SubstringWorks);
            QUnit.test("String - SubstringWithLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SubstringWithLengthWorks);
            QUnit.test("String - ToLowerCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToLowerCaseWorks);
            QUnit.test("String - ToUpperCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToUpperCaseWorks);
            QUnit.test("String - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToLowerWorks);
            QUnit.test("String - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToUpperWorks);
            QUnit.test("String - TrimWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimWorks);
            QUnit.test("String - TrimCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimCharsWorks);
            QUnit.test("String - TrimStartCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimStartCharsWorks);
            QUnit.test("String - TrimEndCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimEndCharsWorks);
            QUnit.test("String - TrimStartWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimStartWorks);
            QUnit.test("String - TrimEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimEndWorks);
            QUnit.test("String - StringEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringEqualityWorks);
            QUnit.test("String - StringInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringInequalityWorks);
            QUnit.test("String - StringIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringIndexingWorks);
            QUnit.test("String - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.GetHashCodeWorks);
            QUnit.test("String - InstanceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.InstanceEqualsWorks);
            QUnit.test("String - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IEquatableEqualsWorks);
            QUnit.test("String - StringEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringEqualsWorks);
            QUnit.test("String - StaticCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StaticCompareToWorks);
            QUnit.test("String - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareToWorks);
            QUnit.test("String - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IComparableCompareToWorks);
            QUnit.test("String - JoinWorks_SPI_1599", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.JoinWorks_SPI_1599);
            QUnit.test("String - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ContainsWorks);
            QUnit.test("String - ToCharArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToCharArrayWorks);
            QUnit.test("String - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.Strings);
            QUnit.test("String - Enumerable", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.Enumerable);
            QUnit.test("StringBuilder - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.TypePropertiesAreCorrect);
            QUnit.test("StringBuilder - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.DefaultConstructorWorks);
            QUnit.test("StringBuilder - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ConstructorWithCapacityWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.InitialTextConstructorWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.InitialTextConstructorWithCapacityWorks);
            QUnit.test("StringBuilder - SubstringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.SubstringConstructorWorks);
            QUnit.test("#1615 - SubstringConstructorWorks_SPI_1615", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.SubstringConstructorWorks_SPI_1615);
            QUnit.test("StringBuilder - AppendBoolWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendBoolWorks);
            QUnit.test("StringBuilder - AppendCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendCharWorks);
            QUnit.test("StringBuilder - AppendIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendIntWorks);
            QUnit.test("StringBuilder - AppendDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendDoubleWorks);
            QUnit.test("StringBuilder - AppendObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendObjectWorks);
            QUnit.test("StringBuilder - AppendStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendStringWorks);
            QUnit.test("StringBuilder - AppendLineWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineWorks);
            QUnit.test("StringBuilder - AppendLineStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineStringWorks);
            QUnit.test("StringBuilder - AppendLineBoolWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineBoolWorks);
            QUnit.test("StringBuilder - AppendLineCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineCharWorks);
            QUnit.test("StringBuilder - AppendLineIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineIntWorks);
            QUnit.test("StringBuilder - AppendLineDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineDoubleWorks);
            QUnit.test("StringBuilder - AppendLineObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineObjectWorks);
            QUnit.test("StringBuilder - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ClearWorks);
            QUnit.test("StringBuilder - SetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.SetLengthWorks);
            QUnit.test("StringBuilder - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ToStringWorks);
            QUnit.test("StringBuilder - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.LengthPropertyWorks);
            QUnit.test("StringBuilder - StringBuilders", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.StringBuilders);
            QUnit.test("#2902 - StringBuilderIndexerGetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.StringBuilderIndexerGetWorks);
            QUnit.test("#2902 - StringBuilderIndexerSetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.StringBuilderIndexerSetWorks);
            QUnit.module("Struct");
            QUnit.test("Structs - IsClassIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.IsClassIsFalse);
            QUnit.test("Structs - UserDefinedStructCanBeUsed", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.UserDefinedStructCanBeUsed);
            QUnit.test("Structs - DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized);
            QUnit.test("Structs - DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric);
            QUnit.test("Structs - DefaultValueOfStructIsInstanceWithAllMembersInitialized", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitialized);
            QUnit.test("Structs - DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric);
            QUnit.test("Structs - DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect);
            QUnit.test("Structs - DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric);
            QUnit.test("Structs - DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks);
            QUnit.test("Structs - DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric);
            QUnit.test("Structs - DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields);
            QUnit.test("Structs - DefaultEqualsUsesValueEqualityForAllMembers", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.DefaultEqualsUsesValueEqualityForAllMembers);
            QUnit.test("Structs - CanOverrideGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CanOverrideGetHashCode);
            QUnit.test("Structs - CanOverrideEquals", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CanOverrideEquals);
            QUnit.test("Structs - CanLiftUserDefinedBinaryOperator", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CanLiftUserDefinedBinaryOperator);
            QUnit.test("Structs - CanLiftUserDefinedUnaryOperator_SPI_1634", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CanLiftUserDefinedUnaryOperator_SPI_1634);
            QUnit.test("Structs - ClonedValueTypeIsCorrectType", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.ClonedValueTypeIsCorrectType);
            QUnit.test("Structs - FieldsAreClonedWhenValueTypeIsCopied", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.FieldsAreClonedWhenValueTypeIsCopied);
            QUnit.test("Structs - AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied);
            QUnit.test("Structs - PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied);
            QUnit.test("Structs - NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613);
            QUnit.test("Structs - GenericMutableValueTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.GenericMutableValueTypeWorks);
            QUnit.test("Structs - CloningValueTypeWithNamedDefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CloningValueTypeWithNamedDefaultConstructorWorks);
            QUnit.test("Structs - CloningNullableValueTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.CloningNullableValueTypesWorks);
            QUnit.test("Structs - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.ToStringWorks);
            QUnit.test("Structs - ToStringNullabeTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs.ToStringNullabeTypeWorks);
            QUnit.module("System Console");
            QUnit.test("TestClear", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestClear);
            QUnit.test("TestWriteLine", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLine);
            QUnit.test("TestWriteLineMultiline", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineMultiline);
            QUnit.test("TestWriteLineBool", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineBool);
            QUnit.test("TestWriteLineChar", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineChar);
            QUnit.test("TestWriteLineDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineDecimal);
            QUnit.test("TestWriteLineDouble", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineDouble);
            QUnit.test("TestWriteLineInt32", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineInt32);
            QUnit.test("TestWriteLineInt64", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineInt64);
            QUnit.test("TestWriteLineObject", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineObject);
            QUnit.test("TestWriteLineSingle", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineSingle);
            QUnit.test("TestWriteLineString", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineString);
            QUnit.test("TestWriteLineFormatString1", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineFormatString1);
            QUnit.test("TestWriteLineFormatString2", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineFormatString2);
            QUnit.test("TestWriteLineFormatString3", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineFormatString3);
            QUnit.test("TestWriteLineFormatString4", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineFormatString4);
            QUnit.test("TestWriteLineFormatString5", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineFormatString5);
            QUnit.test("TestWriteLineUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineUInt32);
            QUnit.test("TestWriteLineUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineUInt64);
            QUnit.test("TestWriteLineCharArray", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineCharArray);
            QUnit.test("TestWriteLineCharArrayIndexCount", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineCharArrayIndexCount);
            QUnit.test("TestWriteLineEnum", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineEnum);
            QUnit.test("TestWriteLineDecimalNullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineDecimalNullable);
            QUnit.test("TestWriteLineInt64Nullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineInt64Nullable);
            QUnit.test("TestWriteLineUInt64Nullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteLineUInt64Nullable);
            QUnit.test("TestWriteMultiline", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteMultiline);
            QUnit.test("TestWriteBool", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteBool);
            QUnit.test("TestWriteChar", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteChar);
            QUnit.test("TestWriteDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteDecimal);
            QUnit.test("TestWriteDouble", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteDouble);
            QUnit.test("TestWriteInt32", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteInt32);
            QUnit.test("TestWriteInt64", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteInt64);
            QUnit.test("TestWriteObject", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteObject);
            QUnit.test("TestWriteSingle", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteSingle);
            QUnit.test("TestWriteString", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteString);
            QUnit.test("TestWriteFormatString1", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteFormatString1);
            QUnit.test("TestWriteFormatString2", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteFormatString2);
            QUnit.test("TestWriteFormatString3", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteFormatString3);
            QUnit.test("TestWriteFormatString4", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteFormatString4);
            QUnit.test("TestWriteFormatString5", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteFormatString5);
            QUnit.test("TestWriteUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteUInt32);
            QUnit.test("TestWriteUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteUInt64);
            QUnit.test("TestWriteCharArray", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteCharArray);
            QUnit.test("TestWriteCharArrayIndexCount", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteCharArrayIndexCount);
            QUnit.test("TestWriteEnum", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteEnum);
            QUnit.test("TestWriteDecimalNullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteDecimalNullable);
            QUnit.test("TestWriteInt64Nullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteInt64Nullable);
            QUnit.test("TestWriteUInt64Nullable", Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests.TestWriteUInt64Nullable);
            QUnit.module("System interface");
            QUnit.test("IComparable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IEquatable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.module("Threading");
            QUnit.test("Async - AsyncVoid", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncVoid);
            QUnit.test("Async - AsyncTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTask);
            QUnit.test("Async - AsyncTaskBodyThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTaskBodyThrowsException);
            QUnit.test("Async - AwaitTaskThatFaults", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AwaitTaskThatFaults);
            QUnit.test("Async - AggregateExceptionsAreUnwrappedWhenAwaitingTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AggregateExceptionsAreUnwrappedWhenAwaitingTask);
            QUnit.test("Async - AsyncTaskThatReturnsValue", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTaskThatReturnsValue);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenSourceAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenSourceAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenRegistrationAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenRegistrationAreCorrect);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled);
            QUnit.test("CancellationToken - CancellationTokenNoneIsNotCancelledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenNoneIsNotCancelledAndCannotBe);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource);
            QUnit.test("CancellationToken - IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod);
            QUnit.test("CancellationToken - ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled);
            QUnit.test("CancellationToken - CancelWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWithoutArgumentsWorks);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsFalse);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsTrue);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterWithArgumentOnACancelledSourceInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterWithArgumentOnACancelledSourceInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOverloadsWithUseSynchronizationContextWork", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOverloadsWithUseSynchronizationContextWork);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedNonCancelledDoesNothing", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately);
            QUnit.test("CancellationToken - DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice);
            QUnit.test("CancellationToken - RegistrationsCanBeCompared", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegistrationsCanBeCompared);
            QUnit.test("CancellationToken - RegistrationsCanBeUnregistered", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegistrationsCanBeUnregistered);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm);
            QUnit.test("CancellationToken - LinkedSourceWithTwoTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.LinkedSourceWithTwoTokensWorks);
            QUnit.test("CancellationToken - LinkedSourceWithThreeTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.LinkedSourceWithThreeTokensWorks);
            QUnit.test("Promise - TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWorksWhenPromiseFails", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWorksWhenPromiseFails);
            QUnit.test("Promise - CompletingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.CompletingPromiseCanBeAwaited);
            QUnit.test("Promise - FailingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.FailingPromiseCanBeAwaited);
            QUnit.test("Promise - TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes);
            QUnit.test("Tasks - IAsyncResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.IAsyncResultWorks);
            QUnit.test("Tasks - TaskCompletionSourceTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingResult", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingResult);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingASingleException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingASingleException);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingTwoExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingTwoExceptions);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenCancelling", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenCancelling);
            QUnit.test("Tasks - CancelledTaskThrowsTaskCanceledExceptionWhenAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited);
            QUnit.test("Tasks - CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed);
            QUnit.test("Tasks - SetResultFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetResultFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetCanceledFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetCanceledFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetExceptionFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetExceptionFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - CompletedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CompletedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - CancelledTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - FaultedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.FaultedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - TrySetResultReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetResultReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetCanceledReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetExceptionReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskWorkWithNoResultAndNoException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException);
            QUnit.test("Tasks - ContinueWithWhenCallbackThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithWhenCallbackThrowsAnException);
            QUnit.test("Tasks - ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForNonGenericTaskCanReturnAValue);
            QUnit.test("Tasks - ContinueWithWithNoReturnValueForGenericTaskWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithWithNoReturnValueForGenericTaskWorks);
            QUnit.test("Tasks - ContinueWithForGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForGenericTaskCanReturnAValue);
            QUnit.test("Tasks - DelayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.DelayWorks);
            QUnit.test("Tasks - FromResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.FromResultWorks);
            QUnit.test("Tasks - RunWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWithoutResultWorks);
            QUnit.test("Tasks - RunWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWithResultWorks);
            QUnit.test("Tasks - RunWorksWhenBodyThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWorksWhenBodyThrows);
            QUnit.test("Tasks - WhenAllParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAllParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted);
            QUnit.test("Tasks - WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled);
            QUnit.test("Tasks - WhenAnyParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAnyParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyFaultsIfTheFirstTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyFaultsIfTheFirstTaskFaulted);
            QUnit.test("Tasks - WhenAnyIsCancelledIfTheFirstTaskWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyIsCancelledIfTheFirstTaskWasCancelled);
            QUnit.test("Tasks - ConstructorWithOnlyActionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithOnlyActionWorks);
            QUnit.test("Tasks - ConstructorWithActionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithActionAndStateWorks);
            QUnit.test("Tasks - ExceptionInManuallyCreatedTaskIsStoredOnTheTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ExceptionInManuallyCreatedTaskIsStoredOnTheTask);
            QUnit.test("Tasks - ConstructorWithOnlyFunctionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithOnlyFunctionWorks);
            QUnit.test("Tasks - ConstructorWithFunctionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithFunctionAndStateWorks);
            QUnit.test("TimerTests - TestTimerThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestTimerThrows);
            QUnit.test("TimerTests - TestStaticCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestStaticCallbackWithDispose);
            QUnit.test("TimerTests - TestStaticCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestStaticCallbackWithChange);
            QUnit.test("TimerTests - TestInstanceCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInstanceCallbackWithDispose);
            QUnit.test("TimerTests - TestInstanceCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInstanceCallbackWithChange);
            QUnit.test("TimerTests - TestInfiniteTimer", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInfiniteTimer);
            QUnit.module("Type system");
            QUnit.test("Type - GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.GettingBaseTypeWorks);
            QUnit.test("Type - IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.IsAssignableFromWorks);
            QUnit.test("Type - IsGetTypeCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.IsGetTypeCodeWorks);
            QUnit.module("Typed Arrays");
            QUnit.test("ArrayBufferTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.TypePropertiesAreCorrect);
            QUnit.test("ArrayBufferTests - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.ConstructorWorks);
            QUnit.test("ArrayBufferTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.ByteLengthPropertyWorks);
            QUnit.test("DataViewTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.TypePropertiesAreCorrect);
            QUnit.test("DataViewTests - ArrayBufferOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferOnlyConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferAndByteOffsetConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetAndByteLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks);
            QUnit.test("DataViewTests - GetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt8Works);
            QUnit.test("DataViewTests - GetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint8Works);
            QUnit.test("DataViewTests - GetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt16Works);
            QUnit.test("DataViewTests - GetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint16Works);
            QUnit.test("DataViewTests - GetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt32Works);
            QUnit.test("DataViewTests - GetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint32Works);
            QUnit.test("DataViewTests - GetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetFloat32Works);
            QUnit.test("DataViewTests - GetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetFloat64Works);
            QUnit.test("DataViewTests - SetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt8Works);
            QUnit.test("DataViewTests - SetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint8Works);
            QUnit.test("DataViewTests - SetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt16Works);
            QUnit.test("DataViewTests - SetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint16Works);
            QUnit.test("DataViewTests - SetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt32Works);
            QUnit.test("DataViewTests - SetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint32Works);
            QUnit.test("DataViewTests - SetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetFloat32Works);
            QUnit.test("DataViewTests - SetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetFloat64Works);
            QUnit.test("Float32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.LengthConstructorWorks);
            QUnit.test("Float32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.CopyConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.LengthWorks);
            QUnit.test("Float32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IndexingWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetFloat32ArrayWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetFloat32ArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.BufferPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IndexOfWorks);
            QUnit.test("Float32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ContainsWorks);
            QUnit.test("Float32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionCopyTo);
            QUnit.test("Float64ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.LengthConstructorWorks);
            QUnit.test("Float64ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float64ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.CopyConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float64ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float64ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.LengthWorks);
            QUnit.test("Float64ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IndexingWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetFloat64ArrayWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetFloat64ArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float64ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.BufferPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float64ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IndexOfWorks);
            QUnit.test("Float64ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ContainsWorks);
            QUnit.test("Float64ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float64ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionCopyTo);
            QUnit.test("Int16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.LengthConstructorWorks);
            QUnit.test("Int16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.CopyConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.LengthWorks);
            QUnit.test("Int16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IndexingWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetInt16ArrayWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetInt16ArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.BufferPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IndexOfWorks);
            QUnit.test("Int16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ContainsWorks);
            QUnit.test("Int16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionCopyTo);
            QUnit.test("Int32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.LengthConstructorWorks);
            QUnit.test("Int32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.CopyConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.LengthWorks);
            QUnit.test("Int32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IndexingWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetInt32ArrayWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetInt32ArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.BufferPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IndexOfWorks);
            QUnit.test("Int32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ContainsWorks);
            QUnit.test("Int32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionCopyTo);
            QUnit.test("Int8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.LengthConstructorWorks);
            QUnit.test("Int8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.CopyConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.LengthWorks);
            QUnit.test("Int8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IndexingWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetInt8ArrayWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetInt8ArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.BufferPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IndexOfWorks);
            QUnit.test("Int8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ContainsWorks);
            QUnit.test("Int8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionCopyTo);
            QUnit.test("Constant Values - TestConstantValues", Bridge.Test.Runtime.BridgeClientTestRunner.TypedArray.TestConstantValues);
            QUnit.test("Uint16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.LengthWorks);
            QUnit.test("Uint16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IndexingWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetUint16ArrayWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetUint16ArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IndexOfWorks);
            QUnit.test("Uint16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ContainsWorks);
            QUnit.test("Uint16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.LengthWorks);
            QUnit.test("Uint32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IndexingWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetUint32ArrayWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetUint32ArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IndexOfWorks);
            QUnit.test("Uint32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ContainsWorks);
            QUnit.test("Uint32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.LengthWorks);
            QUnit.test("Uint8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IndexingWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetUint8ArrayWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetUint8ArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IndexOfWorks);
            QUnit.test("Uint8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ContainsWorks);
            QUnit.test("Uint8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromUint8ArrayWorks_SPI_TODO", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ConstructorFromUint8ArrayWorks_SPI_TODO);
            QUnit.test("Uint8ClampedArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ClampedArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.LengthWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IndexingWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetUint8ClampedArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetUint8ClampedArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ClampedArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IndexOfWorks);
            QUnit.test("Uint8ClampedArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ContainsWorks);
            QUnit.test("Uint8ClampedArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - ICollectionMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IListMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionCopyTo);
            QUnit.module("Utilities");
            QUnit.test("Environment - CommandLineNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CommandLineNotEmpty);
            QUnit.test("Environment - CurrentDirectoryNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CurrentDirectoryNotEmpty);
            QUnit.test("Environment - CurrentManagedThreadIdZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CurrentManagedThreadIdZero);
            QUnit.test("Environment - ExitCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExitCodeWorks);
            QUnit.test("Environment - HasShutdownStartedFalse", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.HasShutdownStartedFalse);
            QUnit.test("Environment - Is64BitOperatingSystemNotNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.Is64BitOperatingSystemNotNull);
            QUnit.test("Environment - Is64BitProcessNotNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.Is64BitProcessNotNull);
            QUnit.test("Environment - MachineNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.MachineNameEmpty);
            QUnit.test("Environment - NewLineIsAStringContainingOnlyTheNewLineChar", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.NewLineIsAStringContainingOnlyTheNewLineChar);
            QUnit.test("Environment - OSVersionNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.OSVersionNull);
            QUnit.test("Environment - ProcessorCountMoreThanZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ProcessorCountMoreThanZero);
            QUnit.test("Environment - StackTraceNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.StackTraceNotEmpty);
            QUnit.test("Environment - SystemDirectoryEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SystemDirectoryEmpty);
            QUnit.test("Environment - SystemPageSizeEqualsOne", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SystemPageSizeEqualsOne);
            QUnit.test("Environment - TickCountNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.TickCountNotEmpty);
            QUnit.test("Environment - UserDomainNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserDomainNameEmpty);
            QUnit.test("Environment - UserInteractiveTrue", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserInteractiveTrue);
            QUnit.test("Environment - UserNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserNameEmpty);
            QUnit.test("Environment - VersionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.VersionWorks);
            QUnit.test("Environment - WorkingSetZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.WorkingSetZero);
            QUnit.test("Environment - ExitSetsExitCode", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExitSetsExitCode);
            QUnit.test("Environment - ExpandEnvironmentVariablesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExpandEnvironmentVariablesWorks);
            QUnit.test("Environment - FailFastWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.FailFastWorks);
            QUnit.test("Environment - GetCommandLineArgsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetCommandLineArgsWorks);
            QUnit.test("Environment - GetEnvironmentVariableOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariableOneParameterWorks);
            QUnit.test("Environment - GetEnvironmentVariableRwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariableRwoParametersWorks);
            QUnit.test("Environment - GetEnvironmentVariablesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariablesWorks);
            QUnit.test("Environment - GetEnvironmentVariablesOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariablesOneParameterWorks);
            QUnit.test("Environment - GetFolderPathOneParameterEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetFolderPathOneParameterEmpty);
            QUnit.test("Environment - GetFolderPathTwoParametersEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetFolderPathTwoParametersEmpty);
            QUnit.test("Environment - GetLogicalDrivesEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetLogicalDrivesEmpty);
            QUnit.test("Environment - SetEnvironmentVariableTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SetEnvironmentVariableTwoParametersWorks);
            QUnit.test("Environment - SetEnvironmentVariableThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SetEnvironmentVariableThreeParametersWorks);
            QUnit.module("\u0421ultureInfo");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.TypePropertiesAreCorrect);
            QUnit.test("ConstructorWorks_N2583", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.ConstructorWorks_N2583);
            QUnit.test("GetCultureInfoWorks_N2583", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.GetCultureInfoWorks_N2583);
            QUnit.test("GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.GetFormatWorks);
            QUnit.test("InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.InvariantWorks);
            QUnit.test("TextInfoViaGetCultureInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.TextInfoViaGetCultureInfoWorks);
            QUnit.test("TextInfoViaNewCultureInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.TextInfoViaNewCultureInfoWorks);
            QUnit.test("DateTimeFormatFirstDayOfWeekWorks_N3013", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.DateTimeFormatFirstDayOfWeekWorks_N3013);
        },
        /*Bridge.Test.Runtime.BridgeClientTestRunner.Main:static end.*/


    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithoutArgumentsWorks:static start.*/
                NonGenericCreateInstanceWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithoutArgumentsWorks()", $t.Line = "105", $t));
                    t.Fixture.NonGenericCreateInstanceWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540:static start.*/
                NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540()", $t.Line = "113", $t));
                    t.Fixture.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541:static start.*/
                NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541()", $t.Line = "127", $t));
                    t.Fixture.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithoutArgumentsWorks:static start.*/
                GenericCreateInstanceWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithoutArgumentsWorks()", $t.Line = "143", $t));
                    t.Fixture.GenericCreateInstanceWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithOneArgumentWorks_SPI_1542:static start.*/
                GenericCreateInstanceWithOneArgumentWorks_SPI_1542: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithOneArgumentWorks_SPI_1542()", $t.Line = "151", $t));
                    t.Fixture.GenericCreateInstanceWithOneArgumentWorks_SPI_1542();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithOneArgumentWorks_SPI_1542:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543:static start.*/
                GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543()", $t.Line = "165", $t));
                    t.Fixture.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544:static start.*/
                InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544()", $t.Line = "186", $t));
                    t.Fixture.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor:static start.*/
                CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor()", $t.Line = "195", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor:static start.*/
                CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor()", $t.Line = "207", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545:static start.*/
                CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545()", $t.Line = "219", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor:static start.*/
                CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor()", $t.Line = "232", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor:static start.*/
                CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ActivatorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ActivatorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor()", $t.Line = "256", $t));
                    t.Fixture.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ActivatorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ActivatorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ActivatorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "20", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "34", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithIEnumerableInnerExceptionsWorks:static start.*/
                ConstructorWithIEnumerableInnerExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithIEnumerableInnerExceptionsWorks()", $t.Line = "45", $t));
                    t.Fixture.ConstructorWithIEnumerableInnerExceptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithIEnumerableInnerExceptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithInnerExceptionArrayWorks:static start.*/
                ConstructorWithInnerExceptionArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithInnerExceptionArrayWorks()", $t.Line = "76", $t));
                    t.Fixture.ConstructorWithInnerExceptionArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithInnerExceptionArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "107", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks:static start.*/
                ConstructorWithMessageAndIEnumerableInnerExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndIEnumerableInnerExceptionsWorks()", $t.Line = "118", $t));
                    t.Fixture.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageAndInnerExceptionArrayWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionArrayWorks()", $t.Line = "149", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.ConstructorWithMessageAndInnerExceptionArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.FlattenWorks:static start.*/
                FlattenWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FlattenWorks()", $t.Line = "180", $t));
                    t.Fixture.FlattenWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.FlattenWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.AggregateExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/AggregateExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AggregateExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "26", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "35", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "44", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/AmbiguousMatchExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AmbiguousMatchExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "26", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "36", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "46", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndParamNameWorks:static start.*/
                ConstructorWithMessageAndParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndParamNameWorks()", $t.Line = "57", $t));
                    t.Fixture.ConstructorWithMessageAndParamNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndParamNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndParamNameAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndParamNameAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndParamNameAndInnerExceptionWorks()", $t.Line = "67", $t));
                    t.Fixture.ConstructorWithMessageAndParamNameAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.ConstructorWithMessageAndParamNameAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.ArgumentExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/ArgumentExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithParamNameWorks:static start.*/
                ConstructorWithParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameWorks()", $t.Line = "35", $t));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithParamNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithParamNameAndMessageWorks:static start.*/
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndMessageWorks()", $t.Line = "45", $t));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithParamNameAndMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "56", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/ArgumentNullExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentNullExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameWorks:static start.*/
                ConstructorWithParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameWorks()", $t.Line = "36", $t));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndMessageWorks:static start.*/
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndMessageWorks()", $t.Line = "47", $t));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "58", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndActualValueAndMessageWorks:static start.*/
                ConstructorWithParamNameAndActualValueAndMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndActualValueAndMessageWorks()", $t.Line = "70", $t));
                    t.Fixture.ConstructorWithParamNameAndActualValueAndMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndActualValueAndMessageWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/ArgumentOutOfRangeExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentOutOfRangeExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "45", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.GetArgumentWorks:static start.*/
                GetArgumentWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentWorks()", $t.Line = "53", $t));
                    t.Fixture.GetArgumentWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.GetArgumentWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.ToArrayWorks:static start.*/
                ToArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayWorks()", $t.Line = "61", $t));
                    t.Fixture.ToArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.ToArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.ToArrayOfTWorks:static start.*/
                ToArrayOfTWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayOfTWorks()", $t.Line = "69", $t));
                    t.Fixture.ToArrayOfTWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.ToArrayOfTWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ArgumentsTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ArgumentsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArgumentsTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.ArithmeticExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/ArithmeticExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArithmeticExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "19", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.ConstructorWorks:static start.*/
                ConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks()", $t.Line = "35", $t));
                    t.Fixture.ConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.ConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "43", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.ByteLengthPropertyWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.ArrayBufferTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/ArrayBufferTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayBufferTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1 start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "35", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547:static start.*/
                ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547()", $t.Line = "64", $t));
                    t.Fixture.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CreateWithNegativeLenghtShouldThrow:static start.*/
                CreateWithNegativeLenghtShouldThrow: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateWithNegativeLenghtShouldThrow()", $t.Line = "73", $t));
                    t.Fixture.CreateWithNegativeLenghtShouldThrow();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CreateWithNegativeLenghtShouldThrow:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "89", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.LongLengthWorks:static start.*/
                LongLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LongLengthWorks()", $t.Line = "97", $t));
                    t.Fixture.LongLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.LongLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.RankIsOne:static start.*/
                RankIsOne: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RankIsOne()", $t.Line = "108", $t));
                    t.Fixture.RankIsOne();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.RankIsOne:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetLengthWorks:static start.*/
                GetLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLengthWorks()", $t.Line = "114", $t));
                    t.Fixture.GetLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetLowerBound:static start.*/
                GetLowerBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLowerBound()", $t.Line = "122", $t));
                    t.Fixture.GetLowerBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetLowerBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetUpperBoundWorks:static start.*/
                GetUpperBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUpperBoundWorks()", $t.Line = "130", $t));
                    t.Fixture.GetUpperBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetUpperBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GettingValueByIndexWorks:static start.*/
                GettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingValueByIndexWorks()", $t.Line = "138", $t));
                    t.Fixture.GettingValueByIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GettingValueByIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetValueWorks:static start.*/
                GetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorks()", $t.Line = "145", $t));
                    t.Fixture.GetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SettingValueByIndexWorks:static start.*/
                SettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SettingValueByIndexWorks()", $t.Line = "152", $t));
                    t.Fixture.SettingValueByIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SettingValueByIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SetValueWorks:static start.*/
                SetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorks()", $t.Line = "162", $t));
                    t.Fixture.SetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWorks:static start.*/
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "172", $t));
                    t.Fixture.ForeachWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CloneWorks:static start.*/
                CloneWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloneWorks()", $t.Line = "183", $t));
                    t.Fixture.CloneWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CloneWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ConcatWorks:static start.*/
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "192", $t));
                    t.Fixture.ConcatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ConcatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "201", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToSameBoundWorks:static start.*/
                CopyToSameBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToSameBoundWorks()", $t.Line = "209", $t));
                    t.Fixture.CopyToSameBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToSameBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToOffsetBoundWorks:static start.*/
                CopyToOffsetBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToOffsetBoundWorks()", $t.Line = "222", $t));
                    t.Fixture.CopyToOffsetBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToOffsetBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToIllegalBoundWorks:static start.*/
                CopyToIllegalBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToIllegalBoundWorks()", $t.Line = "237", $t));
                    t.Fixture.CopyToIllegalBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyToIllegalBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ContainsUsesEqualsMethod:static start.*/
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "253", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.AllWithArrayItemFilterCallbackWorks:static start.*/
                AllWithArrayItemFilterCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AllWithArrayItemFilterCallbackWorks()", $t.Line = "261", $t));
                    t.Fixture.AllWithArrayItemFilterCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.AllWithArrayItemFilterCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SliceWithoutEndWorks:static start.*/
                SliceWithoutEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWithoutEndWorks()", $t.Line = "268", $t));
                    t.Fixture.SliceWithoutEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SliceWithoutEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWithArrayItemCallbackWorks:static start.*/
                ForeachWithArrayItemCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWithArrayItemCallbackWorks()", $t.Line = "275", $t));
                    t.Fixture.ForeachWithArrayItemCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWithArrayItemCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithoutStartIndexWorks:static start.*/
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexWorks()", $t.Line = "283", $t));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithoutStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithoutStartIndexUsesEqualsMethod:static start.*/
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexUsesEqualsMethod()", $t.Line = "289", $t));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithoutStartIndexUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithStartIndexWorks:static start.*/
                IndexOfWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexWorks()", $t.Line = "297", $t));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IndexOfWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.JoinWithoutDelimiterWorks:static start.*/
                JoinWithoutDelimiterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWithoutDelimiterWorks()", $t.Line = "303", $t));
                    t.Fixture.JoinWithoutDelimiterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.JoinWithoutDelimiterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ReverseWorks:static start.*/
                ReverseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReverseWorks()", $t.Line = "311", $t));
                    t.Fixture.ReverseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ReverseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.AnyWithArrayItemFilterCallbackWorks:static start.*/
                AnyWithArrayItemFilterCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AnyWithArrayItemFilterCallbackWorks()", $t.Line = "319", $t));
                    t.Fixture.AnyWithArrayItemFilterCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.AnyWithArrayItemFilterCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch1Works:static start.*/
                BinarySearch1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch1Works()", $t.Line = "326", $t));
                    t.Fixture.BinarySearch1Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch1Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch2Works:static start.*/
                BinarySearch2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch2Works()", $t.Line = "335", $t));
                    t.Fixture.BinarySearch2Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch2Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch3Works:static start.*/
                BinarySearch3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch3Works()", $t.Line = "352", $t));
                    t.Fixture.BinarySearch3Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch3Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch4Works:static start.*/
                BinarySearch4Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch4Works()", $t.Line = "361", $t));
                    t.Fixture.BinarySearch4Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearch4Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearchExceptionsWorks:static start.*/
                BinarySearchExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearchExceptionsWorks()", $t.Line = "370", $t));
                    t.Fixture.BinarySearchExceptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.BinarySearchExceptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortWithDefaultCompareWorks:static start.*/
                SortWithDefaultCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithDefaultCompareWorks()", $t.Line = "381", $t));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortWithDefaultCompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort1Works:static start.*/
                Sort1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Sort1Works()", $t.Line = "389", $t));
                    t.Fixture.Sort1Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort1Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort2Works:static start.*/
                Sort2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Sort2Works()", $t.Line = "397", $t));
                    t.Fixture.Sort2Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort2Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort3Works:static start.*/
                Sort3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Sort3Works()", $t.Line = "405", $t));
                    t.Fixture.Sort3Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort3Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort4Works:static start.*/
                Sort4Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Sort4Works()", $t.Line = "413", $t));
                    t.Fixture.Sort4Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.Sort4Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortExceptionsWorks:static start.*/
                SortExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortExceptionsWorks()", $t.Line = "421", $t));
                    t.Fixture.SortExceptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortExceptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortWithCompareCallbackWorks:static start.*/
                SortWithCompareCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithCompareCallbackWorks()", $t.Line = "429", $t));
                    t.Fixture.SortWithCompareCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.SortWithCompareCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWhenCastToIListWorks:static start.*/
                ForeachWhenCastToIListWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIListWorks()", $t.Line = "437", $t));
                    t.Fixture.ForeachWhenCastToIListWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ForeachWhenCastToIListWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionNonGenericInterface:static start.*/
                ICollectionNonGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionNonGenericInterface()", $t.Line = "454", $t));
                    t.Fixture.ICollectionNonGenericInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionNonGenericInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCountWorks:static start.*/
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "469", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "476", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionAddWorks:static start.*/
                ICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionAddWorks()", $t.Line = "483", $t));
                    t.Fixture.ICollectionAddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionAddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionClearWorks:static start.*/
                ICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionClearWorks()", $t.Line = "491", $t));
                    t.Fixture.ICollectionClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionContainsWorks:static start.*/
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "499", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionContainsUsesEqualsMethod:static start.*/
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "507", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToSameBoundWorks:static start.*/
                ICollectionCopyToSameBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyToSameBoundWorks()", $t.Line = "515", $t));
                    t.Fixture.ICollectionCopyToSameBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToSameBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToOffsetBoundWorks:static start.*/
                ICollectionCopyToOffsetBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyToOffsetBoundWorks()", $t.Line = "528", $t));
                    t.Fixture.ICollectionCopyToOffsetBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToOffsetBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToIllegalBoundWorks:static start.*/
                ICollectionCopyToIllegalBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyToIllegalBoundWorks()", $t.Line = "543", $t));
                    t.Fixture.ICollectionCopyToIllegalBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionCopyToIllegalBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionRemoveWorks:static start.*/
                ICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveWorks()", $t.Line = "559", $t));
                    t.Fixture.ICollectionRemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ICollectionRemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListNonGenericInterface:static start.*/
                IListNonGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListNonGenericInterface()", $t.Line = "573", $t));
                    t.Fixture.IListNonGenericInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListNonGenericInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyCollectionCountWorks_SPI_1626:static start.*/
                IReadOnlyCollectionCountWorks_SPI_1626: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionCountWorks_SPI_1626()", $t.Line = "582", $t));
                    t.Fixture.IReadOnlyCollectionCountWorks_SPI_1626();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyCollectionCountWorks_SPI_1626:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyCollectionContainsWorks_SPI_1626:static start.*/
                IReadOnlyCollectionContainsWorks_SPI_1626: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionContainsWorks_SPI_1626()", $t.Line = "590", $t));
                    t.Fixture.IReadOnlyCollectionContainsWorks_SPI_1626();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyCollectionContainsWorks_SPI_1626:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "599", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexingWorks:static start.*/
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "606", $t));
                    t.Fixture.IListIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexOfWorks:static start.*/
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "615", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexOfUsesEqualsMethod:static start.*/
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "623", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListIndexOfUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListInsertWorks:static start.*/
                IListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListInsertWorks()", $t.Line = "631", $t));
                    t.Fixture.IListInsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListInsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListRemoveAtWorks:static start.*/
                IListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListRemoveAtWorks()", $t.Line = "639", $t));
                    t.Fixture.IListRemoveAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IListRemoveAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyListIndexingWorks_SPI_1626:static start.*/
                IReadOnlyListIndexingWorks_SPI_1626: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListIndexingWorks_SPI_1626()", $t.Line = "647", $t));
                    t.Fixture.IReadOnlyListIndexingWorks_SPI_1626();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.IReadOnlyListIndexingWorks_SPI_1626:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "655", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithDifferentArraysWorks:static start.*/
                CopyWithDifferentArraysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyWithDifferentArraysWorks()", $t.Line = "671", $t));
                    t.Fixture.CopyWithDifferentArraysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithDifferentArraysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithDifferentArraysLongWorks:static start.*/
                CopyWithDifferentArraysLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyWithDifferentArraysLongWorks()", $t.Line = "684", $t));
                    t.Fixture.CopyWithDifferentArraysLongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithDifferentArraysLongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithinArrayWorks:static start.*/
                CopyWithinArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyWithinArrayWorks()", $t.Line = "697", $t));
                    t.Fixture.CopyWithinArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.CopyWithinArrayWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ArrayTests.ArrayTestsSet1", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet1 end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2 start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestArrayAsIListOfT:static start.*/
                TestArrayAsIListOfT: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestArrayAsIListOfT()", $t.Line = "714", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestArrayAsIListOfT();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestArrayAsIListOfT:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestTrivials:static start.*/
                TestTrivials: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTrivials()", $t.Line = "775", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestTrivials();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestTrivials:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestGetAndSetValue:static start.*/
                TestGetAndSetValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGetAndSetValue()", $t.Line = "946", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestGetAndSetValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestGetAndSetValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestClear:static start.*/
                TestClear: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestClear()", $t.Line = "981", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestClear();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestClear:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_GCRef:static start.*/
                TestCopy_GCRef: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCopy_GCRef()", $t.Line = "1162", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_GCRef();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_GCRef:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTToObj:static start.*/
                TestCopy_VTToObj: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCopy_VTToObj()", $t.Line = "1185", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTToObj();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTToObj:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTWithGCRef:static start.*/
                TestCopy_VTWithGCRef: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCopy_VTWithGCRef()", $t.Line = "1225", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTWithGCRef();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTWithGCRef:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTNoGCRef:static start.*/
                TestCopy_VTNoGCRef: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCopy_VTNoGCRef()", $t.Line = "1286", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTNoGCRef();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestCopy_VTNoGCRef:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestFind:static start.*/
                TestFind: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFind()", $t.Line = "1321", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestFind();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestFind:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestForEach:static start.*/
                TestForEach: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestForEach()", $t.Line = "1395", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestForEach();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestForEach:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestGetEnumerator:static start.*/
                TestGetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGetEnumerator()", $t.Line = "1407", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestGetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestGetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestIndexOf:static start.*/
                TestIndexOf: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestIndexOf()", $t.Line = "1441", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestIndexOf();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestIndexOf:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestLastIndexOf:static start.*/
                TestLastIndexOf: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLastIndexOf()", $t.Line = "1516", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestLastIndexOf();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestLastIndexOf:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestResize:static start.*/
                TestResize: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestResize()", $t.Line = "1591", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestResize();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestResize:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestReverse:static start.*/
                TestReverse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestReverse()", $t.Line = "1622", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestReverse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestReverse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestSort:static start.*/
                TestSort: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSort()", $t.Line = "1662", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestSort();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestSort:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestTrueForAll:static start.*/
                TestTrueForAll: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTrueForAll()", $t.Line = "1733", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestTrueForAll();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestTrueForAll:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestSetValueCasting:static start.*/
                TestSetValueCasting: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSetValueCasting()", $t.Line = "1791", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestSetValueCasting();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestSetValueCasting:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestValueTypeToReferenceCopy:static start.*/
                TestValueTypeToReferenceCopy: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValueTypeToReferenceCopy()", $t.Line = "1847", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestValueTypeToReferenceCopy();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestValueTypeToReferenceCopy:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestReferenceToValueTypeCopy:static start.*/
                TestReferenceToValueTypeCopy: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestReferenceToValueTypeCopy()", $t.Line = "1907", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestReferenceToValueTypeCopy();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestReferenceToValueTypeCopy:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestArrayConstructionMultidimArrays:static start.*/
                TestArrayConstructionMultidimArrays: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestArrayConstructionMultidimArrays()", $t.Line = "2038", $t));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestArrayConstructionMultidimArrays();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.TestArrayConstructionMultidimArrays:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ArrayTests.ArrayTestsSet2", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ArrayTestsSet2 end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingDecodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingDecodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.Decode:static start.*/
                Decode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode()", $t.Line = "33", $t));
                    t.Fixture.Decode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.Decode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.Decode_InvalidBytes:static start.*/
                Decode_InvalidBytes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode_InvalidBytes()", $t.Line = "63", $t));
                    t.Fixture.Decode_InvalidBytes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.Decode_InvalidBytes:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.ASCIIEncodingDecodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/ASCIIEncoding/ASCIIEncodingDecodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingDecodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingEncodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingEncodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.Encode:static start.*/
                Encode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode()", $t.Line = "39", $t));
                    t.Fixture.Encode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.Encode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.Encode_InvalidChars:static start.*/
                Encode_InvalidChars: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode_InvalidChars()", $t.Line = "92", $t));
                    t.Fixture.Encode_InvalidChars();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.Encode_InvalidChars:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.ASCIIEncodingEncodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/ASCIIEncoding/ASCIIEncodingEncodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingEncodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingGetMaxTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingGetMaxTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetMaxByteCount:static start.*/
                GetMaxByteCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxByteCount()", $t.Line = "12", $t));
                    t.Fixture.GetMaxByteCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetMaxByteCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetMaxCharCount:static start.*/
                GetMaxCharCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.ASCIIEncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ASCIIEncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxCharCount()", $t.Line = "22", $t));
                    t.Fixture.GetMaxCharCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetMaxCharCount:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.ASCIIEncodingGetMaxTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/ASCIIEncoding/ASCIIEncodingGetMaxTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ASCIIEncodingGetMaxTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeTest:static start.*/
                NotationTypeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NotationTypeTest()", $t.Line = "83", $t));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeClassOverrideTest:static start.*/
                NotationTypeClassOverrideTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NotationTypeClassOverrideTest()", $t.Line = "98", $t));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeClassOverrideTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeClassOverrideTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeMemberOverrideTest:static start.*/
                NotationTypeMemberOverrideTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NotationTypeMemberOverrideTest()", $t.Line = "113", $t));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeMemberOverrideTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationTypeMemberOverrideTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationAccessibilityTest:static start.*/
                NotationAccessibilityTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NotationAccessibilityTest()", $t.Line = "125", $t));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationAccessibilityTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.NotationAccessibilityTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convention/AssemblyAttributeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyAttributeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetExecutingAssemblyWorks:static start.*/
                GetExecutingAssemblyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetExecutingAssemblyWorks()", $t.Line = "158", $t));
                    t.Fixture.GetExecutingAssemblyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetExecutingAssemblyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetAssemblyForTypeWorks:static start.*/
                GetAssemblyForTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetAssemblyForTypeWorks()", $t.Line = "164", $t));
                    t.Fixture.GetAssemblyForTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetAssemblyForTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.FullNameWorks:static start.*/
                FullNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FullNameWorks()", $t.Line = "171", $t));
                    t.Fixture.FullNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.FullNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "178", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypesWorks:static start.*/
                GetTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypesWorks()", $t.Line = "185", $t));
                    t.Fixture.GetTypesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypesWithImportedModuleWorks:static start.*/
                GetTypesWithImportedModuleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypesWithImportedModuleWorks()", $t.Line = "195", $t));
                    t.Fixture.GetTypesWithImportedModuleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypesWithImportedModuleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWorks:static start.*/
                GetTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWorksWithGenerics:static start.*/
                GetTypeWorksWithGenerics: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorksWithGenerics()", $t.Line = "214", $t));
                    t.Fixture.GetTypeWorksWithGenerics();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWorksWithGenerics:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWithImportedModuleWorks:static start.*/
                GetTypeWithImportedModuleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWithImportedModuleWorks()", $t.Line = "221", $t));
                    t.Fixture.GetTypeWithImportedModuleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetTypeWithImportedModuleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.AssemblyOfBuiltInTypes:static start.*/
                AssemblyOfBuiltInTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyOfBuiltInTypes()", $t.Line = "231", $t));
                    t.Fixture.AssemblyOfBuiltInTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.AssemblyOfBuiltInTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.CreateInstanceWorks:static start.*/
                CreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWorks()", $t.Line = "242", $t));
                    t.Fixture.CreateInstanceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.CreateInstanceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetCustomAttributesWorks:static start.*/
                GetCustomAttributesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorks()", $t.Line = "250", $t));
                    t.Fixture.GetCustomAttributesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetCustomAttributesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.LoadCanReturnReferenceToLoadedAssembly:static start.*/
                LoadCanReturnReferenceToLoadedAssembly: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LoadCanReturnReferenceToLoadedAssembly()", $t.Line = "276", $t));
                    t.Fixture.LoadCanReturnReferenceToLoadedAssembly();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.LoadCanReturnReferenceToLoadedAssembly:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceNamesWorks:static start.*/
                GetManifestResourceNamesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceNamesWorks()", $t.Line = "286", $t));
                    t.Fixture.GetManifestResourceNamesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceNamesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataAsBase64WithoutTypeWorks:static start.*/
                GetManifestResourceDataAsBase64WithoutTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataAsBase64WithoutTypeWorks()", $t.Line = "294", $t));
                    t.Fixture.GetManifestResourceDataAsBase64WithoutTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataAsBase64WithoutTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataAsBase64WithTypeWorks:static start.*/
                GetManifestResourceDataAsBase64WithTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataAsBase64WithTypeWorks()", $t.Line = "302", $t));
                    t.Fixture.GetManifestResourceDataAsBase64WithTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataAsBase64WithTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataWithoutTypeWorks:static start.*/
                GetManifestResourceDataWithoutTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataWithoutTypeWorks()", $t.Line = "310", $t));
                    t.Fixture.GetManifestResourceDataWithoutTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataWithoutTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataWithTypeWorks:static start.*/
                GetManifestResourceDataWithTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetManifestResourceDataWithTypeWorks()", $t.Line = "318", $t));
                    t.Fixture.GetManifestResourceDataWithTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetManifestResourceDataWithTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.UriBelongsSystem:static start.*/
                UriBelongsSystem: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UriBelongsSystem()", $t.Line = "326", $t));
                    t.Fixture.UriBelongsSystem();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.UriBelongsSystem:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Batch1.Reflection.AssemblyTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/AssemblyTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AssemblyTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncVoid:static start.*/
                AsyncVoid: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncVoid()", $t.Line = "12", $t));
                    t.Fixture.AsyncVoid();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncVoid:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTask:static start.*/
                AsyncTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTask()", $t.Line = "43", $t));
                    t.Fixture.AsyncTask();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTask:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTaskBodyThrowsException:static start.*/
                AsyncTaskBodyThrowsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTaskBodyThrowsException()", $t.Line = "79", $t));
                    t.Fixture.AsyncTaskBodyThrowsException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTaskBodyThrowsException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AwaitTaskThatFaults:static start.*/
                AwaitTaskThatFaults: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AwaitTaskThatFaults()", $t.Line = "118", $t));
                    t.Fixture.AwaitTaskThatFaults();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AwaitTaskThatFaults:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AggregateExceptionsAreUnwrappedWhenAwaitingTask:static start.*/
                AggregateExceptionsAreUnwrappedWhenAwaitingTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AggregateExceptionsAreUnwrappedWhenAwaitingTask()", $t.Line = "156", $t));
                    t.Fixture.AggregateExceptionsAreUnwrappedWhenAwaitingTask();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AggregateExceptionsAreUnwrappedWhenAwaitingTask:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTaskThatReturnsValue:static start.*/
                AsyncTaskThatReturnsValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncTaskThatReturnsValue()", $t.Line = "192", $t));
                    t.Fixture.AsyncTaskThatReturnsValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.AsyncTaskThatReturnsValue:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Threading.AsyncTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Threading/Tasks/AsyncTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AsyncTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForAssemblyWorks:static start.*/
                GetCustomAttributesForAssemblyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForAssemblyWorks()", $t.Line = "74", $t));
                    t.Fixture.GetCustomAttributesForAssemblyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForAssemblyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoWorks:static start.*/
                GetCustomAttributesForMemberInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoWorks()", $t.Line = "120", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoInheritTrueWorks:static start.*/
                GetCustomAttributesForMemberInfoInheritTrueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoInheritTrueWorks()", $t.Line = "141", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoInheritTrueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoInheritTrueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoInheritFalseWorks:static start.*/
                GetCustomAttributesForMemberInfoInheritFalseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoInheritFalseWorks()", $t.Line = "162", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoInheritFalseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoInheritFalseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeWorks:static start.*/
                GetCustomAttributesForMemberInfoTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoTypeWorks()", $t.Line = "183", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeInheritFalseWorks:static start.*/
                GetCustomAttributesForMemberInfoTypeInheritFalseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoTypeInheritFalseWorks()", $t.Line = "209", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeInheritFalseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeInheritFalseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeInheritTrueWorks:static start.*/
                GetCustomAttributesForMemberInfoTypeInheritTrueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForMemberInfoTypeInheritTrueWorks()", $t.Line = "240", $t));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeInheritTrueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForMemberInfoTypeInheritTrueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoWorks:static start.*/
                GetCustomAttributesForParameterInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoWorks()", $t.Line = "271", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoInheritTrueWorks:static start.*/
                GetCustomAttributesForParameterInfoInheritTrueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoInheritTrueWorks()", $t.Line = "294", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoInheritTrueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoInheritTrueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoInheritFalseWorks:static start.*/
                GetCustomAttributesForParameterInfoInheritFalseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoInheritFalseWorks()", $t.Line = "315", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoInheritFalseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoInheritFalseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeWorks:static start.*/
                GetCustomAttributesForParameterInfoTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoTypeWorks()", $t.Line = "336", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeInheritFalseWorks:static start.*/
                GetCustomAttributesForParameterInfoTypeInheritFalseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoTypeInheritFalseWorks()", $t.Line = "362", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeInheritFalseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeInheritFalseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeInheritTrueWorks:static start.*/
                GetCustomAttributesForParameterInfoTypeInheritTrueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForParameterInfoTypeInheritTrueWorks()", $t.Line = "393", $t));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeInheritTrueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForParameterInfoTypeInheritTrueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForEnumMember:static start.*/
                GetCustomAttributesForEnumMember: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesForEnumMember()", $t.Line = "424", $t));
                    t.Fixture.GetCustomAttributesForEnumMember();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetCustomAttributesForEnumMember:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Batch1.Reflection.AttributeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/AttributeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+AttributeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BaseStream", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BaseStream)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream.GetBaseStream:static start.*/
                GetBaseStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BaseStream).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BaseStream, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetBaseStream()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.BaseStream.GetBaseStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream.GetBaseStream:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BaseStream", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.BaseStream.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BaseStream end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryReaderTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_DisposeTests:static start.*/
                BinaryReader_DisposeTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryReader_DisposeTests()", $t.Line = "17", $t));
                    t.Fixture.BinaryReader_DisposeTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_DisposeTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_CloseTests:static start.*/
                BinaryReader_CloseTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryReader_CloseTests()", $t.Line = "30", $t));
                    t.Fixture.BinaryReader_CloseTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_CloseTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_DisposeTests_Negative:static start.*/
                BinaryReader_DisposeTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryReader_DisposeTests_Negative()", $t.Line = "43", $t));
                    t.Fixture.BinaryReader_DisposeTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_DisposeTests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_CloseTests_Negative:static start.*/
                BinaryReader_CloseTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryReader_CloseTests_Negative()", $t.Line = "54", $t));
                    t.Fixture.BinaryReader_CloseTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.BinaryReader_CloseTests_Negative:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryReaderTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BinaryReader/BinaryReaderTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryReaderTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest:static start.*/
                BinaryWriter_WriteCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharTest()", $t.Line = "27", $t));
                    t.Fixture.BinaryWriter_WriteCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest_Negative:static start.*/
                BinaryWriter_WriteCharTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharTest_Negative()", $t.Line = "76", $t));
                    t.Fixture.BinaryWriter_WriteCharTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteByteTest:static start.*/
                BinaryWriter_WriteByteTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteByteTest()", $t.Line = "108", $t));
                    t.Fixture.BinaryWriter_WriteByteTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteByteTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest:static start.*/
                BinaryWriter_WriteSByteTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteSByteTest()", $t.Line = "141", $t));
                    t.Fixture.BinaryWriter_WriteSByteTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest_NegativeCase:static start.*/
                BinaryWriter_WriteSByteTest_NegativeCase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteSByteTest_NegativeCase()", $t.Line = "174", $t));
                    t.Fixture.BinaryWriter_WriteSByteTest_NegativeCase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteSByteTest_NegativeCase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest:static start.*/
                BinaryWriter_WriteBArrayTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteBArrayTest()", $t.Line = "202", $t));
                    t.Fixture.BinaryWriter_WriteBArrayTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest_Negative:static start.*/
                BinaryWriter_WriteBArrayTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteBArrayTest_Negative()", $t.Line = "231", $t));
                    t.Fixture.BinaryWriter_WriteBArrayTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest2:static start.*/
                BinaryWriter_WriteBArrayTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteBArrayTest2()", $t.Line = "283", $t));
                    t.Fixture.BinaryWriter_WriteBArrayTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteBArrayTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest:static start.*/
                BinaryWriter_WriteCharArrayTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharArrayTest()", $t.Line = "330", $t));
                    t.Fixture.BinaryWriter_WriteCharArrayTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest_Negative:static start.*/
                BinaryWriter_WriteCharArrayTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharArrayTest_Negative()", $t.Line = "369", $t));
                    t.Fixture.BinaryWriter_WriteCharArrayTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest2:static start.*/
                BinaryWriter_WriteCharArrayTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharArrayTest2()", $t.Line = "438", $t));
                    t.Fixture.BinaryWriter_WriteCharArrayTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest3:static start.*/
                BinaryWriter_WriteCharArrayTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteByteCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteCharArrayTest3()", $t.Line = "486", $t));
                    t.Fixture.BinaryWriter_WriteCharArrayTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.BinaryWriter_WriteCharArrayTest3:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriter_WriteByteCharTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BinaryWriter/BinaryWriter.WriteByteCharTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteByteCharTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteBoolTest:static start.*/
                BinaryWriter_WriteBoolTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteBoolTest()", $t.Line = "16", $t));
                    t.Fixture.BinaryWriter_WriteBoolTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteBoolTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteDecimalTest:static start.*/
                BinaryWriter_WriteDecimalTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteDecimalTest()", $t.Line = "56", $t));
                    t.Fixture.BinaryWriter_WriteDecimalTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteDecimalTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteDoubleTest:static start.*/
                BinaryWriter_WriteDoubleTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteDoubleTest()", $t.Line = "68", $t));
                    t.Fixture.BinaryWriter_WriteDoubleTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteDoubleTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt16Test:static start.*/
                BinaryWriter_WriteInt16Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteInt16Test()", $t.Line = "79", $t));
                    t.Fixture.BinaryWriter_WriteInt16Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt16Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt32Test:static start.*/
                BinaryWriter_WriteInt32Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteInt32Test()", $t.Line = "87", $t));
                    t.Fixture.BinaryWriter_WriteInt32Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt32Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt64Test:static start.*/
                BinaryWriter_WriteInt64Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteInt64Test()", $t.Line = "95", $t));
                    t.Fixture.BinaryWriter_WriteInt64Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteInt64Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt16Test:static start.*/
                BinaryWriter_WriteUInt16Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteUInt16Test()", $t.Line = "103", $t));
                    t.Fixture.BinaryWriter_WriteUInt16Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt16Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt32Test:static start.*/
                BinaryWriter_WriteUInt32Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteUInt32Test()", $t.Line = "111", $t));
                    t.Fixture.BinaryWriter_WriteUInt32Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt32Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt64Test:static start.*/
                BinaryWriter_WriteUInt64Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteUInt64Test()", $t.Line = "119", $t));
                    t.Fixture.BinaryWriter_WriteUInt64Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteUInt64Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteStringTest:static start.*/
                BinaryWriter_WriteStringTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteStringTest()", $t.Line = "127", $t));
                    t.Fixture.BinaryWriter_WriteStringTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteStringTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteStringTest_Null:static start.*/
                BinaryWriter_WriteStringTest_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriter_WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriter_WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_WriteStringTest_Null()", $t.Line = "144", $t));
                    t.Fixture.BinaryWriter_WriteStringTest_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.BinaryWriter_WriteStringTest_Null:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriter_WriteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BinaryWriter/BinaryWriter.WriteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriter_WriteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CtorAndWriteTests1:static start.*/
                BinaryWriter_CtorAndWriteTests1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_CtorAndWriteTests1()", $t.Line = "22", $t));
                    t.Fixture.BinaryWriter_CtorAndWriteTests1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CtorAndWriteTests1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CtorAndWriteTests1_Negative:static start.*/
                BinaryWriter_CtorAndWriteTests1_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_CtorAndWriteTests1_Negative()", $t.Line = "38", $t));
                    t.Fixture.BinaryWriter_CtorAndWriteTests1_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CtorAndWriteTests1_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests:static start.*/
                BinaryWriter_EncodingCtorAndWriteTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_EncodingCtorAndWriteTests()", $t.Line = "58", $t));
                    t.Fixture.BinaryWriter_EncodingCtorAndWriteTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests_Negative:static start.*/
                BinaryWriter_EncodingCtorAndWriteTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_EncodingCtorAndWriteTests_Negative()", $t.Line = "89", $t));
                    t.Fixture.BinaryWriter_EncodingCtorAndWriteTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_EncodingCtorAndWriteTests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests:static start.*/
                BinaryWriter_SeekTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_SeekTests()", $t.Line = "99", $t));
                    t.Fixture.BinaryWriter_SeekTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests_NegativeOffset:static start.*/
                BinaryWriter_SeekTests_NegativeOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_SeekTests_NegativeOffset()", $t.Line = "246", $t));
                    t.Fixture.BinaryWriter_SeekTests_NegativeOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests_NegativeOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests_InvalidSeekOrigin:static start.*/
                BinaryWriter_SeekTests_InvalidSeekOrigin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_SeekTests_InvalidSeekOrigin()", $t.Line = "262", $t));
                    t.Fixture.BinaryWriter_SeekTests_InvalidSeekOrigin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_SeekTests_InvalidSeekOrigin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_BaseStreamTests:static start.*/
                BinaryWriter_BaseStreamTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_BaseStreamTests()", $t.Line = "278", $t));
                    t.Fixture.BinaryWriter_BaseStreamTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_BaseStreamTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_FlushTests:static start.*/
                BinaryWriter_FlushTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_FlushTests()", $t.Line = "289", $t));
                    t.Fixture.BinaryWriter_FlushTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_FlushTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_DisposeTests:static start.*/
                BinaryWriter_DisposeTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_DisposeTests()", $t.Line = "313", $t));
                    t.Fixture.BinaryWriter_DisposeTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_DisposeTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CloseTests:static start.*/
                BinaryWriter_CloseTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_CloseTests()", $t.Line = "326", $t));
                    t.Fixture.BinaryWriter_CloseTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CloseTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_DisposeTests_Negative:static start.*/
                BinaryWriter_DisposeTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_DisposeTests_Negative()", $t.Line = "339", $t));
                    t.Fixture.BinaryWriter_DisposeTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_DisposeTests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CloseTests_Negative:static start.*/
                BinaryWriter_CloseTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_CloseTests_Negative()", $t.Line = "350", $t));
                    t.Fixture.BinaryWriter_CloseTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.BinaryWriter_CloseTests_Negative:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriterTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BinaryWriter/BinaryWriterTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterWithBufferedStream_Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests.BinaryWriter_FlushTests:static start.*/
                BinaryWriter_FlushTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterWithBufferedStream_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriter_FlushTests()", $t.Line = "209", $t));
                    t.Fixture.BinaryWriter_FlushTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests.BinaryWriter_FlushTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteByteCharTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterWithBufferedStream_WriteByteCharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_WriteByteCharTests)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteByteCharTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_WriteByteCharTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteByteCharTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteByteCharTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BinaryWriterWithBufferedStream_WriteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_WriteTests)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BinaryWriterWithBufferedStream_WriteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BinaryWriterWithBufferedStream_WriteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.ValueArgumentNull:static start.*/
                ValueArgumentNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueArgumentNull()", $t.Line = "22", $t));
                    Bridge.ClientTest.BitConverterTests.ValueArgumentNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.ValueArgumentNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.StartIndexBeyondLength:static start.*/
                StartIndexBeyondLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartIndexBeyondLength()", $t.Line = "40", $t));
                    Bridge.ClientTest.BitConverterTests.StartIndexBeyondLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.StartIndexBeyondLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.StartIndexPlusNeededLengthTooLong:static start.*/
                StartIndexPlusNeededLengthTooLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartIndexPlusNeededLengthTooLong()", $t.Line = "94", $t));
                    Bridge.ClientTest.BitConverterTests.StartIndexPlusNeededLengthTooLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.StartIndexPlusNeededLengthTooLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripDoubleToInt64Bits:static start.*/
                RoundtripDoubleToInt64Bits: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripDoubleToInt64Bits()", $t.Line = "110", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripDoubleToInt64Bits();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripDoubleToInt64Bits:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.Int64BitsToDouble:static start.*/
                Int64BitsToDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Int64BitsToDouble()", $t.Line = "122", $t));
                    Bridge.ClientTest.BitConverterTests.Int64BitsToDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.Int64BitsToDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.DoubleToInt64Bits:static start.*/
                DoubleToInt64Bits: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DoubleToInt64Bits()", $t.Line = "134", $t));
                    Bridge.ClientTest.BitConverterTests.DoubleToInt64Bits();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.DoubleToInt64Bits:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripBoolean:static start.*/
                RoundtripBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripBoolean()", $t.Line = "146", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripChar:static start.*/
                RoundtripChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripChar()", $t.Line = "160", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripDouble:static start.*/
                RoundtripDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripDouble()", $t.Line = "168", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripSingle:static start.*/
                RoundtripSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripSingle()", $t.Line = "186", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt16:static start.*/
                RoundtripInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripInt16()", $t.Line = "195", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt32:static start.*/
                RoundtripInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripInt32()", $t.Line = "211", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt64:static start.*/
                RoundtripInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripInt64()", $t.Line = "227", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt16:static start.*/
                RoundtripUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripUInt16()", $t.Line = "243", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt32:static start.*/
                RoundtripUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripUInt32()", $t.Line = "259", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt64:static start.*/
                RoundtripUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripUInt64()", $t.Line = "275", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripUInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripString:static start.*/
                RoundtripString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripString()", $t.Line = "291", $t));
                    Bridge.ClientTest.BitConverterTests.RoundtripString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.RoundtripString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.ToString_ByteArray_Long:static start.*/
                ToString_ByteArray_Long: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToString_ByteArray_Long()", $t.Line = "304", $t));
                    Bridge.ClientTest.BitConverterTests.ToString_ByteArray_Long();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.ToString_ByteArray_Long:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BitConverterTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BitConverterTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BitConverterTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.TypePropertiesAreCorrect_SPI_1575:static start.*/
                TypePropertiesAreCorrect_SPI_1575: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1575()", $t.Line = "25", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1575();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.TypePropertiesAreCorrect_SPI_1575:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.DefaultValueIsFalse:static start.*/
                DefaultValueIsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIsFalse()", $t.Line = "51", $t));
                    t.Fixture.DefaultValueIsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.DefaultValueIsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.CreatingInstanceReturnsFalse:static start.*/
                CreatingInstanceReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsFalse()", $t.Line = "57", $t));
                    t.Fixture.CreatingInstanceReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.CreatingInstanceReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.DefaultConstructorReturnsFalse_SPI_1576:static start.*/
                DefaultConstructorReturnsFalse_SPI_1576: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsFalse_SPI_1576()", $t.Line = "63", $t));
                    t.Fixture.DefaultConstructorReturnsFalse_SPI_1576();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.DefaultConstructorReturnsFalse_SPI_1576:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "70", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ObjectEqualsWorks:static start.*/
                ObjectEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectEqualsWorks()", $t.Line = "78", $t));
                    t.Fixture.ObjectEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ObjectEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "87", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalExclusiveOrWorks:static start.*/
                LogicalExclusiveOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogicalExclusiveOrWorks()", $t.Line = "101", $t));
                    t.Fixture.LogicalExclusiveOrWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalExclusiveOrWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalAndWorks:static start.*/
                LogicalAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogicalAndWorks()", $t.Line = "114", $t));
                    t.Fixture.LogicalAndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalAndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalNegationWorks:static start.*/
                LogicalNegationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogicalNegationWorks()", $t.Line = "127", $t));
                    t.Fixture.LogicalNegationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.LogicalNegationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalOperatorWorks:static start.*/
                ConditionalOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionalOperatorWorks()", $t.Line = "138", $t));
                    t.Fixture.ConditionalOperatorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalOperatorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalAndWorks:static start.*/
                ConditionalAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionalAndWorks()", $t.Line = "147", $t));
                    t.Fixture.ConditionalAndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalAndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalOrWorks:static start.*/
                ConditionalOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionalOrWorks()", $t.Line = "176", $t));
                    t.Fixture.ConditionalOrWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ConditionalOrWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.EqualityWorks:static start.*/
                EqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityWorks()", $t.Line = "205", $t));
                    t.Fixture.EqualityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.EqualityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.InequalityWorks:static start.*/
                InequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InequalityWorks()", $t.Line = "223", $t));
                    t.Fixture.InequalityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.InequalityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "241", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "250", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "259", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.TryParseWorks:static start.*/
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "287", $t));
                    t.Fixture.TryParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.TryParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.BoolStringWorks:static start.*/
                BoolStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BoolStringWorks()", $t.Line = "323", $t));
                    t.Fixture.BoolStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.BoolStringWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.BooleanTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/BooleanTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BooleanTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.GettingBaseTypeWorks:static start.*/
                GettingBaseTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingBaseTypeWorks()", $t.Line = "28", $t));
                    t.Fixture.GettingBaseTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.GettingBaseTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.IsAssignableFromWorks:static start.*/
                IsAssignableFromWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsAssignableFromWorks()", $t.Line = "90", $t));
                    t.Fixture.IsAssignableFromWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.IsAssignableFromWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.IsGetTypeCodeWorks:static start.*/
                IsGetTypeCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGetTypeCodeWorks()", $t.Line = "124", $t));
                    t.Fixture.IsGetTypeCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.IsGetTypeCodeWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.TypeSystemTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/TypeSystemTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge_ClientTest_TypeSystemTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529 start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529.TestObjectLiteral:static start.*/
                TestObjectLiteral: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestObjectLiteral()", $t.Line = "130", $t));
                    t.Fixture.TestObjectLiteral();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529.TestObjectLiteral:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ObjectLiteralTests.Bridge1529", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ObjectLiteralTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Bridge1529 end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestLogMessageObject:static start.*/
                TestLogMessageObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLogMessageObject()", $t.Line = "19", $t));
                    try {
                        t.Fixture.TestLogMessageObject();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestLogMessageObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestLogMessageString:static start.*/
                TestLogMessageString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLogMessageString()", $t.Line = "62", $t));
                    try {
                        t.Fixture.TestLogMessageString();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestLogMessageString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestDebugMessageString:static start.*/
                TestDebugMessageString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestDebugMessageString()", $t.Line = "69", $t));
                    try {
                        t.Fixture.TestDebugMessageString();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestDebugMessageString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestErrorMessageString:static start.*/
                TestErrorMessageString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestErrorMessageString()", $t.Line = "76", $t));
                    try {
                        t.Fixture.TestErrorMessageString();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestErrorMessageString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestToggling:static start.*/
                TestToggling: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestToggling()", $t.Line = "83", $t));
                    try {
                        t.Fixture.TestToggling();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestToggling:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestHtmlTag:static start.*/
                TestHtmlTag: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestHtmlTag()", $t.Line = "118", $t));
                    try {
                        t.Fixture.TestHtmlTag();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TestHtmlTag:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BridgeConsoleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BridgeConsoleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.GetContext end.*/

            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TearDown start.*/
            TearDown: function () {
                Bridge.ClientTest.BridgeConsoleTests.HideConsole();
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests.TearDown end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeConsoleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.StringOnlyConstructorWorks:static start.*/
                StringOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringOnlyConstructorWorks()", $t.Line = "19", $t));
                    t.Fixture.StringOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.StringOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.ConstructorWithFlagsWorks:static start.*/
                ConstructorWithFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithFlagsWorks()", $t.Line = "27", $t));
                    t.Fixture.ConstructorWithFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.ConstructorWithFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.GlobalFlagWorks:static start.*/
                GlobalFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GlobalFlagWorks()", $t.Line = "35", $t));
                    t.Fixture.GlobalFlagWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.GlobalFlagWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.IgnoreCaseFlagWorks:static start.*/
                IgnoreCaseFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseFlagWorks()", $t.Line = "42", $t));
                    t.Fixture.IgnoreCaseFlagWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.IgnoreCaseFlagWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.MultilineFlagWorks:static start.*/
                MultilineFlagWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineFlagWorks()", $t.Line = "49", $t));
                    t.Fixture.MultilineFlagWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.MultilineFlagWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.PatternPropertyWorks:static start.*/
                PatternPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PatternPropertyWorks()", $t.Line = "56", $t));
                    t.Fixture.PatternPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.PatternPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.SourcePropertyWorks:static start.*/
                SourcePropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SourcePropertyWorks()", $t.Line = "62", $t));
                    t.Fixture.SourcePropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.SourcePropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.ExecWorks:static start.*/
                ExecWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExecWorks()", $t.Line = "68", $t));
                    t.Fixture.ExecWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.ExecWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.LastIndexWorks:static start.*/
                LastIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexWorks()", $t.Line = "78", $t));
                    t.Fixture.LastIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.LastIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.TestWorks:static start.*/
                TestWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWorks()", $t.Line = "86", $t));
                    t.Fixture.TestWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.TestWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/JavaScript/BridgeRegexTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeRegexTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationIsNull:static start.*/
                TestValidationIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationIsNull()", $t.Line = "10", $t));
                    t.Fixture.TestValidationIsNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationIsNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationIsNotNull:static start.*/
                TestValidationIsNotNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationIsNotNull()", $t.Line = "56", $t));
                    t.Fixture.TestValidationIsNotNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationIsNotNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationEmail:static start.*/
                TestValidationEmail: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationEmail()", $t.Line = "102", $t));
                    t.Fixture.TestValidationEmail();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationEmail:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationUrl:static start.*/
                TestValidationUrl: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationUrl()", $t.Line = "117", $t));
                    t.Fixture.TestValidationUrl();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationUrl:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationAlpha:static start.*/
                TestValidationAlpha: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationAlpha()", $t.Line = "154", $t));
                    t.Fixture.TestValidationAlpha();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationAlpha:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationAlphaNum:static start.*/
                TestValidationAlphaNum: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeValidationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestValidationAlphaNum()", $t.Line = "171", $t));
                    t.Fixture.TestValidationAlphaNum();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.TestValidationAlphaNum:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Batch1.Bridge.BridgeValidationTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Bridge.Core/Validation.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BridgeValidationTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.NullConstructor_Throws_ArgumentNullException:static start.*/
                NullConstructor_Throws_ArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullConstructor_Throws_ArgumentNullException()", $t.Line = "15", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.NullConstructor_Throws_ArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.NullConstructor_Throws_ArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.NegativeBufferSize_Throws_ArgumentOutOfRangeException:static start.*/
                NegativeBufferSize_Throws_ArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeBufferSize_Throws_ArgumentOutOfRangeException()", $t.Line = "21", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.NegativeBufferSize_Throws_ArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.NegativeBufferSize_Throws_ArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.ZeroBufferSize_Throws_ArgumentNullException:static start.*/
                ZeroBufferSize_Throws_ArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroBufferSize_Throws_ArgumentNullException()", $t.Line = "27", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.ZeroBufferSize_Throws_ArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.ZeroBufferSize_Throws_ArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.UnderlyingStreamDisposed_Throws_ObjectDisposedException:static start.*/
                UnderlyingStreamDisposed_Throws_ObjectDisposedException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnderlyingStreamDisposed_Throws_ObjectDisposedException()", $t.Line = "33", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.UnderlyingStreamDisposed_Throws_ObjectDisposedException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.UnderlyingStreamDisposed_Throws_ObjectDisposedException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException:static start.*/
                SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException()", $t.Line = "41", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SetPositionToNegativeValue_Throws_ArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.Read_Arguments:static start.*/
                Read_Arguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Read_Arguments()", $t.Line = "50", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.Read_Arguments();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.Read_Arguments:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.Write_Arguments:static start.*/
                Write_Arguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Write_Arguments()", $t.Line = "63", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.Write_Arguments();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.Write_Arguments:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SetLength_NegativeValue:static start.*/
                SetLength_NegativeValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetLength_NegativeValue()", $t.Line = "76", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.SetLength_NegativeValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SetLength_NegativeValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.ReadOnUnreadableStream_Throws_NotSupportedException:static start.*/
                ReadOnUnreadableStream_Throws_NotSupportedException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadOnUnreadableStream_Throws_NotSupportedException()", $t.Line = "89", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.ReadOnUnreadableStream_Throws_NotSupportedException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.ReadOnUnreadableStream_Throws_NotSupportedException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.WriteOnUnwritableStream_Throws_NotSupportedException:static start.*/
                WriteOnUnwritableStream_Throws_NotSupportedException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteOnUnwritableStream_Throws_NotSupportedException()", $t.Line = "99", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.WriteOnUnwritableStream_Throws_NotSupportedException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.WriteOnUnwritableStream_Throws_NotSupportedException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SeekOnUnseekableStream_Throws_NotSupportedException:static start.*/
                SeekOnUnseekableStream_Throws_NotSupportedException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SeekOnUnseekableStream_Throws_NotSupportedException()", $t.Line = "109", $t));
                    Bridge.ClientTest.IO.BufferedStream_InvalidParameters.SeekOnUnseekableStream_Throws_NotSupportedException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.SeekOnUnseekableStream_Throws_NotSupportedException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.CopyTo_InvalidArguments_Throws:static start.*/
                CopyTo_InvalidArguments_Throws: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_InvalidParameters).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_InvalidParameters, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyTo_InvalidArguments_Throws()", $t.Line = "119", $t));
                    t.Fixture.CopyTo_InvalidArguments_Throws();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.CopyTo_InvalidArguments_Throws:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BufferedStream_InvalidParameters", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStream.InvalidParameters.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_InvalidParameters end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_Stream)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest:static start.*/
                CopyToTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_Stream).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToTest()", $t.Line = "23", $t));
                    t.Fixture.CopyToTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.UnderlyingStreamThrowsExceptions:static start.*/
                UnderlyingStreamThrowsExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_Stream).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnderlyingStreamThrowsExceptions()", $t.Line = "38", $t));
                    t.Fixture.UnderlyingStreamThrowsExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.UnderlyingStreamThrowsExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest_RequiresFlushingOfWrites:static start.*/
                CopyToTest_RequiresFlushingOfWrites: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_Stream).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToTest_RequiresFlushingOfWrites()", $t.Line = "51", $t));
                    t.Fixture.CopyToTest_RequiresFlushingOfWrites();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest_RequiresFlushingOfWrites:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest_ReadBeforeCopy_CopiesAllData:static start.*/
                CopyToTest_ReadBeforeCopy_CopiesAllData: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_Stream).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_Stream, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToTest_ReadBeforeCopy_CopiesAllData()", $t.Line = "72", $t));
                    t.Fixture.CopyToTest_ReadBeforeCopy_CopiesAllData();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.CopyToTest_ReadBeforeCopy_CopiesAllData:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BufferedStream_Stream", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_Stream end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_StreamMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_StreamMethods)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods.ReadByte_ThenRead_EndOfStreamCorrectlyFound:static start.*/
                ReadByte_ThenRead_EndOfStreamCorrectlyFound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadByte_ThenRead_EndOfStreamCorrectlyFound()", $t.Line = "107", $t));
                    t.Fixture.ReadByte_ThenRead_EndOfStreamCorrectlyFound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods.ReadByte_ThenRead_EndOfStreamCorrectlyFound:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BufferedStream_StreamMethods", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_StreamMethods end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_TestLeaveOpen start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStream_TestLeaveOpen", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStream_TestLeaveOpen)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_TestLeaveOpen.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BufferedStream_TestLeaveOpen", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_TestLeaveOpen.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStream_TestLeaveOpen end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStreamFlushTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStreamFlushTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.ShouldNotFlushUnderlyingStreamIfReadOnly:static start.*/
                ShouldNotFlushUnderlyingStreamIfReadOnly: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStreamFlushTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStreamFlushTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ShouldNotFlushUnderlyingStreamIfReadOnly()", $t.Line = "16", $t));
                    t.Fixture.ShouldNotFlushUnderlyingStreamIfReadOnly();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.ShouldNotFlushUnderlyingStreamIfReadOnly:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.ShouldAlwaysFlushUnderlyingStreamIfWritable:static start.*/
                ShouldAlwaysFlushUnderlyingStreamIfWritable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.BufferedStreamFlushTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BufferedStreamFlushTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ShouldAlwaysFlushUnderlyingStreamIfWritable()", $t.Line = "45", $t));
                    t.Fixture.ShouldAlwaysFlushUnderlyingStreamIfWritable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.ShouldAlwaysFlushUnderlyingStreamIfWritable:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.BufferedStreamFlushTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStream.FlushTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+BufferedStreamFlushTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "36", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "98", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "104", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "110", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "117", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "123", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "129", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "135", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.TryParseWorks_SPI_1592:static start.*/
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "148", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.TryParseWorks_SPI_1592:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.ByteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/ByteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ByteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenSourceAreCorrect:static start.*/
                TypePropertiesForCancellationTokenSourceAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenSourceAreCorrect()", $t.Line = "15", $t));
                    t.Fixture.TypePropertiesForCancellationTokenSourceAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenSourceAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenAreCorrect:static start.*/
                TypePropertiesForCancellationTokenAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenAreCorrect()", $t.Line = "24", $t));
                    t.Fixture.TypePropertiesForCancellationTokenAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenRegistrationAreCorrect:static start.*/
                TypePropertiesForCancellationTokenRegistrationAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesForCancellationTokenRegistrationAreCorrect()", $t.Line = "34", $t));
                    t.Fixture.TypePropertiesForCancellationTokenRegistrationAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.TypePropertiesForCancellationTokenRegistrationAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe:static start.*/
                CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe()", $t.Line = "45", $t));
                    t.Fixture.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe:static start.*/
                CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe()", $t.Line = "54", $t));
                    t.Fixture.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled:static start.*/
                CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled()", $t.Line = "63", $t));
                    t.Fixture.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenNoneIsNotCancelledAndCannotBe:static start.*/
                CancellationTokenNoneIsNotCancelledAndCannotBe: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenNoneIsNotCancelledAndCannotBe()", $t.Line = "72", $t));
                    t.Fixture.CancellationTokenNoneIsNotCancelledAndCannotBe();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancellationTokenNoneIsNotCancelledAndCannotBe:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled:static start.*/
                CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled()", $t.Line = "80", $t));
                    t.Fixture.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled:static start.*/
                ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled()", $t.Line = "89", $t));
                    t.Fixture.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource:static start.*/
                CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource()", $t.Line = "98", $t));
                    t.Fixture.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod:static start.*/
                IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod()", $t.Line = "105", $t));
                    t.Fixture.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled:static start.*/
                ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled()", $t.Line = "116", $t));
                    t.Fixture.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWithoutArgumentsWorks:static start.*/
                CancelWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWithoutArgumentsWorks()", $t.Line = "125", $t));
                    t.Fixture.CancelWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsFalse:static start.*/
                CancelWorksWhenThrowOnFirstExceptionIsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWorksWhenThrowOnFirstExceptionIsFalse()", $t.Line = "170", $t));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsTrue:static start.*/
                CancelWorksWhenThrowOnFirstExceptionIsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelWorksWhenThrowOnFirstExceptionIsTrue()", $t.Line = "216", $t));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithoutContextInvokesTheCallback:static start.*/
                RegisterOnACancelledSourceWithoutContextInvokesTheCallback: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithoutContextInvokesTheCallback()", $t.Line = "260", $t));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextInvokesTheCallback();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithoutContextInvokesTheCallback:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterWithArgumentOnACancelledSourceInvokesTheCallback:static start.*/
                RegisterWithArgumentOnACancelledSourceInvokesTheCallback: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterWithArgumentOnACancelledSourceInvokesTheCallback()", $t.Line = "270", $t));
                    t.Fixture.RegisterWithArgumentOnACancelledSourceInvokesTheCallback();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterWithArgumentOnACancelledSourceInvokesTheCallback:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException:static start.*/
                RegisterOnACancelledSourceWithoutContextRethrowsAThrownException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithoutContextRethrowsAThrownException()", $t.Line = "285", $t));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithContextRethrowsAThrownException:static start.*/
                RegisterOnACancelledSourceWithContextRethrowsAThrownException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnACancelledSourceWithContextRethrowsAThrownException()", $t.Line = "305", $t));
                    t.Fixture.RegisterOnACancelledSourceWithContextRethrowsAThrownException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnACancelledSourceWithContextRethrowsAThrownException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOverloadsWithUseSynchronizationContextWork:static start.*/
                RegisterOverloadsWithUseSynchronizationContextWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOverloadsWithUseSynchronizationContextWork()", $t.Line = "327", $t));
                    t.Fixture.RegisterOverloadsWithUseSynchronizationContextWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOverloadsWithUseSynchronizationContextWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing:static start.*/
                RegisterOnCancellationTokenCreatedNonCancelledDoesNothing: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnCancellationTokenCreatedNonCancelledDoesNothing()", $t.Line = "357", $t));
                    t.Fixture.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately:static start.*/
                RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately()", $t.Line = "368", $t));
                    t.Fixture.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice:static start.*/
                DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice()", $t.Line = "385", $t));
                    t.Fixture.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegistrationsCanBeCompared:static start.*/
                RegistrationsCanBeCompared: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegistrationsCanBeCompared()", $t.Line = "397", $t));
                    t.Fixture.RegistrationsCanBeCompared();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegistrationsCanBeCompared:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegistrationsCanBeUnregistered:static start.*/
                RegistrationsCanBeUnregistered: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegistrationsCanBeUnregistered()", $t.Line = "419", $t));
                    t.Fixture.RegistrationsCanBeUnregistered();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.RegistrationsCanBeUnregistered:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm:static start.*/
                CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm()", $t.Line = "447", $t));
                    t.Fixture.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.LinkedSourceWithTwoTokensWorks:static start.*/
                LinkedSourceWithTwoTokensWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedSourceWithTwoTokensWorks()", $t.Line = "456", $t));
                    t.Fixture.LinkedSourceWithTwoTokensWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.LinkedSourceWithTwoTokensWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.LinkedSourceWithThreeTokensWorks:static start.*/
                LinkedSourceWithThreeTokensWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedSourceWithThreeTokensWorks()", $t.Line = "480", $t));
                    t.Fixture.LinkedSourceWithThreeTokensWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.LinkedSourceWithThreeTokensWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Threading.CancellationTokenTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Threading/CancellationTokenTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CancellationTokenTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.TypePropertiesAreInt32:static start.*/
                TypePropertiesAreInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreInt32()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.TypePropertiesAreInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "23", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.DefaultValueWorks:static start.*/
                DefaultValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks()", $t.Line = "67", $t));
                    t.Fixture.DefaultValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.DefaultValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "73", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "79", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "85", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CharComparisonWorks:static start.*/
                CharComparisonWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharComparisonWorks()", $t.Line = "92", $t));
                    t.Fixture.CharComparisonWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CharComparisonWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "105", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "114", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "120", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "133", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.StaticToStringWorks:static start.*/
                StaticToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticToStringWorks()", $t.Line = "139", $t));
                    t.Fixture.StaticToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.StaticToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "159", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "167", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "183", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "192", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLowerWorks:static start.*/
                IsLowerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsLowerWorks()", $t.Line = "201", $t));
                    t.Fixture.IsLowerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLowerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsUpperWorks:static start.*/
                IsUpperWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsUpperWorks()", $t.Line = "209", $t));
                    t.Fixture.IsUpperWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsUpperWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToLowerWorks:static start.*/
                ToLowerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLowerWorks()", $t.Line = "230", $t));
                    t.Fixture.ToLowerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToLowerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToUpperWorks:static start.*/
                ToUpperWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUpperWorks()", $t.Line = "238", $t));
                    t.Fixture.ToUpperWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.ToUpperWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsDigitWorks:static start.*/
                IsDigitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsDigitWorks()", $t.Line = "246", $t));
                    t.Fixture.IsDigitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsDigitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsDigitWithStringAndIndexWorks:static start.*/
                IsDigitWithStringAndIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsDigitWithStringAndIndexWorks()", $t.Line = "255", $t));
                    t.Fixture.IsDigitWithStringAndIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsDigitWithStringAndIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsWhiteSpaceWorks:static start.*/
                IsWhiteSpaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsWhiteSpaceWorks()", $t.Line = "269", $t));
                    t.Fixture.IsWhiteSpaceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsWhiteSpaceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsWhiteSpaceWithStringAndIndexWorks:static start.*/
                IsWhiteSpaceWithStringAndIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsWhiteSpaceWithStringAndIndexWorks()", $t.Line = "278", $t));
                    t.Fixture.IsWhiteSpaceWithStringAndIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsWhiteSpaceWithStringAndIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsPunctuationWorks:static start.*/
                IsPunctuationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPunctuationWorks()", $t.Line = "292", $t));
                    t.Fixture.IsPunctuationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsPunctuationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsPunctuationWithStringAndIndexWorks:static start.*/
                IsPunctuationWithStringAndIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPunctuationWithStringAndIndexWorks()", $t.Line = "302", $t));
                    t.Fixture.IsPunctuationWithStringAndIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsPunctuationWithStringAndIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLetterWorks:static start.*/
                IsLetterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsLetterWorks()", $t.Line = "313", $t));
                    t.Fixture.IsLetterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLetterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLetterWithStringAndIndexWorks:static start.*/
                IsLetterWithStringAndIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsLetterWithStringAndIndexWorks()", $t.Line = "322", $t));
                    t.Fixture.IsLetterWithStringAndIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.IsLetterWithStringAndIndexWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.CharTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/CharTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CharTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestInt32:static start.*/
                TestInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInt32()", $t.Line = "188", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestUInt32:static start.*/
                TestUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestUInt32()", $t.Line = "232", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestLong:static start.*/
                TestLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLong()", $t.Line = "274", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestULong:static start.*/
                TestULong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestULong()", $t.Line = "318", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestULong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.TestULong:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CheckedUncheckedTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedInsideUncheckedTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestInt32:static start.*/
                TestInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInt32()", $t.Line = "23", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestUInt32:static start.*/
                TestUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestUInt32()", $t.Line = "64", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestLong:static start.*/
                TestLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLong()", $t.Line = "103", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestULong:static start.*/
                TestULong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestULong()", $t.Line = "144", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestULong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.TestULong:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CheckedUncheckedTests.CheckedTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CheckedUncheckedTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CheckedTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.AllTest:static start.*/
                AllTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AllTest()", $t.Line = "345", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.AllTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.AllTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.MembersTest:static start.*/
                MembersTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MembersTest()", $t.Line = "358", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.MembersTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.MembersTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ObjectLiteralTest:static start.*/
                ObjectLiteralTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectLiteralTest()", $t.Line = "373", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ObjectLiteralTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ObjectLiteralTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.InterfaceMemberTest:static start.*/
                InterfaceMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InterfaceMemberTest()", $t.Line = "381", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.InterfaceMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.InterfaceMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.InnerClassMemberTest:static start.*/
                InnerClassMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InnerClassMemberTest()", $t.Line = "389", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.InnerClassMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.InnerClassMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ClassAttributeInheritanceTest:static start.*/
                ClassAttributeInheritanceTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassAttributeInheritanceTest()", $t.Line = "397", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ClassAttributeInheritanceTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ClassAttributeInheritanceTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.OverrideMemberTest:static start.*/
                OverrideMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OverrideMemberTest()", $t.Line = "411", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.OverrideMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.OverrideMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.NestedClassTest:static start.*/
                NestedClassTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NestedClassTest()", $t.Line = "423", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.NestedClassTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.NestedClassTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.AccessibilityTest:static start.*/
                AccessibilityTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessibilityTest()", $t.Line = "443", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.AccessibilityTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.AccessibilityTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ConstMemberTest:static start.*/
                ConstMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstMemberTest()", $t.Line = "497", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ConstMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ConstMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EventMemberTest:static start.*/
                EventMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EventMemberTest()", $t.Line = "507", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EventMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EventMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EnumItemMemberTest:static start.*/
                EnumItemMemberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumItemMemberTest()", $t.Line = "533", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EnumItemMemberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EnumItemMemberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EnumTargetTest:static start.*/
                EnumTargetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumTargetTest()", $t.Line = "545", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EnumTargetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.EnumTargetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ExternalTargetTest:static start.*/
                ExternalTargetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExternalTargetTest()", $t.Line = "562", $t));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ExternalTargetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.ExternalTargetTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convention/ClassAttributeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ClassAttributeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.AfterDisposeThrows:static start.*/
                AfterDisposeThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AfterDisposeThrows()", $t.Line = "23", $t));
                    t.Fixture.AfterDisposeThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.AfterDisposeThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.AfterCloseThrows:static start.*/
                AfterCloseThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AfterCloseThrows()", $t.Line = "35", $t));
                    t.Fixture.AfterCloseThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.AfterCloseThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CloseCausesFlush:static start.*/
                CloseCausesFlush: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloseCausesFlush()", $t.Line = "56", $t));
                    t.Fixture.CloseCausesFlush();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CloseCausesFlush:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CantFlushAfterDispose:static start.*/
                CantFlushAfterDispose: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantFlushAfterDispose()", $t.Line = "75", $t));
                    t.Fixture.CantFlushAfterDispose();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CantFlushAfterDispose:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CantFlushAfterClose:static start.*/
                CantFlushAfterClose: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CloseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CloseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantFlushAfterClose()", $t.Line = "88", $t));
                    t.Fixture.CantFlushAfterClose();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.CantFlushAfterClose:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.CloseTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.CloseTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CloseTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CollectionDataContractAttributeTest", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.CollectionDataContractAttributeTest)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest.AttributeUsageWorks:static start.*/
                AttributeUsageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.CollectionDataContractAttributeTest).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CollectionDataContractAttributeTest, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AttributeUsageWorks()", $t.Line = "42", $t));
                    Bridge.ClientTest.BasicCSharp.CollectionDataContractAttributeTest.AttributeUsageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest.AttributeUsageWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.CollectionDataContractAttributeTest", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Attributes/CollectionDataContractAttributeTest.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CollectionDataContractAttributeTest end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.ThrowingAndCatchingExceptionsWorks:static start.*/
                ThrowingAndCatchingExceptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowingAndCatchingExceptionsWorks()", $t.Line = "27", $t));
                    t.Fixture.ThrowingAndCatchingExceptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.ThrowingAndCatchingExceptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.ExceptionOfWrongTypeIsNotCaught:static start.*/
                ExceptionOfWrongTypeIsNotCaught: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionOfWrongTypeIsNotCaught()", $t.Line = "43", $t));
                    t.Fixture.ExceptionOfWrongTypeIsNotCaught();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.ExceptionOfWrongTypeIsNotCaught:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchExceptionAsBaseType:static start.*/
                CanCatchExceptionAsBaseType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchExceptionAsBaseType()", $t.Line = "63", $t));
                    t.Fixture.CanCatchExceptionAsBaseType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchExceptionAsBaseType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchStringAsException:static start.*/
                CanCatchStringAsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchStringAsException()", $t.Line = "82", $t));
                    t.Fixture.CanCatchStringAsException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchStringAsException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchStringAsCatchAll:static start.*/
                CanCatchStringAsCatchAll: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanCatchStringAsCatchAll()", $t.Line = "102", $t));
                    t.Fixture.CanCatchStringAsCatchAll();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.CanCatchStringAsCatchAll:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.CommonExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/CommonExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CommonExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.TypePropertiesAreCorrect_SPI_1546:static start.*/
                TypePropertiesAreCorrect_SPI_1546: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1546()", $t.Line = "26", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1546();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.TypePropertiesAreCorrect_SPI_1546:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "33", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerCanOrderNumbers:static start.*/
                DefaultComparerCanOrderNumbers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanOrderNumbers()", $t.Line = "48", $t));
                    t.Fixture.DefaultComparerCanOrderNumbers();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerCanOrderNumbers:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerCanOrderNullValues:static start.*/
                DefaultComparerCanOrderNullValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanOrderNullValues()", $t.Line = "56", $t));
                    t.Fixture.DefaultComparerCanOrderNullValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerCanOrderNullValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerUsesCompareMethodIfClassImplementsIComparable:static start.*/
                DefaultComparerUsesCompareMethodIfClassImplementsIComparable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerUsesCompareMethodIfClassImplementsIComparable()", $t.Line = "64", $t));
                    t.Fixture.DefaultComparerUsesCompareMethodIfClassImplementsIComparable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.DefaultComparerUsesCompareMethodIfClassImplementsIComparable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.CreateWorks:static start.*/
                CreateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateWorks()", $t.Line = "72", $t));
                    t.Fixture.CreateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.CreateWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.ComparerTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/ComparerTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ComparerTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Assume:static start.*/
                Assume: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Assume()", $t.Line = "48", $t));
                    t.Fixture.Assume();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Assume:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.AssumeWithUserMessage:static start.*/
                AssumeWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssumeWithUserMessage()", $t.Line = "57", $t));
                    t.Fixture.AssumeWithUserMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.AssumeWithUserMessage:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests._Assert:static start.*/
                _Assert: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "_Assert()", $t.Line = "66", $t));
                    t.Fixture._Assert();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests._Assert:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.AssertWithUserMessage:static start.*/
                AssertWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssertWithUserMessage()", $t.Line = "75", $t));
                    t.Fixture.AssertWithUserMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.AssertWithUserMessage:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Requires:static start.*/
                Requires: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Requires()", $t.Line = "84", $t));
                    t.Fixture.Requires();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Requires:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiresWithUserMessage:static start.*/
                RequiresWithUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiresWithUserMessage()", $t.Line = "93", $t));
                    t.Fixture.RequiresWithUserMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiresWithUserMessage:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiresWithTypeException:static start.*/
                RequiresWithTypeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiresWithTypeException()", $t.Line = "102", $t));
                    t.Fixture.RequiresWithTypeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiresWithTypeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiredWithTypeExceptionAndUserMessage:static start.*/
                RequiredWithTypeExceptionAndUserMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RequiredWithTypeExceptionAndUserMessage()", $t.Line = "110", $t));
                    t.Fixture.RequiredWithTypeExceptionAndUserMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.RequiredWithTypeExceptionAndUserMessage:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ForAll:static start.*/
                ForAll: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForAll()", $t.Line = "118", $t));
                    t.Fixture.ForAll();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ForAll:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ForAllWithCollection:static start.*/
                ForAllWithCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForAllWithCollection()", $t.Line = "127", $t));
                    t.Fixture.ForAllWithCollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ForAllWithCollection:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Exists:static start.*/
                Exists: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Exists()", $t.Line = "136", $t));
                    t.Fixture.Exists();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.Exists:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ExistsWithCollection:static start.*/
                ExistsWithCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExistsWithCollection()", $t.Line = "145", $t));
                    t.Fixture.ExistsWithCollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.ExistsWithCollection:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Diagnostics.Contracts.ContractTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Diagnostics/Contracts/ContractTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ContractTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip1:static start.*/
                Roundtrip1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Roundtrip1()", $t.Line = "14", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip2:static start.*/
                Roundtrip2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Roundtrip2()", $t.Line = "33", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip3:static start.*/
                Roundtrip3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Roundtrip3()", $t.Line = "39", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.Roundtrip3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.EmptyString:static start.*/
                EmptyString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyString()", $t.Line = "45", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.EmptyString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.EmptyString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.ZeroLengthArray:static start.*/
                ZeroLengthArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroLengthArray()", $t.Line = "56", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.ZeroLengthArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.ZeroLengthArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithPadding1:static start.*/
                RoundtripWithPadding1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithPadding1()", $t.Line = "67", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithPadding1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithPadding1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithPadding2:static start.*/
                RoundtripWithPadding2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithPadding2()", $t.Line = "73", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithPadding2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithPadding2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.PartialRoundtripWithPadding1:static start.*/
                PartialRoundtripWithPadding1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PartialRoundtripWithPadding1()", $t.Line = "79", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.PartialRoundtripWithPadding1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.PartialRoundtripWithPadding1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.PartialRoundtripWithPadding2:static start.*/
                PartialRoundtripWithPadding2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PartialRoundtripWithPadding2()", $t.Line = "93", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.PartialRoundtripWithPadding2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.PartialRoundtripWithPadding2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.ParseWithWhitespace:static start.*/
                ParseWithWhitespace: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWithWhitespace()", $t.Line = "108", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.ParseWithWhitespace();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.ParseWithWhitespace:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace2:static start.*/
                RoundtripWithWhitespace2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace2()", $t.Line = "114", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace3:static start.*/
                RoundtripWithWhitespace3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace3()", $t.Line = "121", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace4:static start.*/
                RoundtripWithWhitespace4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace4()", $t.Line = "128", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace5:static start.*/
                RoundtripWithWhitespace5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace5()", $t.Line = "136", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace6:static start.*/
                RoundtripWithWhitespace6: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace6()", $t.Line = "144", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace6();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace6:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace7:static start.*/
                RoundtripWithWhitespace7: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripWithWhitespace7()", $t.Line = "152", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace7();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripWithWhitespace7:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripLargeString:static start.*/
                RoundtripLargeString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundtripLargeString()", $t.Line = "160", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripLargeString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.RoundtripLargeString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidOffset:static start.*/
                InvalidOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidOffset()", $t.Line = "167", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidLength:static start.*/
                InvalidLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidLength()", $t.Line = "177", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidInput:static start.*/
                InvalidInput: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidInput()", $t.Line = "188", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidInput();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidInput:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidCharactersInInput:static start.*/
                InvalidCharactersInInput: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidCharactersInInput()", $t.Line = "215", $t));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidCharactersInInput();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.InvalidCharactersInInput:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.FromBase64StringWorks:static start.*/
                FromBase64StringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBase64StringWorks()", $t.Line = "229", $t));
                    t.Fixture.FromBase64StringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.FromBase64StringWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertFromBase64Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertFromBase64Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertTest)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.TestBase:static start.*/
                TestBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertTest).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBase()", $t.Line = "207", $t));
                    Bridge.ClientTest.ConvertTests.ConvertTest.TestBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.TestBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.TestTemperature:static start.*/
                TestTemperature: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertTest).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTemperature()", $t.Line = "221", $t));
                    Bridge.ClientTest.ConvertTests.ConvertTest.TestTemperature();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.TestTemperature:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.ChangeTypeTest:static start.*/
                ChangeTypeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertTest).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ChangeTypeTest()", $t.Line = "257", $t));
                    Bridge.ClientTest.ConvertTests.ConvertTest.ChangeTypeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.ChangeTypeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.ChangeTypeIdentity:static start.*/
                ChangeTypeIdentity: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertTest).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertTest, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ChangeTypeIdentity()", $t.Line = "306", $t));
                    Bridge.ClientTest.ConvertTests.ConvertTest.ChangeTypeIdentity();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.ChangeTypeIdentity:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertTest", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertTest.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertTest end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ValidOffsetIn:static start.*/
                ValidOffsetIn: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValidOffsetIn()", $t.Line = "14", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ValidOffsetIn();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ValidOffsetIn:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ShortInputArray:static start.*/
                ShortInputArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ShortInputArray()", $t.Line = "24", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ShortInputArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ShortInputArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ValidOffsetOut:static start.*/
                ValidOffsetOut: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValidOffsetOut()", $t.Line = "37", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ValidOffsetOut();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.ValidOffsetOut:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidInputBuffer:static start.*/
                InvalidInputBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidInputBuffer()", $t.Line = "56", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidInputBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidInputBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOutputBuffer:static start.*/
                InvalidOutputBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidOutputBuffer()", $t.Line = "62", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOutputBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOutputBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOffsetIn:static start.*/
                InvalidOffsetIn: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidOffsetIn()", $t.Line = "70", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOffsetIn();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOffsetIn:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOffsetOut:static start.*/
                InvalidOffsetOut: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidOffsetOut()", $t.Line = "81", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOffsetOut();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidOffsetOut:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidInputLength:static start.*/
                InvalidInputLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidInputLength()", $t.Line = "92", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidInputLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.InvalidInputLength:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToBase64CharArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64CharArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.KnownByteSequence:static start.*/
                KnownByteSequence: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KnownByteSequence()", $t.Line = "26", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.KnownByteSequence();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.KnownByteSequence:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ZeroLength:static start.*/
                ZeroLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroLength()", $t.Line = "45", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.ZeroLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ZeroLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidInputBuffer:static start.*/
                InvalidInputBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidInputBuffer()", $t.Line = "52", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidInputBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidInputBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidOffset:static start.*/
                InvalidOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidOffset()", $t.Line = "59", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidLength:static start.*/
                InvalidLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvalidLength()", $t.Line = "68", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.InvalidLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithOnlyArrayWorks:static start.*/
                ToBase64StringWithOnlyArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithOnlyArrayWorks()", $t.Line = "78", $t));
                    t.Fixture.ToBase64StringWithOnlyArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithOnlyArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndFormattingOptionsWorks:static start.*/
                ToBase64StringWithArrayAndFormattingOptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndFormattingOptionsWorks()", $t.Line = "91", $t));
                    t.Fixture.ToBase64StringWithArrayAndFormattingOptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndFormattingOptionsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthWorks:static start.*/
                ToBase64StringWithArrayAndOffsetAndLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndOffsetAndLengthWorks()", $t.Line = "102", $t));
                    t.Fixture.ToBase64StringWithArrayAndOffsetAndLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks:static start.*/
                ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks()", $t.Line = "109", $t));
                    t.Fixture.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToBase64StringTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBase64StringTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "21", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "29", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "37", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "45", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "53", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "61", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "69", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "80", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "91", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "99", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "107", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "115", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "123", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToBooleanTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToBooleanTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToBooleanTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "22", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "33", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "44", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "55", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "66", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "77", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "88", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "99", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "110", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "121", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "140", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "161", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "172", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "183", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToByteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToByteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToByteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "14", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "22", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "30", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDecimalViaObject:static start.*/
                FromDecimalViaObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimalViaObject()", $t.Line = "37", $t));
                    t.Fixture.FromDecimalViaObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDecimalViaObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "44", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDoubleViaObject:static start.*/
                FromDoubleViaObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDoubleViaObject()", $t.Line = "51", $t));
                    t.Fixture.FromDoubleViaObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromDoubleViaObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "58", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "69", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "80", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "91", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "102", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "113", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSingleViaObject:static start.*/
                FromSingleViaObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingleViaObject()", $t.Line = "120", $t));
                    t.Fixture.FromSingleViaObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromSingleViaObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "127", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "139", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "147", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "158", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToCharTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToCharTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToCharTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "23", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromStringWithCustomFormatProvider:static start.*/
                FromStringWithCustomFormatProvider: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithCustomFormatProvider()", $t.Line = "60", $t));
                    t.Fixture.FromStringWithCustomFormatProvider();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromStringWithCustomFormatProvider:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDateTime:static start.*/
                FromDateTime: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDateTime()", $t.Line = "90", $t));
                    t.Fixture.FromDateTime();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDateTime:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "101", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "108", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "114", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "120", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "126", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "132", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "138", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "144", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "150", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromUInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "156", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "162", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "168", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.FromDecimal:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToDateTimeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDateTimeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "30", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "38", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "49", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "57", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "65", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "76", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "87", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "95", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "106", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "126", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "134", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "142", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToDecimalTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToDecimalTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDecimalTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "30", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "38", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "46", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "54", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "62", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "70", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "81", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "89", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "97", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "114", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "122", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "130", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToDoubleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToDoubleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToDoubleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "68", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "79", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "90", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "101", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "109", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "120", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "139", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "172", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "183", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "194", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToInt16Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToInt16Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt16Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "68", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "76", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "87", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "98", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "106", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "117", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "136", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "169", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "177", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "188", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToInt32Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToInt32Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt32Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "68", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "76", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "84", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "95", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "103", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "114", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "131", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "169", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "177", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "185", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToInt64Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToInt64Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToInt64Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "33", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "41", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "52", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "63", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "74", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "85", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "96", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "107", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "115", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "126", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "150", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "171", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "182", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "193", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToSByteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToSByteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSByteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "30", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "40", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "48", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "56", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "64", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "72", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "83", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "91", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "99", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "115", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "123", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "131", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToSingleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToSingleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToSingleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromBoxedObject:static start.*/
                FromBoxedObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoxedObject()", $t.Line = "15", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromBoxedObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromBoxedObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "199", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDateTime:static start.*/
                FromDateTime: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDateTime()", $t.Line = "205", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDateTime();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDateTime:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "218", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase2:static start.*/
                FromByteBase2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByteBase2()", $t.Line = "231", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase8:static start.*/
                FromByteBase8: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByteBase8()", $t.Line = "243", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase8();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase8:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase10:static start.*/
                FromByteBase10: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByteBase10()", $t.Line = "255", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase10();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase10:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase16:static start.*/
                FromByteBase16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByteBase16()", $t.Line = "267", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteBase16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteInvalidBase:static start.*/
                FromByteInvalidBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByteInvalidBase()", $t.Line = "279", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteInvalidBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByteInvalidBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base2:static start.*/
                FromInt16Base2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16Base2()", $t.Line = "285", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base8:static start.*/
                FromInt16Base8: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16Base8()", $t.Line = "297", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base8();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base8:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base10:static start.*/
                FromInt16Base10: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16Base10()", $t.Line = "309", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base10();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base10:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base16:static start.*/
                FromInt16Base16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16Base16()", $t.Line = "321", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Base16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16InvalidBase:static start.*/
                FromInt16InvalidBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16InvalidBase()", $t.Line = "333", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16InvalidBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16InvalidBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base2:static start.*/
                FromInt32Base2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32Base2()", $t.Line = "339", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base8:static start.*/
                FromInt32Base8: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32Base8()", $t.Line = "351", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base8();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base8:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base10:static start.*/
                FromInt32Base10: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32Base10()", $t.Line = "363", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base10();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base10:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base16:static start.*/
                FromInt32Base16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32Base16()", $t.Line = "375", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Base16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32InvalidBase:static start.*/
                FromInt32InvalidBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32InvalidBase()", $t.Line = "387", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32InvalidBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32InvalidBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base2:static start.*/
                FromInt64Base2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64Base2()", $t.Line = "393", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base8:static start.*/
                FromInt64Base8: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64Base8()", $t.Line = "405", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base8();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base8:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base10:static start.*/
                FromInt64Base10: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64Base10()", $t.Line = "417", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base10();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base10:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base16:static start.*/
                FromInt64Base16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64Base16()", $t.Line = "429", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Base16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64InvalidBase:static start.*/
                FromInt64InvalidBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64InvalidBase()", $t.Line = "441", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64InvalidBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64InvalidBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "447", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "463", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "477", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Array:static start.*/
                FromInt16Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16Array()", $t.Line = "491", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt16Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt16Array:static start.*/
                FromUInt16Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16Array()", $t.Line = "505", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt16Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt16Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Array:static start.*/
                FromInt32Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32Array()", $t.Line = "519", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt32Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt32Array:static start.*/
                FromUInt32Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32Array()", $t.Line = "533", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt32Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt32Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Array:static start.*/
                FromInt64Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64Array()", $t.Line = "547", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromInt64Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt64Array:static start.*/
                FromUInt64Array: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64Array()", $t.Line = "561", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt64Array();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromUInt64Array:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromSingleArray:static start.*/
                FromSingleArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingleArray()", $t.Line = "575", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromSingleArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromSingleArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDoubleArray:static start.*/
                FromDoubleArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDoubleArray()", $t.Line = "592", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDoubleArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDoubleArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDecimalArray:static start.*/
                FromDecimalArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimalArray()", $t.Line = "606", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDecimalArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDecimalArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDateTimeArray:static start.*/
                FromDateTimeArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDateTimeArray()", $t.Line = "619", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDateTimeArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromDateTimeArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "638", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromIFormattable:static start.*/
                FromIFormattable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromIFormattable()", $t.Line = "652", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromIFormattable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromIFormattable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromNonIConvertible:static start.*/
                FromNonIConvertible: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromNonIConvertible()", $t.Line = "666", $t));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromNonIConvertible();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.FromNonIConvertible:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToStringTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToStringTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToStringTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "71", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "82", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "93", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "104", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "115", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "126", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "142", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "163", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "171", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "182", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToUInt16Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt16Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "71", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "82", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "93", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "104", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "115", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "126", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "144", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "165", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "173", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "181", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToUInt32Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt32Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromBoolean:static start.*/
                FromBoolean: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromBoolean()", $t.Line = "14", $t));
                    t.Fixture.FromBoolean();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromBoolean:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromByte:static start.*/
                FromByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromByte()", $t.Line = "22", $t));
                    t.Fixture.FromByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromChar:static start.*/
                FromChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromChar()", $t.Line = "30", $t));
                    t.Fixture.FromChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromDecimal:static start.*/
                FromDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDecimal()", $t.Line = "38", $t));
                    t.Fixture.FromDecimal();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromDouble:static start.*/
                FromDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromDouble()", $t.Line = "49", $t));
                    t.Fixture.FromDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt16:static start.*/
                FromInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt16()", $t.Line = "60", $t));
                    t.Fixture.FromInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt32:static start.*/
                FromInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt32()", $t.Line = "71", $t));
                    t.Fixture.FromInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt64:static start.*/
                FromInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromInt64()", $t.Line = "82", $t));
                    t.Fixture.FromInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromObject:static start.*/
                FromObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromObject()", $t.Line = "93", $t));
                    t.Fixture.FromObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromSByte:static start.*/
                FromSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSByte()", $t.Line = "104", $t));
                    t.Fixture.FromSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromSingle:static start.*/
                FromSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromSingle()", $t.Line = "115", $t));
                    t.Fixture.FromSingle();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromString:static start.*/
                FromString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromString()", $t.Line = "126", $t));
                    t.Fixture.FromString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromStringWithBase:static start.*/
                FromStringWithBase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromStringWithBase()", $t.Line = "148", $t));
                    t.Fixture.FromStringWithBase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromStringWithBase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt16:static start.*/
                FromUInt16: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt16()", $t.Line = "175", $t));
                    t.Fixture.FromUInt16();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt16:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt32:static start.*/
                FromUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt32()", $t.Line = "183", $t));
                    t.Fixture.FromUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt64:static start.*/
                FromUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromUInt64()", $t.Line = "191", $t));
                    t.Fixture.FromUInt64();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.FromUInt64:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Convert/ConvertToUInt64Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ConvertToUInt64Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "391", $t));
                    t.Fixture.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ObjectLiteralTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateAndInitializationModesTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "233", $t));
                    t.Fixture.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ObjectLiteralTests.CreateModeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ObjectLiteralTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CreateModeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.CreateStreamWriter:static start.*/
                CreateStreamWriter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateStreamWriter()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.CtorTests.CreateStreamWriter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.CreateStreamWriter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.NullEncodingThrows:static start.*/
                NullEncodingThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullEncodingThrows()", $t.Line = "39", $t));
                    Bridge.ClientTest.IO.CtorTests.NullEncodingThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.NullEncodingThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.UTF8Encoding:static start.*/
                UTF8Encoding: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UTF8Encoding()", $t.Line = "48", $t));
                    Bridge.ClientTest.IO.CtorTests.UTF8Encoding();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.UTF8Encoding:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.BigEndianUnicodeEncoding:static start.*/
                BigEndianUnicodeEncoding: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BigEndianUnicodeEncoding()", $t.Line = "54", $t));
                    Bridge.ClientTest.IO.CtorTests.BigEndianUnicodeEncoding();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.BigEndianUnicodeEncoding:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.UnicodeEncoding:static start.*/
                UnicodeEncoding: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.CtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnicodeEncoding()", $t.Line = "60", $t));
                    Bridge.ClientTest.IO.CtorTests.UnicodeEncoding();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.UnicodeEncoding:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.CtorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.CtorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CtorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.ConstructorWorks_N2583:static start.*/
                ConstructorWorks_N2583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks_N2583()", $t.Line = "19", $t));
                    t.Fixture.ConstructorWorks_N2583();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.ConstructorWorks_N2583:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetCultureInfoWorks_N2583:static start.*/
                GetCultureInfoWorks_N2583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCultureInfoWorks_N2583()", $t.Line = "39", $t));
                    t.Fixture.GetCultureInfoWorks_N2583();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetCultureInfoWorks_N2583:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetFormatWorks:static start.*/
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "59", $t));
                    t.Fixture.GetFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.InvariantWorks:static start.*/
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "68", $t));
                    t.Fixture.InvariantWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.InvariantWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TextInfoViaGetCultureInfoWorks:static start.*/
                TextInfoViaGetCultureInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TextInfoViaGetCultureInfoWorks()", $t.Line = "92", $t));
                    t.Fixture.TextInfoViaGetCultureInfoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TextInfoViaGetCultureInfoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TextInfoViaNewCultureInfoWorks:static start.*/
                TextInfoViaNewCultureInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TextInfoViaNewCultureInfoWorks()", $t.Line = "112", $t));
                    t.Fixture.TextInfoViaNewCultureInfoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.TextInfoViaNewCultureInfoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.DateTimeFormatFirstDayOfWeekWorks_N3013:static start.*/
                DateTimeFormatFirstDayOfWeekWorks_N3013: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateTimeFormatFirstDayOfWeekWorks_N3013()", $t.Line = "133", $t));
                    t.Fixture.DateTimeFormatFirstDayOfWeekWorks_N3013();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.DateTimeFormatFirstDayOfWeekWorks_N3013:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CultureInfoTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CultureInfoTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureInfoTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "14", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "45", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndParamNameWorks:static start.*/
                ConstructorWithMessageAndParamNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndParamNameWorks()", $t.Line = "58", $t));
                    t.Fixture.ConstructorWithMessageAndParamNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndParamNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndCultureNameAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndCultureNameAndInnerExceptionWorks()", $t.Line = "70", $t));
                    t.Fixture.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureNameAndMessage:static start.*/
                ConstructorWithParamNameAndCultureNameAndMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndCultureNameAndMessage()", $t.Line = "84", $t));
                    t.Fixture.ConstructorWithParamNameAndCultureNameAndMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureNameAndMessage:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndCultureIdAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndCultureIdAndInnerExceptionWorks()", $t.Line = "96", $t));
                    t.Fixture.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureIdAndMessage:static start.*/
                ConstructorWithParamNameAndCultureIdAndMessage: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithParamNameAndCultureIdAndMessage()", $t.Line = "110", $t));
                    t.Fixture.ConstructorWithParamNameAndCultureIdAndMessage();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureIdAndMessage:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/CultureNotFoundExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+CultureNotFoundExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "20", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferOnlyConstructorWorks:static start.*/
                ArrayBufferOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferOnlyConstructorWorks()", $t.Line = "36", $t));
                    t.Fixture.ArrayBufferOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferAndByteOffsetConstructorWorks:static start.*/
                ArrayBufferAndByteOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferAndByteOffsetConstructorWorks()", $t.Line = "45", $t));
                    t.Fixture.ArrayBufferAndByteOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferAndByteOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks:static start.*/
                ArrayBufferAndByteOffsetAndByteLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferAndByteOffsetAndByteLengthConstructorWorks()", $t.Line = "54", $t));
                    t.Fixture.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt8Works:static start.*/
                GetInt8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt8Works()", $t.Line = "64", $t));
                    t.Fixture.GetInt8Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt8Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint8Works:static start.*/
                GetUint8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint8Works()", $t.Line = "72", $t));
                    t.Fixture.GetUint8Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint8Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt16Works:static start.*/
                GetInt16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt16Works()", $t.Line = "80", $t));
                    t.Fixture.GetInt16Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt16Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint16Works:static start.*/
                GetUint16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint16Works()", $t.Line = "95", $t));
                    t.Fixture.GetUint16Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint16Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt32Works:static start.*/
                GetInt32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInt32Works()", $t.Line = "110", $t));
                    t.Fixture.GetInt32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetInt32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint32Works:static start.*/
                GetUint32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUint32Works()", $t.Line = "125", $t));
                    t.Fixture.GetUint32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetUint32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetFloat32Works:static start.*/
                GetFloat32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFloat32Works()", $t.Line = "140", $t));
                    t.Fixture.GetFloat32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetFloat32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetFloat64Works:static start.*/
                GetFloat64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFloat64Works()", $t.Line = "149", $t));
                    t.Fixture.GetFloat64Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetFloat64Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt8Works:static start.*/
                SetInt8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8Works()", $t.Line = "173", $t));
                    t.Fixture.SetInt8Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt8Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint8Works:static start.*/
                SetUint8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8Works()", $t.Line = "183", $t));
                    t.Fixture.SetUint8Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint8Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt16Works:static start.*/
                SetInt16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16Works()", $t.Line = "193", $t));
                    t.Fixture.SetInt16Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt16Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint16Works:static start.*/
                SetUint16Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16Works()", $t.Line = "207", $t));
                    t.Fixture.SetUint16Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint16Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt32Works:static start.*/
                SetInt32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32Works()", $t.Line = "221", $t));
                    t.Fixture.SetInt32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetInt32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint32Works:static start.*/
                SetUint32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32Works()", $t.Line = "235", $t));
                    t.Fixture.SetUint32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetUint32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetFloat32Works:static start.*/
                SetFloat32Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32Works()", $t.Line = "249", $t));
                    t.Fixture.SetFloat32Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetFloat32Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetFloat64Works:static start.*/
                SetFloat64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64Works()", $t.Line = "260", $t));
                    t.Fixture.SetFloat64Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.SetFloat64Works:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.DataViewTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/DataViewTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DataViewTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DateTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.TypePropertiesAreCorrect_SPI_1608_1609:static start.*/
                TypePropertiesAreCorrect_SPI_1608_1609: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1608_1609()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1608_1609();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.TypePropertiesAreCorrect_SPI_1608_1609:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DefaultConstructorReturnsTodaysDate:static start.*/
                DefaultConstructorReturnsTodaysDate: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsTodaysDate()", $t.Line = "29", $t));
                    t.Fixture.DefaultConstructorReturnsTodaysDate();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DefaultConstructorReturnsTodaysDate:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.CreatingInstanceReturnsTodaysDate_SPI_1604:static start.*/
                CreatingInstanceReturnsTodaysDate_SPI_1604: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsTodaysDate_SPI_1604()", $t.Line = "36", $t));
                    t.Fixture.CreatingInstanceReturnsTodaysDate_SPI_1604();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.CreatingInstanceReturnsTodaysDate_SPI_1604:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.MillisecondSinceEpochConstructorWorks:static start.*/
                MillisecondSinceEpochConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MillisecondSinceEpochConstructorWorks()", $t.Line = "43", $t));
                    t.Fixture.MillisecondSinceEpochConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.MillisecondSinceEpochConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.StringConstructorWorks:static start.*/
                StringConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringConstructorWorks()", $t.Line = "50", $t));
                    t.Fixture.StringConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.StringConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDConstructorWorks:static start.*/
                YMDConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDConstructorWorks()", $t.Line = "59", $t));
                    t.Fixture.YMDConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHConstructorWorks:static start.*/
                YMDHConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.YMDHConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNConstructorWorks:static start.*/
                YMDHNConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.YMDHNConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNSConstructorWorks:static start.*/
                YMDHNSConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSConstructorWorks()", $t.Line = "89", $t));
                    t.Fixture.YMDHNSConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNSConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNSUConstructorWorks:static start.*/
                YMDHNSUConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSUConstructorWorks()", $t.Line = "101", $t));
                    t.Fixture.YMDHNSUConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.YMDHNSUConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.NowWorks_SPI_1624:static start.*/
                NowWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NowWorks_SPI_1624()", $t.Line = "115", $t));
                    t.Fixture.NowWorks_SPI_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.NowWorks_SPI_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetFullYearWorks:static start.*/
                GetFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFullYearWorks()", $t.Line = "216", $t));
                    t.Fixture.GetFullYearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetFullYearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMonthWorks:static start.*/
                GetMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMonthWorks()", $t.Line = "223", $t));
                    t.Fixture.GetMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetDateWorks:static start.*/
                GetDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDateWorks()", $t.Line = "230", $t));
                    t.Fixture.GetDateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetDateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetHoursWorks:static start.*/
                GetHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHoursWorks()", $t.Line = "237", $t));
                    t.Fixture.GetHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMinutesWorks:static start.*/
                GetMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMinutesWorks()", $t.Line = "244", $t));
                    t.Fixture.GetMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetSecondsWorks:static start.*/
                GetSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetSecondsWorks()", $t.Line = "251", $t));
                    t.Fixture.GetSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMillisecondsWorks:static start.*/
                GetMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMillisecondsWorks()", $t.Line = "258", $t));
                    t.Fixture.GetMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetDayWorks:static start.*/
                GetDayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDayWorks()", $t.Line = "265", $t));
                    t.Fixture.GetDayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetDayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetTimeWorks:static start.*/
                GetTimeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimeWorks()", $t.Line = "272", $t));
                    t.Fixture.GetTimeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetTimeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ValueOfWorks_SPI_1624:static start.*/
                ValueOfWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueOfWorks_SPI_1624()", $t.Line = "280", $t));
                    t.Fixture.ValueOfWorks_SPI_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ValueOfWorks_SPI_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetTimezoneOffsetWorks:static start.*/
                GetTimezoneOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimezoneOffsetWorks()", $t.Line = "288", $t));
                    t.Fixture.GetTimezoneOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetTimezoneOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcFullYearWorks:static start.*/
                GetUtcFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcFullYearWorks()", $t.Line = "295", $t));
                    t.Fixture.GetUtcFullYearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcFullYearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMonthWorks:static start.*/
                GetUtcMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMonthWorks()", $t.Line = "302", $t));
                    t.Fixture.GetUtcMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcHoursWorks:static start.*/
                GetUtcHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcHoursWorks()", $t.Line = "309", $t));
                    t.Fixture.GetUtcHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMinutesWorks:static start.*/
                GetUtcMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMinutesWorks()", $t.Line = "317", $t));
                    t.Fixture.GetUtcMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcSecondsWorks:static start.*/
                GetUtcSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcSecondsWorks()", $t.Line = "330", $t));
                    t.Fixture.GetUtcSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMillisecondsWorks:static start.*/
                GetUtcMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMillisecondsWorks()", $t.Line = "337", $t));
                    t.Fixture.GetUtcMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetUtcMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ParseWorks_SPI_1624:static start.*/
                ParseWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks_SPI_1624()", $t.Line = "345", $t));
                    t.Fixture.ParseWorks_SPI_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ParseWorks_SPI_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleDateStringIsWorking_1624:static start.*/
                ToLocaleDateStringIsWorking_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleDateStringIsWorking_1624()", $t.Line = "367", $t));
                    t.Fixture.ToLocaleDateStringIsWorking_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleDateStringIsWorking_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToDateStringWorks:static start.*/
                ToDateStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToDateStringWorks()", $t.Line = "459", $t));
                    t.Fixture.ToDateStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToDateStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToTimeStringWorks:static start.*/
                ToTimeStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToTimeStringWorks()", $t.Line = "467", $t));
                    t.Fixture.ToTimeStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToTimeStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToUtcStringWorks:static start.*/
                ToUtcStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUtcStringWorks()", $t.Line = "475", $t));
                    t.Fixture.ToUtcStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToUtcStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleDateStringWorks_SPI_1624:static start.*/
                ToLocaleDateStringWorks_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleDateStringWorks_SPI_1624()", $t.Line = "490", $t));
                    t.Fixture.ToLocaleDateStringWorks_SPI_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleDateStringWorks_SPI_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateUTCIsWorking_SPI_1624:static start.*/
                DateUTCIsWorking_SPI_1624: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateUTCIsWorking_SPI_1624()", $t.Line = "498", $t));
                    t.Fixture.DateUTCIsWorking_SPI_1624();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateUTCIsWorking_SPI_1624:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleTimeStringWorks:static start.*/
                ToLocaleTimeStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocaleTimeStringWorks()", $t.Line = "533", $t));
                    t.Fixture.ToLocaleTimeStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.ToLocaleTimeStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SubtractingDatesWorks:static start.*/
                SubtractingDatesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractingDatesWorks()", $t.Line = "587", $t));
                    t.Fixture.SubtractingDatesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SubtractingDatesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateEqualityWorks:static start.*/
                DateEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateEqualityWorks()", $t.Line = "601", $t));
                    t.Fixture.DateEqualityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateEqualityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateInequalityWorks:static start.*/
                DateInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateInequalityWorks()", $t.Line = "611", $t));
                    t.Fixture.DateInequalityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateInequalityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateLessThanWorks:static start.*/
                DateLessThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessThanWorks()", $t.Line = "621", $t));
                    t.Fixture.DateLessThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateLessThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateLessEqualWorks:static start.*/
                DateLessEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessEqualWorks()", $t.Line = "629", $t));
                    t.Fixture.DateLessEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateLessEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateGreaterThanWorks:static start.*/
                DateGreaterThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterThanWorks()", $t.Line = "637", $t));
                    t.Fixture.DateGreaterThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateGreaterThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateGreaterEqualWorks:static start.*/
                DateGreaterEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterEqualWorks()", $t.Line = "645", $t));
                    t.Fixture.DateGreaterEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.DateGreaterEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithOneParameterWorks:static start.*/
                SetFullYearWithOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithOneParameterWorks()", $t.Line = "653", $t));
                    t.Fixture.SetFullYearWithOneParameterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithOneParameterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithTwoParametersWorks:static start.*/
                SetFullYearWithTwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithTwoParametersWorks()", $t.Line = "661", $t));
                    t.Fixture.SetFullYearWithTwoParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithTwoParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithThreeParametersWorks:static start.*/
                SetFullYearWithThreeParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFullYearWithThreeParametersWorks()", $t.Line = "670", $t));
                    t.Fixture.SetFullYearWithThreeParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetFullYearWithThreeParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMonthWorks:static start.*/
                SetMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMonthWorks()", $t.Line = "680", $t));
                    t.Fixture.SetMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetDateWorks:static start.*/
                SetDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetDateWorks()", $t.Line = "688", $t));
                    t.Fixture.SetDateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetDateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetHoursWorks:static start.*/
                SetHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetHoursWorks()", $t.Line = "696", $t));
                    t.Fixture.SetHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMinutesWorks:static start.*/
                SetMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMinutesWorks()", $t.Line = "704", $t));
                    t.Fixture.SetMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetSecondsWorks:static start.*/
                SetSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetSecondsWorks()", $t.Line = "712", $t));
                    t.Fixture.SetSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMillisecondsWorks:static start.*/
                SetMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetMillisecondsWorks()", $t.Line = "720", $t));
                    t.Fixture.SetMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetTimeWorks:static start.*/
                SetTimeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetTimeWorks()", $t.Line = "728", $t));
                    t.Fixture.SetTimeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetTimeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetTimeAsDoubleWorks:static start.*/
                SetTimeAsDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetTimeAsDoubleWorks()", $t.Line = "736", $t));
                    t.Fixture.SetTimeAsDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetTimeAsDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithOneParameterWorks:static start.*/
                SetUtcFullYearWithOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithOneParameterWorks()", $t.Line = "744", $t));
                    t.Fixture.SetUtcFullYearWithOneParameterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithOneParameterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithTwoParametersWorks:static start.*/
                SetUtcFullYearWithTwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithTwoParametersWorks()", $t.Line = "752", $t));
                    t.Fixture.SetUtcFullYearWithTwoParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithTwoParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithThreeParametersWorks:static start.*/
                SetUtcFullYearWithThreeParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcFullYearWithThreeParametersWorks()", $t.Line = "761", $t));
                    t.Fixture.SetUtcFullYearWithThreeParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcFullYearWithThreeParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMonthWorks:static start.*/
                SetUtcMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMonthWorks()", $t.Line = "771", $t));
                    t.Fixture.SetUtcMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcDateWorks:static start.*/
                SetUtcDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcDateWorks()", $t.Line = "781", $t));
                    t.Fixture.SetUtcDateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcDateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcHoursWorks:static start.*/
                SetUtcHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcHoursWorks()", $t.Line = "789", $t));
                    t.Fixture.SetUtcHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMinutesWorks:static start.*/
                SetUtcMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMinutesWorks()", $t.Line = "797", $t));
                    t.Fixture.SetUtcMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcSecondsWorks:static start.*/
                SetUtcSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcSecondsWorks()", $t.Line = "805", $t));
                    t.Fixture.SetUtcSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMillisecondsWorks:static start.*/
                SetUtcMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUtcMillisecondsWorks()", $t.Line = "813", $t));
                    t.Fixture.SetUtcMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.SetUtcMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "821", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "830", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.EqualsWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.DateTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/JsDateTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.GetFormatWorks:static start.*/
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "19", $t));
                    t.Fixture.GetFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.GetFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.InvariantWorks_SPI_1562:static start.*/
                InvariantWorks_SPI_1562: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks_SPI_1562()", $t.Line = "27", $t));
                    t.Fixture.InvariantWorks_SPI_1562();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.InvariantWorks_SPI_1562:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Format.DateTimeFormatInfoTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Format/DateTimeFormatInfoTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DateTimeFormatInfoTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestSubtractOperator:static start.*/
                TestSubtractOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSubtractOperator()", $t.Line = "133", $t));
                    Bridge.ClientTest.DecimalMathTests.TestSubtractOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestSubtractOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestRemainderOperator:static start.*/
                TestRemainderOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestRemainderOperator()", $t.Line = "139", $t));
                    Bridge.ClientTest.DecimalMathTests.TestRemainderOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestRemainderOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestMultiplyOperator:static start.*/
                TestMultiplyOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMultiplyOperator()", $t.Line = "145", $t));
                    Bridge.ClientTest.DecimalMathTests.TestMultiplyOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestMultiplyOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestDivideOperator:static start.*/
                TestDivideOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestDivideOperator()", $t.Line = "151", $t));
                    Bridge.ClientTest.DecimalMathTests.TestDivideOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestDivideOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestAddOperator:static start.*/
                TestAddOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestAddOperator()", $t.Line = "157", $t));
                    Bridge.ClientTest.DecimalMathTests.TestAddOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestAddOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestAddMethod:static start.*/
                TestAddMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestAddMethod()", $t.Line = "163", $t));
                    Bridge.ClientTest.DecimalMathTests.TestAddMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestAddMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestDivideMethod:static start.*/
                TestDivideMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestDivideMethod()", $t.Line = "169", $t));
                    Bridge.ClientTest.DecimalMathTests.TestDivideMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestDivideMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestMultiplyMethod:static start.*/
                TestMultiplyMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMultiplyMethod()", $t.Line = "175", $t));
                    Bridge.ClientTest.DecimalMathTests.TestMultiplyMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestMultiplyMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestRemainderMethod:static start.*/
                TestRemainderMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestRemainderMethod()", $t.Line = "181", $t));
                    Bridge.ClientTest.DecimalMathTests.TestRemainderMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestRemainderMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestSubtractMethod:static start.*/
                TestSubtractMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSubtractMethod()", $t.Line = "187", $t));
                    Bridge.ClientTest.DecimalMathTests.TestSubtractMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestSubtractMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestCeilingMethod:static start.*/
                TestCeilingMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCeilingMethod()", $t.Line = "193", $t));
                    Bridge.ClientTest.DecimalMathTests.TestCeilingMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestCeilingMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestFloorMethod:static start.*/
                TestFloorMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFloorMethod()", $t.Line = "218", $t));
                    Bridge.ClientTest.DecimalMathTests.TestFloorMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.TestFloorMethod:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.DecimalMathTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/DecimalMathTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalMathTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DefaultValueIsDecimal0:static start.*/
                DefaultValueIsDecimal0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIsDecimal0()", $t.Line = "39", $t));
                    t.Fixture.DefaultValueIsDecimal0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DefaultValueIsDecimal0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "45", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.LiteralDecimalsWork_SPI_1590:static start.*/
                LiteralDecimalsWork_SPI_1590: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiteralDecimalsWork_SPI_1590()", $t.Line = "51", $t));
                    t.Fixture.LiteralDecimalsWork_SPI_1590();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.LiteralDecimalsWork_SPI_1590:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConstantsWork_SPI_1590:static start.*/
                ConstantsWork_SPI_1590: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork_SPI_1590()", $t.Line = "62", $t));
                    t.Fixture.ConstantsWork_SPI_1590();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConstantsWork_SPI_1590:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "73", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConvertingConstructorsWork:static start.*/
                ConvertingConstructorsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConvertingConstructorsWork()", $t.Line = "79", $t));
                    t.Fixture.ConvertingConstructorsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConvertingConstructorsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "90", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "96", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "102", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "108", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "114", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.AddWithStringWorks:static start.*/
                AddWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWithStringWorks()", $t.Line = "170", $t));
                    t.Fixture.AddWithStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.AddWithStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConversionsToDecimalWork_SPI_1580:static start.*/
                ConversionsToDecimalWork_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsToDecimalWork_SPI_1580()", $t.Line = "184", $t));
                    t.Fixture.ConversionsToDecimalWork_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConversionsToDecimalWork_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConversionsFromDecimalWork:static start.*/
                ConversionsFromDecimalWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsFromDecimalWork()", $t.Line = "219", $t));
                    t.Fixture.ConversionsFromDecimalWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ConversionsFromDecimalWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableConversionsToDecimalWork_SPI_1580_1581_1587:static start.*/
                NullableConversionsToDecimalWork_SPI_1580_1581_1587: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableConversionsToDecimalWork_SPI_1580_1581_1587()", $t.Line = "236", $t));
                    t.Fixture.NullableConversionsToDecimalWork_SPI_1580_1581_1587();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableConversionsToDecimalWork_SPI_1580_1581_1587:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToSByte_SPI_1580:static start.*/
                DecimalToSByte_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToSByte_SPI_1580()", $t.Line = "330", $t));
                    t.Fixture.DecimalToSByte_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToSByte_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToByte_SPI_1580:static start.*/
                DecimalToByte_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToByte_SPI_1580()", $t.Line = "359", $t));
                    t.Fixture.DecimalToByte_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToByte_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToShort_SPI_1580:static start.*/
                DecimalToShort_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToShort_SPI_1580()", $t.Line = "388", $t));
                    t.Fixture.DecimalToShort_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToShort_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToUShort_SPI_1580:static start.*/
                DecimalToUShort_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToUShort_SPI_1580()", $t.Line = "417", $t));
                    t.Fixture.DecimalToUShort_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToUShort_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToChar:static start.*/
                DecimalToChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToChar()", $t.Line = "446", $t));
                    t.Fixture.DecimalToChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToInt_SPI_1580:static start.*/
                DecimalToInt_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToInt_SPI_1580()", $t.Line = "462", $t));
                    t.Fixture.DecimalToInt_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToInt_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToUInt_SPI_1580:static start.*/
                DecimalToUInt_SPI_1580: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToUInt_SPI_1580()", $t.Line = "491", $t));
                    t.Fixture.DecimalToUInt_SPI_1580();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToUInt_SPI_1580:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToLong_SPI_1578:static start.*/
                DecimalToLong_SPI_1578: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToLong_SPI_1578()", $t.Line = "520", $t));
                    t.Fixture.DecimalToLong_SPI_1578();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToLong_SPI_1578:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToULong_SPI_1584_1585:static start.*/
                DecimalToULong_SPI_1584_1585: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToULong_SPI_1584_1585()", $t.Line = "532", $t));
                    t.Fixture.DecimalToULong_SPI_1584_1585();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToULong_SPI_1584_1585:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToFloat:static start.*/
                DecimalToFloat: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToFloat()", $t.Line = "566", $t));
                    t.Fixture.DecimalToFloat();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToFloat:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToDouble:static start.*/
                DecimalToDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalToDouble()", $t.Line = "574", $t));
                    t.Fixture.DecimalToDouble();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalToDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToSByte:static start.*/
                NullableDecimalToSByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToSByte()", $t.Line = "582", $t));
                    t.Fixture.NullableDecimalToSByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToSByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToByte:static start.*/
                NullableDecimalToByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToByte()", $t.Line = "613", $t));
                    t.Fixture.NullableDecimalToByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToShort:static start.*/
                NullableDecimalToShort: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToShort()", $t.Line = "644", $t));
                    t.Fixture.NullableDecimalToShort();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToShort:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToUShort:static start.*/
                NullableDecimalToUShort: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToUShort()", $t.Line = "675", $t));
                    t.Fixture.NullableDecimalToUShort();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToUShort:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToChar:static start.*/
                NullableDecimalToChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToChar()", $t.Line = "706", $t));
                    t.Fixture.NullableDecimalToChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToInt:static start.*/
                NullableDecimalToInt: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToInt()", $t.Line = "737", $t));
                    t.Fixture.NullableDecimalToInt();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToInt:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToUInt:static start.*/
                NullableDecimalToUInt: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToUInt()", $t.Line = "768", $t));
                    t.Fixture.NullableDecimalToUInt();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToUInt:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToFloat_SPI_1579:static start.*/
                NullableDecimalToFloat_SPI_1579: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToFloat_SPI_1579()", $t.Line = "841", $t));
                    t.Fixture.NullableDecimalToFloat_SPI_1579();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToFloat_SPI_1579:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToDouble_SPI_1579:static start.*/
                NullableDecimalToDouble_SPI_1579: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullableDecimalToDouble_SPI_1579()", $t.Line = "864", $t));
                    t.Fixture.NullableDecimalToDouble_SPI_1579();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NullableDecimalToDouble_SPI_1579:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.OperatorsWork_SPI_1583:static start.*/
                OperatorsWork_SPI_1583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OperatorsWork_SPI_1583()", $t.Line = "885", $t));
                    t.Fixture.OperatorsWork_SPI_1583();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.OperatorsWork_SPI_1583:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.LiftedOperatorsWork_SPI_1583:static start.*/
                LiftedOperatorsWork_SPI_1583: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedOperatorsWork_SPI_1583()", $t.Line = "931", $t));
                    t.Fixture.LiftedOperatorsWork_SPI_1583();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.LiftedOperatorsWork_SPI_1583:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "1023", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CeilingWorks:static start.*/
                CeilingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingWorks()", $t.Line = "1029", $t));
                    t.Fixture.CeilingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CeilingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DivideWorks:static start.*/
                DivideWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivideWorks()", $t.Line = "1037", $t));
                    t.Fixture.DivideWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DivideWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FloorWorks:static start.*/
                FloorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorWorks()", $t.Line = "1043", $t));
                    t.Fixture.FloorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FloorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RemainderWorks:static start.*/
                RemainderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemainderWorks()", $t.Line = "1051", $t));
                    t.Fixture.RemainderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RemainderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.MultiplyWorks:static start.*/
                MultiplyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultiplyWorks()", $t.Line = "1057", $t));
                    t.Fixture.MultiplyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.MultiplyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NegateWorks:static start.*/
                NegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegateWorks()", $t.Line = "1063", $t));
                    t.Fixture.NegateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.NegateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RoundWorks:static start.*/
                RoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWorks()", $t.Line = "1069", $t));
                    t.Fixture.RoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RoundWithModeWorks:static start.*/
                RoundWithModeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundWithModeWorks()", $t.Line = "1075", $t));
                    t.Fixture.RoundWithModeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.RoundWithModeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ParseWorks_SPI_1586:static start.*/
                ParseWorks_SPI_1586: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks_SPI_1586()", $t.Line = "1142", $t));
                    t.Fixture.ParseWorks_SPI_1586();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ParseWorks_SPI_1586:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TryParseWorks_SPI_1586:static start.*/
                TryParseWorks_SPI_1586: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1586()", $t.Line = "1166", $t));
                    t.Fixture.TryParseWorks_SPI_1586();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TryParseWorks_SPI_1586:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TruncateWorks:static start.*/
                TruncateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWorks()", $t.Line = "1217", $t));
                    t.Fixture.TruncateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.TruncateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.SubtractWorks:static start.*/
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "1225", $t));
                    t.Fixture.SubtractWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.SubtractWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "1231", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ObjectEqualsWorks:static start.*/
                ObjectEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectEqualsWorks()", $t.Line = "1240", $t));
                    t.Fixture.ObjectEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ObjectEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalEqualsWorks:static start.*/
                DecimalEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalEqualsWorks()", $t.Line = "1250", $t));
                    t.Fixture.DecimalEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.DecimalEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "1260", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "1269", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.StaticCompareWorks:static start.*/
                StaticCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticCompareWorks()", $t.Line = "1278", $t));
                    t.Fixture.StaticCompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.StaticCompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "1287", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FullCoalesceWorks:static start.*/
                FullCoalesceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FullCoalesceWorks()", $t.Line = "1296", $t));
                    t.Fixture.FullCoalesceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.FullCoalesceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ShortCoalesceWorks:static start.*/
                ShortCoalesceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ShortCoalesceWorks()", $t.Line = "1305", $t));
                    t.Fixture.ShortCoalesceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ShortCoalesceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ImplementationTests_SPI_1588_1590_1650:static start.*/
                ImplementationTests_SPI_1588_1590_1650: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ImplementationTests_SPI_1588_1590_1650()", $t.Line = "1319", $t));
                    t.Fixture.ImplementationTests_SPI_1588_1590_1650();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.ImplementationTests_SPI_1588_1590_1650:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.InternalGetBytesWorks:static start.*/
                InternalGetBytesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InternalGetBytesWorks()", $t.Line = "1943", $t));
                    t.Fixture.InternalGetBytesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.InternalGetBytesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.InternalFromBytesWorks:static start.*/
                InternalFromBytesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InternalFromBytesWorks()", $t.Line = "1959", $t));
                    t.Fixture.InternalFromBytesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.InternalFromBytesWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.DecimalTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/DecimalTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DecimalTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "32", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CreatingAndInvokingADelegateWorks:static start.*/
                CreatingAndInvokingADelegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAndInvokingADelegateWorks()", $t.Line = "49", $t));
                    t.Fixture.CreatingAndInvokingADelegateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CreatingAndInvokingADelegateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineWorks:static start.*/
                CombineWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineWorks()", $t.Line = "71", $t));
                    t.Fixture.CombineWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineDoesAddsDuplicateDelegates:static start.*/
                CombineDoesAddsDuplicateDelegates: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineDoesAddsDuplicateDelegates()", $t.Line = "80", $t));
                    t.Fixture.CombineDoesAddsDuplicateDelegates();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineDoesAddsDuplicateDelegates:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineDoesNotAffectOriginal_SPI_1563:static start.*/
                CombineDoesNotAffectOriginal_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombineDoesNotAffectOriginal_SPI_1563()", $t.Line = "93", $t));
                    t.Fixture.CombineDoesNotAffectOriginal_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CombineDoesNotAffectOriginal_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "108", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.AddAssignWorks:static start.*/
                AddAssignWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAssignWorks()", $t.Line = "117", $t));
                    t.Fixture.AddAssignWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.AddAssignWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveWorks:static start.*/
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "127", $t));
                    t.Fixture.RemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveDoesNotAffectOriginal_SPI_1563:static start.*/
                RemoveDoesNotAffectOriginal_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveDoesNotAffectOriginal_SPI_1563()", $t.Line = "138", $t));
                    t.Fixture.RemoveDoesNotAffectOriginal_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveDoesNotAffectOriginal_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractingDelegateFromItselfReturnsNull:static start.*/
                SubtractingDelegateFromItselfReturnsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractingDelegateFromItselfReturnsNull()", $t.Line = "160", $t));
                    t.Fixture.SubtractingDelegateFromItselfReturnsNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractingDelegateFromItselfReturnsNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveWorksWithMethodGroupConversion_SPI_1563:static start.*/
                RemoveWorksWithMethodGroupConversion_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorksWithMethodGroupConversion_SPI_1563()", $t.Line = "174", $t));
                    t.Fixture.RemoveWorksWithMethodGroupConversion_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.RemoveWorksWithMethodGroupConversion_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractWorks:static start.*/
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "190", $t));
                    t.Fixture.SubtractWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractAssignWorks:static start.*/
                SubtractAssignWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractAssignWorks()", $t.Line = "201", $t));
                    t.Fixture.SubtractAssignWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.SubtractAssignWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CloningDelegateToADifferentTypeIsANoOp:static start.*/
                CloningDelegateToADifferentTypeIsANoOp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningDelegateToADifferentTypeIsANoOp()", $t.Line = "249", $t));
                    t.Fixture.CloningDelegateToADifferentTypeIsANoOp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CloningDelegateToADifferentTypeIsANoOp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563:static start.*/
                CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563()", $t.Line = "259", $t));
                    t.Fixture.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563:static start.*/
                EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563()", $t.Line = "291", $t));
                    t.Fixture.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetInvocationListWorksForImportedFunction_SPI_1563:static start.*/
                GetInvocationListWorksForImportedFunction_SPI_1563: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInvocationListWorksForImportedFunction_SPI_1563()", $t.Line = "340", $t));
                    t.Fixture.GetInvocationListWorksForImportedFunction_SPI_1563();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetInvocationListWorksForImportedFunction_SPI_1563:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetInvocationListWorksForMulticastDelegate:static start.*/
                GetInvocationListWorksForMulticastDelegate: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DelegateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DelegateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetInvocationListWorksForMulticastDelegate()", $t.Line = "353", $t));
                    t.Fixture.GetInvocationListWorksForMulticastDelegate();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetInvocationListWorksForMulticastDelegate:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.DelegateTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/DelegateTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DelegateTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/DivideByZeroExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DivideByZeroExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.ConstructorWorks:static start.*/
                ConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks()", $t.Line = "12", $t));
                    t.Fixture.ConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.ConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.XmlParsingWorks:static start.*/
                XmlParsingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "XmlParsingWorks()", $t.Line = "20", $t));
                    t.Fixture.XmlParsingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.XmlParsingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.XmlParsingShouldThrow:static start.*/
                XmlParsingShouldThrow: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "XmlParsingShouldThrow()", $t.Line = "38", $t));
                    t.Fixture.XmlParsingShouldThrow();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.XmlParsingShouldThrow:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.DOMParserTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/DOMParserTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DOMParserTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "31", $t));
                    try {
                        t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "58", $t));
                    try {
                        t.Fixture.DefaultValueIs0();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "64", $t));
                    try {
                        t.Fixture.CreatingInstanceReturnsZero();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "70", $t));
                    try {
                        t.Fixture.ConstantsWork();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "84", $t));
                    try {
                        t.Fixture.DefaultConstructorReturnsZero();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "90", $t));
                    try {
                        t.Fixture.FormatWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "96", $t));
                    try {
                        t.Fixture.ToStringWithFormatWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "102", $t));
                    try {
                        t.Fixture.ToStringWithFormatAndProviderWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "108", $t));
                    try {
                        t.Fixture.IFormattableToStringWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IFormattableToStringWithCultureInfoWorks:static start.*/
                IFormattableToStringWithCultureInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWithCultureInfoWorks()", $t.Line = "114", $t));
                    try {
                        t.Fixture.IFormattableToStringWithCultureInfoWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IFormattableToStringWithCultureInfoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "127", $t));
                    try {
                        t.Fixture.ToStringWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToExponentialWorks:static start.*/
                ToExponentialWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWorks()", $t.Line = "133", $t));
                    try {
                        t.Fixture.ToExponentialWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToExponentialWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToExponentialWithFractionalDigitsWorks:static start.*/
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWithFractionalDigitsWorks()", $t.Line = "139", $t));
                    try {
                        t.Fixture.ToExponentialWithFractionalDigitsWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToExponentialWithFractionalDigitsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToFixed:static start.*/
                ToFixed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixed()", $t.Line = "145", $t));
                    try {
                        t.Fixture.ToFixed();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToFixed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToFixedWithFractionalDigitsWorks:static start.*/
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixedWithFractionalDigitsWorks()", $t.Line = "151", $t));
                    try {
                        t.Fixture.ToFixedWithFractionalDigitsWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToFixedWithFractionalDigitsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToPrecisionWorks:static start.*/
                ToPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWorks()", $t.Line = "157", $t));
                    try {
                        t.Fixture.ToPrecisionWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToPrecisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToPrecisionWithPrecisionWorks:static start.*/
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWithPrecisionWorks()", $t.Line = "163", $t));
                    try {
                        t.Fixture.ToPrecisionWithPrecisionWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ToPrecisionWithPrecisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsPositiveInfinityWorks_SPI_1600:static start.*/
                IsPositiveInfinityWorks_SPI_1600: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPositiveInfinityWorks_SPI_1600()", $t.Line = "169", $t));
                    try {
                        t.Fixture.IsPositiveInfinityWorks_SPI_1600();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsPositiveInfinityWorks_SPI_1600:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsNegativeInfinityWorks:static start.*/
                IsNegativeInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNegativeInfinityWorks()", $t.Line = "181", $t));
                    try {
                        t.Fixture.IsNegativeInfinityWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsNegativeInfinityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsInfinityWorks:static start.*/
                IsInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInfinityWorks()", $t.Line = "191", $t));
                    try {
                        t.Fixture.IsInfinityWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsInfinityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsFiniteWorks:static start.*/
                IsFiniteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFiniteWorks()", $t.Line = "201", $t));
                    try {
                        t.Fixture.IsFiniteWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsFiniteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsNaNWorks:static start.*/
                IsNaNWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNaNWorks()", $t.Line = "210", $t));
                    try {
                        t.Fixture.IsNaNWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IsNaNWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "219", $t));
                    try {
                        t.Fixture.GetHashCodeWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ObjectEqualsWorks:static start.*/
                ObjectEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectEqualsWorks()", $t.Line = "228", $t));
                    try {
                        t.Fixture.ObjectEqualsWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ObjectEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "237", $t));
                    try {
                        t.Fixture.IEquatableEqualsWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "251", $t));
                    try {
                        t.Fixture.CompareToWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "260", $t));
                    try {
                        t.Fixture.IComparableCompareToWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseCurrentCultureWorks:static start.*/
                ParseCurrentCultureWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseCurrentCultureWorks()", $t.Line = "269", $t));
                    try {
                        t.Fixture.ParseCurrentCultureWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseCurrentCultureWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseCurrentCultureThrows:static start.*/
                ParseCurrentCultureThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseCurrentCultureThrows()", $t.Line = "290", $t));
                    try {
                        t.Fixture.ParseCurrentCultureThrows();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseCurrentCultureThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseRuCultureWorks:static start.*/
                ParseRuCultureWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseRuCultureWorks()", $t.Line = "308", $t));
                    try {
                        t.Fixture.ParseRuCultureWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseRuCultureWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseRuCultureThrows:static start.*/
                ParseRuCultureThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseRuCultureThrows()", $t.Line = "328", $t));
                    try {
                        t.Fixture.ParseRuCultureThrows();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.ParseRuCultureThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TryParseCurrentCultureWorks:static start.*/
                TryParseCurrentCultureWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseCurrentCultureWorks()", $t.Line = "352", $t));
                    try {
                        t.Fixture.TryParseCurrentCultureWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TryParseCurrentCultureWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TryParseRuCultureWorks:static start.*/
                TryParseRuCultureWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseRuCultureWorks()", $t.Line = "387", $t));
                    try {
                        t.Fixture.TryParseRuCultureWorks();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TryParseRuCultureWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.DoubleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/DoubleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.GetContext end.*/

            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.SetUp start.*/
            SetUp: function () {
                this.Fixture.SaveCurrentCulture();
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.SetUp end.*/

            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TearDown start.*/
            TearDown: function () {
                this.Fixture.RestoreCulture();
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests.TearDown end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+DoubleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "69", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultValueOfEnumClassIsNull:static start.*/
                DefaultValueOfEnumClassIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfEnumClassIsNull()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueOfEnumClassIsNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultValueOfEnumClassIsNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultValueOfEnumTypeIsFirstValue_SPI_1595:static start.*/
                DefaultValueOfEnumTypeIsFirstValue_SPI_1595: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfEnumTypeIsFirstValue_SPI_1595()", $t.Line = "98", $t));
                    t.Fixture.DefaultValueOfEnumTypeIsFirstValue_SPI_1595();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultValueOfEnumTypeIsFirstValue_SPI_1595:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultConstructorOfEnumTypeReturnsZero:static start.*/
                DefaultConstructorOfEnumTypeReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfEnumTypeReturnsZero()", $t.Line = "105", $t));
                    t.Fixture.DefaultConstructorOfEnumTypeReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultConstructorOfEnumTypeReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultConstructorOfEnumTypeReturnsZero_SPI_1595:static start.*/
                DefaultConstructorOfEnumTypeReturnsZero_SPI_1595: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfEnumTypeReturnsZero_SPI_1595()", $t.Line = "111", $t));
                    t.Fixture.DefaultConstructorOfEnumTypeReturnsZero_SPI_1595();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultConstructorOfEnumTypeReturnsZero_SPI_1595:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.FirstValueOfEnumIsZero:static start.*/
                FirstValueOfEnumIsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FirstValueOfEnumIsZero()", $t.Line = "118", $t));
                    t.Fixture.FirstValueOfEnumIsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.FirstValueOfEnumIsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.CreatingInstanceOfEnumTypeReturnsZero_SPI_1595:static start.*/
                CreatingInstanceOfEnumTypeReturnsZero_SPI_1595: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceOfEnumTypeReturnsZero_SPI_1595()", $t.Line = "124", $t));
                    t.Fixture.CreatingInstanceOfEnumTypeReturnsZero_SPI_1595();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.CreatingInstanceOfEnumTypeReturnsZero_SPI_1595:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultExpressionWithEnumReturnsZero_SPI_1595:static start.*/
                DefaultExpressionWithEnumReturnsZero_SPI_1595: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultExpressionWithEnumReturnsZero_SPI_1595()", $t.Line = "131", $t));
                    t.Fixture.DefaultExpressionWithEnumReturnsZero_SPI_1595();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.DefaultExpressionWithEnumReturnsZero_SPI_1595:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "138", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "145", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "153", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestParse:static start.*/
                TestParse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestParse()", $t.Line = "160", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestParse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestParse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestParseIgnoreCase:static start.*/
                TestParseIgnoreCase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestParseIgnoreCase()", $t.Line = "172", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestParseIgnoreCase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestParseIgnoreCase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestToString:static start.*/
                TestToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestToString()", $t.Line = "182", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestToString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestToString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.StaticToStringWorks:static start.*/
                StaticToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticToStringWorks()", $t.Line = "192", $t));
                    t.Fixture.StaticToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.StaticToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596:static start.*/
                ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596()", $t.Line = "201", $t));
                    t.Fixture.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetValuesWorks:static start.*/
                GetValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValuesWorks()", $t.Line = "210", $t));
                    t.Fixture.GetValuesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetValuesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetValues:static start.*/
                TestGetValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGetValues()", $t.Line = "227", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestGetValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestCompareTo:static start.*/
                TestCompareTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCompareTo()", $t.Line = "235", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestCompareTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestCompareTo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestFormat:static start.*/
                TestFormat: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 22, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFormat()", $t.Line = "243", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestFormat();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestFormat:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetName:static start.*/
                TestGetName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGetName()", $t.Line = "273", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestGetName();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetName:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetNames:static start.*/
                TestGetNames: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGetNames()", $t.Line = "281", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestGetNames();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestGetNames:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestHasFlag:static start.*/
                TestHasFlag: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestHasFlag()", $t.Line = "289", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestHasFlag();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestHasFlag:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestIsDefined:static start.*/
                TestIsDefined: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestIsDefined()", $t.Line = "301", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestIsDefined();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestIsDefined:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestTryParse:static start.*/
                TestTryParse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTryParse()", $t.Line = "312", $t));
                    Bridge.ClientTest.SimpleTypes.EnumTests.TestTryParse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.TestTryParse:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.EnumTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/EnumTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+EnumTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CommandLineNotEmpty:static start.*/
                CommandLineNotEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CommandLineNotEmpty()", $t.Line = "40", $t));
                    t.Fixture.CommandLineNotEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CommandLineNotEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CurrentDirectoryNotEmpty:static start.*/
                CurrentDirectoryNotEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CurrentDirectoryNotEmpty()", $t.Line = "47", $t));
                    t.Fixture.CurrentDirectoryNotEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CurrentDirectoryNotEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CurrentManagedThreadIdZero:static start.*/
                CurrentManagedThreadIdZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CurrentManagedThreadIdZero()", $t.Line = "54", $t));
                    t.Fixture.CurrentManagedThreadIdZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.CurrentManagedThreadIdZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExitCodeWorks:static start.*/
                ExitCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExitCodeWorks()", $t.Line = "60", $t));
                    t.Fixture.ExitCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExitCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.HasShutdownStartedFalse:static start.*/
                HasShutdownStartedFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HasShutdownStartedFalse()", $t.Line = "70", $t));
                    t.Fixture.HasShutdownStartedFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.HasShutdownStartedFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.Is64BitOperatingSystemNotNull:static start.*/
                Is64BitOperatingSystemNotNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Is64BitOperatingSystemNotNull()", $t.Line = "77", $t));
                    t.Fixture.Is64BitOperatingSystemNotNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.Is64BitOperatingSystemNotNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.Is64BitProcessNotNull:static start.*/
                Is64BitProcessNotNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Is64BitProcessNotNull()", $t.Line = "83", $t));
                    t.Fixture.Is64BitProcessNotNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.Is64BitProcessNotNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.MachineNameEmpty:static start.*/
                MachineNameEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MachineNameEmpty()", $t.Line = "89", $t));
                    t.Fixture.MachineNameEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.MachineNameEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.NewLineIsAStringContainingOnlyTheNewLineChar:static start.*/
                NewLineIsAStringContainingOnlyTheNewLineChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewLineIsAStringContainingOnlyTheNewLineChar()", $t.Line = "96", $t));
                    t.Fixture.NewLineIsAStringContainingOnlyTheNewLineChar();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.NewLineIsAStringContainingOnlyTheNewLineChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.OSVersionNull:static start.*/
                OSVersionNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OSVersionNull()", $t.Line = "102", $t));
                    t.Fixture.OSVersionNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.OSVersionNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ProcessorCountMoreThanZero:static start.*/
                ProcessorCountMoreThanZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ProcessorCountMoreThanZero()", $t.Line = "108", $t));
                    t.Fixture.ProcessorCountMoreThanZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ProcessorCountMoreThanZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.StackTraceNotEmpty:static start.*/
                StackTraceNotEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StackTraceNotEmpty()", $t.Line = "115", $t));
                    t.Fixture.StackTraceNotEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.StackTraceNotEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SystemDirectoryEmpty:static start.*/
                SystemDirectoryEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SystemDirectoryEmpty()", $t.Line = "122", $t));
                    t.Fixture.SystemDirectoryEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SystemDirectoryEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SystemPageSizeEqualsOne:static start.*/
                SystemPageSizeEqualsOne: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SystemPageSizeEqualsOne()", $t.Line = "128", $t));
                    t.Fixture.SystemPageSizeEqualsOne();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SystemPageSizeEqualsOne:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.TickCountNotEmpty:static start.*/
                TickCountNotEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TickCountNotEmpty()", $t.Line = "134", $t));
                    t.Fixture.TickCountNotEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.TickCountNotEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserDomainNameEmpty:static start.*/
                UserDomainNameEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UserDomainNameEmpty()", $t.Line = "142", $t));
                    t.Fixture.UserDomainNameEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserDomainNameEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserInteractiveTrue:static start.*/
                UserInteractiveTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UserInteractiveTrue()", $t.Line = "148", $t));
                    t.Fixture.UserInteractiveTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserInteractiveTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserNameEmpty:static start.*/
                UserNameEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UserNameEmpty()", $t.Line = "155", $t));
                    t.Fixture.UserNameEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.UserNameEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.VersionWorks:static start.*/
                VersionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VersionWorks()", $t.Line = "161", $t));
                    t.Fixture.VersionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.VersionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.WorkingSetZero:static start.*/
                WorkingSetZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WorkingSetZero()", $t.Line = "168", $t));
                    t.Fixture.WorkingSetZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.WorkingSetZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExitSetsExitCode:static start.*/
                ExitSetsExitCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExitSetsExitCode()", $t.Line = "176", $t));
                    t.Fixture.ExitSetsExitCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExitSetsExitCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExpandEnvironmentVariablesWorks:static start.*/
                ExpandEnvironmentVariablesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpandEnvironmentVariablesWorks()", $t.Line = "184", $t));
                    t.Fixture.ExpandEnvironmentVariablesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.ExpandEnvironmentVariablesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.FailFastWorks:static start.*/
                FailFastWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FailFastWorks()", $t.Line = "199", $t));
                    t.Fixture.FailFastWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.FailFastWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetCommandLineArgsWorks:static start.*/
                GetCommandLineArgsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCommandLineArgsWorks()", $t.Line = "223", $t));
                    t.Fixture.GetCommandLineArgsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetCommandLineArgsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariableOneParameterWorks:static start.*/
                GetEnvironmentVariableOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnvironmentVariableOneParameterWorks()", $t.Line = "235", $t));
                    t.Fixture.GetEnvironmentVariableOneParameterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariableOneParameterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariableRwoParametersWorks:static start.*/
                GetEnvironmentVariableRwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnvironmentVariableRwoParametersWorks()", $t.Line = "254", $t));
                    t.Fixture.GetEnvironmentVariableRwoParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariableRwoParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariablesWorks:static start.*/
                GetEnvironmentVariablesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnvironmentVariablesWorks()", $t.Line = "274", $t));
                    t.Fixture.GetEnvironmentVariablesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariablesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariablesOneParameterWorks:static start.*/
                GetEnvironmentVariablesOneParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnvironmentVariablesOneParameterWorks()", $t.Line = "294", $t));
                    t.Fixture.GetEnvironmentVariablesOneParameterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetEnvironmentVariablesOneParameterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetFolderPathOneParameterEmpty:static start.*/
                GetFolderPathOneParameterEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFolderPathOneParameterEmpty()", $t.Line = "315", $t));
                    t.Fixture.GetFolderPathOneParameterEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetFolderPathOneParameterEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetFolderPathTwoParametersEmpty:static start.*/
                GetFolderPathTwoParametersEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFolderPathTwoParametersEmpty()", $t.Line = "321", $t));
                    t.Fixture.GetFolderPathTwoParametersEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetFolderPathTwoParametersEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetLogicalDrivesEmpty:static start.*/
                GetLogicalDrivesEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLogicalDrivesEmpty()", $t.Line = "328", $t));
                    t.Fixture.GetLogicalDrivesEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetLogicalDrivesEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SetEnvironmentVariableTwoParametersWorks:static start.*/
                SetEnvironmentVariableTwoParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetEnvironmentVariableTwoParametersWorks()", $t.Line = "336", $t));
                    t.Fixture.SetEnvironmentVariableTwoParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SetEnvironmentVariableTwoParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SetEnvironmentVariableThreeParametersWorks:static start.*/
                SetEnvironmentVariableThreeParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetEnvironmentVariableThreeParametersWorks()", $t.Line = "364", $t));
                    t.Fixture.SetEnvironmentVariableThreeParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.SetEnvironmentVariableThreeParametersWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.EnvironmentTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/EnvironmentTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+EnvironmentTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.TypePropertiesAreCorrect_SPI_1546:static start.*/
                TypePropertiesAreCorrect_SPI_1546: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1546()", $t.Line = "28", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1546();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.TypePropertiesAreCorrect_SPI_1546:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "35", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerCanGetHashCodeOfNumber:static start.*/
                DefaultComparerCanGetHashCodeOfNumber: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanGetHashCodeOfNumber()", $t.Line = "46", $t));
                    t.Fixture.DefaultComparerCanGetHashCodeOfNumber();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerCanGetHashCodeOfNumber:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined:static start.*/
                DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined()", $t.Line = "52", $t));
                    t.Fixture.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerCanDetermineEquality:static start.*/
                DefaultComparerCanDetermineEquality: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerCanDetermineEquality()", $t.Line = "59", $t));
                    t.Fixture.DefaultComparerCanDetermineEquality();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerCanDetermineEquality:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerInvokesOverriddenGetHashCode:static start.*/
                DefaultComparerInvokesOverriddenGetHashCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerInvokesOverriddenGetHashCode()", $t.Line = "72", $t));
                    t.Fixture.DefaultComparerInvokesOverriddenGetHashCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerInvokesOverriddenGetHashCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerInvokesOverriddenEquals:static start.*/
                DefaultComparerInvokesOverriddenEquals: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultComparerInvokesOverriddenEquals()", $t.Line = "81", $t));
                    t.Fixture.DefaultComparerInvokesOverriddenEquals();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.DefaultComparerInvokesOverriddenEquals:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.EqualityComparerTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/EqualityComparerTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+EqualityComparerTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "38", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.DefaultConstructorWorks_SPI_1669:static start.*/
                DefaultConstructorWorks_SPI_1669: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks_SPI_1669()", $t.Line = "51", $t));
                    t.Fixture.DefaultConstructorWorks_SPI_1669();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.DefaultConstructorWorks_SPI_1669:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "62", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "72", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.MessagePropertyCanBeOverridden:static start.*/
                MessagePropertyCanBeOverridden: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessagePropertyCanBeOverridden()", $t.Line = "83", $t));
                    t.Fixture.MessagePropertyCanBeOverridden();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.MessagePropertyCanBeOverridden:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.InnerExceptionPropertyCanBeOverridden:static start.*/
                InnerExceptionPropertyCanBeOverridden: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InnerExceptionPropertyCanBeOverridden()", $t.Line = "90", $t));
                    t.Fixture.InnerExceptionPropertyCanBeOverridden();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.InnerExceptionPropertyCanBeOverridden:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.ExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/ExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ExpressionProtectedConstructorWorks:static start.*/
                ExpressionProtectedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpressionProtectedConstructorWorks()", $t.Line = "336", $t));
                    t.Fixture.ExpressionProtectedConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ExpressionProtectedConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SimpleExpressionTreeWorks:static start.*/
                SimpleExpressionTreeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleExpressionTreeWorks()", $t.Line = "344", $t));
                    t.Fixture.SimpleExpressionTreeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SimpleExpressionTreeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LambdaWorks:static start.*/
                LambdaWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LambdaWorks()", $t.Line = "356", $t));
                    t.Fixture.LambdaWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LambdaWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ParameterAndVariableWork:static start.*/
                ParameterAndVariableWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterAndVariableWork()", $t.Line = "392", $t));
                    t.Fixture.ParameterAndVariableWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ParameterAndVariableWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConstantWorks:static start.*/
                ConstantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantWorks()", $t.Line = "419", $t));
                    t.Fixture.ConstantWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConstantWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BinaryExpressionsWork:static start.*/
                BinaryExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryExpressionsWork()", $t.Line = "442", $t));
                    t.Fixture.BinaryExpressionsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BinaryExpressionsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.UnaryExpressionsWork:static start.*/
                UnaryExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryExpressionsWork()", $t.Line = "717", $t));
                    t.Fixture.UnaryExpressionsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.UnaryExpressionsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayLengthWorks:static start.*/
                ArrayLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayLengthWorks()", $t.Line = "834", $t));
                    t.Fixture.ArrayLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConversionsWork:static start.*/
                ConversionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConversionsWork()", $t.Line = "853", $t));
                    t.Fixture.ConversionsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConversionsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayIndexWorks:static start.*/
                ArrayIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayIndexWorks()", $t.Line = "908", $t));
                    t.Fixture.ArrayIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MultiDimensionalArrayIndexWorks:static start.*/
                MultiDimensionalArrayIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultiDimensionalArrayIndexWorks()", $t.Line = "929", $t));
                    t.Fixture.MultiDimensionalArrayIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MultiDimensionalArrayIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConditionWorks:static start.*/
                ConditionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionWorks()", $t.Line = "963", $t));
                    t.Fixture.ConditionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ConditionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.CallWorks:static start.*/
                CallWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallWorks()", $t.Line = "986", $t));
                    t.Fixture.CallWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.CallWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MethodGroupConversionWorks:static start.*/
                MethodGroupConversionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionWorks()", $t.Line = "1037", $t));
                    t.Fixture.MethodGroupConversionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MethodGroupConversionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.InvokeWorks:static start.*/
                InvokeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorks()", $t.Line = "1060", $t));
                    t.Fixture.InvokeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.InvokeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayCreationWorks:static start.*/
                ArrayCreationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCreationWorks()", $t.Line = "1086", $t));
                    t.Fixture.ArrayCreationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ArrayCreationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.PropertiesAndFieldsWork:static start.*/
                PropertiesAndFieldsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesAndFieldsWork()", $t.Line = "1148", $t));
                    t.Fixture.PropertiesAndFieldsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.PropertiesAndFieldsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IndexersWork:static start.*/
                IndexersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexersWork()", $t.Line = "1203", $t));
                    t.Fixture.IndexersWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IndexersWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IndexExpressionsWork:static start.*/
                IndexExpressionsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexExpressionsWork()", $t.Line = "1219", $t));
                    t.Fixture.IndexExpressionsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IndexExpressionsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ObjectConstructionWorks:static start.*/
                ObjectConstructionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectConstructionWorks()", $t.Line = "1255", $t));
                    t.Fixture.ObjectConstructionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ObjectConstructionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.AnonymousTypeConstructionWorks:static start.*/
                AnonymousTypeConstructionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AnonymousTypeConstructionWorks()", $t.Line = "1298", $t));
                    t.Fixture.AnonymousTypeConstructionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.AnonymousTypeConstructionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TransparentIdentifiersWork:static start.*/
                TransparentIdentifiersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TransparentIdentifiersWork()", $t.Line = "1353", $t));
                    t.Fixture.TransparentIdentifiersWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TransparentIdentifiersWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.NewExpressionWithMembersWork:static start.*/
                NewExpressionWithMembersWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewExpressionWithMembersWork()", $t.Line = "1396", $t));
                    t.Fixture.NewExpressionWithMembersWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.NewExpressionWithMembersWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BindWorks:static start.*/
                BindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BindWorks()", $t.Line = "1426", $t));
                    t.Fixture.BindWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BindWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ElementInitWorks:static start.*/
                ElementInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ElementInitWorks()", $t.Line = "1471", $t));
                    t.Fixture.ElementInitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ElementInitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ListBindWorks:static start.*/
                ListBindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ListBindWorks()", $t.Line = "1503", $t));
                    t.Fixture.ListBindWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ListBindWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MemberBindWorks:static start.*/
                MemberBindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberBindWorks()", $t.Line = "1568", $t));
                    t.Fixture.MemberBindWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MemberBindWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MemberInitWorks:static start.*/
                MemberInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberInitWorks()", $t.Line = "1630", $t));
                    t.Fixture.MemberInitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.MemberInitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ListInitWorks:static start.*/
                ListInitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ListInitWorks()", $t.Line = "1666", $t));
                    t.Fixture.ListInitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ListInitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TypeIsAndTypeEqualWork:static start.*/
                TypeIsAndTypeEqualWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsAndTypeEqualWork()", $t.Line = "1720", $t));
                    t.Fixture.TypeIsAndTypeEqualWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TypeIsAndTypeEqualWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.QuoteWorks:static start.*/
                QuoteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "QuoteWorks()", $t.Line = "1748", $t));
                    t.Fixture.QuoteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.QuoteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LocalVariableReferenceWorks:static start.*/
                LocalVariableReferenceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocalVariableReferenceWorks()", $t.Line = "1773", $t));
                    t.Fixture.LocalVariableReferenceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LocalVariableReferenceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ThrowAndRethrowWork:static start.*/
                ThrowAndRethrowWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrowAndRethrowWork()", $t.Line = "1825", $t));
                    t.Fixture.ThrowAndRethrowWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.ThrowAndRethrowWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.DefaultAndEmptyWork:static start.*/
                DefaultAndEmptyWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultAndEmptyWork()", $t.Line = "1857", $t));
                    t.Fixture.DefaultAndEmptyWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.DefaultAndEmptyWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BlockWorks:static start.*/
                BlockWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BlockWorks()", $t.Line = "1874", $t));
                    t.Fixture.BlockWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.BlockWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IfThenWorks:static start.*/
                IfThenWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfThenWorks()", $t.Line = "1933", $t));
                    t.Fixture.IfThenWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.IfThenWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LabelTargetWorks:static start.*/
                LabelTargetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LabelTargetWorks()", $t.Line = "1961", $t));
                    t.Fixture.LabelTargetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LabelTargetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.GotoWorks:static start.*/
                GotoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GotoWorks()", $t.Line = "1979", $t));
                    t.Fixture.GotoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.GotoWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LabelExpressionWorks:static start.*/
                LabelExpressionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LabelExpressionWorks()", $t.Line = "2031", $t));
                    t.Fixture.LabelExpressionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LabelExpressionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LoopWorks:static start.*/
                LoopWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LoopWorks()", $t.Line = "2062", $t));
                    t.Fixture.LoopWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.LoopWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SwitchCaseWorks:static start.*/
                SwitchCaseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SwitchCaseWorks()", $t.Line = "2105", $t));
                    t.Fixture.SwitchCaseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SwitchCaseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SwitchWorks:static start.*/
                SwitchWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SwitchWorks()", $t.Line = "2126", $t));
                    t.Fixture.SwitchWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.SwitchWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.CatchBlockWorks:static start.*/
                CatchBlockWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CatchBlockWorks()", $t.Line = "2171", $t));
                    t.Fixture.CatchBlockWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.CatchBlockWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TryWorks:static start.*/
                TryWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryWorks()", $t.Line = "2201", $t));
                    t.Fixture.TryWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.TryWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.DynamicWorks:static start.*/
                DynamicWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DynamicWorks()", $t.Line = "2247", $t));
                    t.Fixture.DynamicWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.DynamicWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.Expressions.ExpressionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/Expressions/ExpressionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ExpressionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetFloat32ArrayWorks:static start.*/
                SetFloat32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetFloat32ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetFloat32ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetFloat32ArrayWithOffsetWorks:static start.*/
                SetFloat32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat32ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetFloat32ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetFloat32ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Float32ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Float32ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Float32ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetFloat64ArrayWorks:static start.*/
                SetFloat64ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetFloat64ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetFloat64ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetFloat64ArrayWithOffsetWorks:static start.*/
                SetFloat64ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetFloat64ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetFloat64ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetFloat64ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Float64ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Float64ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Float64ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FlushTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.FlushTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.AutoFlushSetTrue:static start.*/
                AutoFlushSetTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.FlushTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FlushTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AutoFlushSetTrue()", $t.Line = "23", $t));
                    t.Fixture.AutoFlushSetTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.AutoFlushSetTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.AutoFlushSetFalse:static start.*/
                AutoFlushSetFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.FlushTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FlushTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AutoFlushSetFalse()", $t.Line = "32", $t));
                    t.Fixture.AutoFlushSetFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.AutoFlushSetFalse:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.FlushTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.FlushTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+FlushTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.FormatExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/FormatExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+FormatExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "29", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ArgumentCountWorks:static start.*/
                ArgumentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentCountWorks()", $t.Line = "43", $t));
                    t.Fixture.ArgumentCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ArgumentCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "52", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetArgumentWorks:static start.*/
                GetArgumentWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentWorks()", $t.Line = "59", $t));
                    t.Fixture.GetArgumentWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetArgumentWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetArgumentsWorks:static start.*/
                GetArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetArgumentsWorks()", $t.Line = "67", $t));
                    t.Fixture.GetArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ArrayReturnedByGetArgumentsCanBeModified:static start.*/
                ArrayReturnedByGetArgumentsCanBeModified: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayReturnedByGetArgumentsCanBeModified()", $t.Line = "76", $t));
                    t.Fixture.ArrayReturnedByGetArgumentsCanBeModified();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ArrayReturnedByGetArgumentsCanBeModified:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "88", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.InvariantWorks:static start.*/
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "112", $t));
                    t.Fixture.InvariantWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.InvariantWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.FormattableStringTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/FormattableStringTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+FormattableStringTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsBodyInOneParameter:static start.*/
                TestConstructorArgumentsBodyInOneParameter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestConstructorArgumentsBodyInOneParameter()", $t.Line = "13", $t));
                    t.Fixture.TestConstructorArgumentsBodyInOneParameter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsBodyInOneParameter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsBodyInTwoParameters:static start.*/
                TestConstructorArgumentsBodyInTwoParameters: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestConstructorArgumentsBodyInTwoParameters()", $t.Line = "21", $t));
                    t.Fixture.TestConstructorArgumentsBodyInTwoParameters();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsBodyInTwoParameters:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsInArray:static start.*/
                TestConstructorArgumentsInArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestConstructorArgumentsInArray()", $t.Line = "29", $t));
                    t.Fixture.TestConstructorArgumentsInArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.TestConstructorArgumentsInArray:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.FunctionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/FunctionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+FunctionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TestPerformance:static start.*/
                TestPerformance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestPerformance()", $t.Line = "27", $t));
                    t.Fixture.TestPerformance();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TestPerformance:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TestOrder:static start.*/
                TestOrder: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestOrder()", $t.Line = "45", $t));
                    t.Fixture.TestOrder();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TestOrder:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "65", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DefaultConstructorWorks_SPI_1549:static start.*/
                DefaultConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks_SPI_1549()", $t.Line = "80", $t));
                    t.Fixture.DefaultConstructorWorks_SPI_1549();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DefaultConstructorWorks_SPI_1549:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CapacityConstructorWorks_SPI_1549:static start.*/
                CapacityConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CapacityConstructorWorks_SPI_1549()", $t.Line = "93", $t));
                    t.Fixture.CapacityConstructorWorks_SPI_1549();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CapacityConstructorWorks_SPI_1549:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CapacityAndEqualityComparerWorks:static start.*/
                CapacityAndEqualityComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CapacityAndEqualityComparerWorks()", $t.Line = "105", $t));
                    t.Fixture.CapacityAndEqualityComparerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CapacityAndEqualityComparerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CopyConstructorWorks_SPI_1549:static start.*/
                CopyConstructorWorks_SPI_1549: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks_SPI_1549()", $t.Line = "150", $t));
                    t.Fixture.CopyConstructorWorks_SPI_1549();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CopyConstructorWorks_SPI_1549:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.EqualityComparerOnlyConstructorWorks:static start.*/
                EqualityComparerOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityComparerOnlyConstructorWorks()", $t.Line = "168", $t));
                    t.Fixture.EqualityComparerOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.EqualityComparerOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ConstructorWithBothDictionaryAndEqualityComparerWorks:static start.*/
                ConstructorWithBothDictionaryAndEqualityComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithBothDictionaryAndEqualityComparerWorks()", $t.Line = "177", $t));
                    t.Fixture.ConstructorWithBothDictionaryAndEqualityComparerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ConstructorWithBothDictionaryAndEqualityComparerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "194", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.KeysWorks:static start.*/
                KeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KeysWorks()", $t.Line = "205", $t));
                    t.Fixture.KeysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.KeysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ValuesWorks:static start.*/
                ValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValuesWorks()", $t.Line = "232", $t));
                    t.Fixture.ValuesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ValuesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerGetterWorksForExistingItems:static start.*/
                IndexerGetterWorksForExistingItems: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerGetterWorksForExistingItems()", $t.Line = "256", $t));
                    t.Fixture.IndexerGetterWorksForExistingItems();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerGetterWorksForExistingItems:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerSetterWorks:static start.*/
                IndexerSetterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerSetterWorks()", $t.Line = "263", $t));
                    t.Fixture.IndexerSetterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerSetterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerGetterThrowsForNonExistingItems:static start.*/
                IndexerGetterThrowsForNonExistingItems: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexerGetterThrowsForNonExistingItems()", $t.Line = "275", $t));
                    t.Fixture.IndexerGetterThrowsForNonExistingItems();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.IndexerGetterThrowsForNonExistingItems:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "289", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.AddThrowsIfItemAlreadyExists:static start.*/
                AddThrowsIfItemAlreadyExists: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddThrowsIfItemAlreadyExists()", $t.Line = "300", $t));
                    t.Fixture.AddThrowsIfItemAlreadyExists();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.AddThrowsIfItemAlreadyExists:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "314", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ContainsKeyWorks:static start.*/
                ContainsKeyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsKeyWorks()", $t.Line = "322", $t));
                    t.Fixture.ContainsKeyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.ContainsKeyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.EnumeratingWorks:static start.*/
                EnumeratingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingWorks()", $t.Line = "330", $t));
                    t.Fixture.EnumeratingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.EnumeratingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.RemoveWorks:static start.*/
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "354", $t));
                    t.Fixture.RemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.RemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TryGetValueWithIntKeysWorks:static start.*/
                TryGetValueWithIntKeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWithIntKeysWorks()", $t.Line = "364", $t));
                    t.Fixture.TryGetValueWithIntKeysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TryGetValueWithIntKeysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TryGetValueWithObjectKeysWorks:static start.*/
                TryGetValueWithObjectKeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWithObjectKeysWorks()", $t.Line = "376", $t));
                    t.Fixture.TryGetValueWithObjectKeysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.TryGetValueWithObjectKeysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CanUseCustomComparer:static start.*/
                CanUseCustomComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseCustomComparer()", $t.Line = "388", $t));
                    t.Fixture.CanUseCustomComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.CanUseCustomComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIEnumerableWorks:static start.*/
                DictionaryAsIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DictionaryAsIEnumerableWorks()", $t.Line = "397", $t));
                    t.Fixture.DictionaryAsIEnumerableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIEnumerableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsICollectionWorks:static start.*/
                DictionaryAsICollectionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DictionaryAsICollectionWorks()", $t.Line = "422", $t));
                    t.Fixture.DictionaryAsICollectionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsICollectionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIDictionaryWorks:static start.*/
                DictionaryAsIDictionaryWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DictionaryAsIDictionaryWorks()", $t.Line = "485", $t));
                    t.Fixture.DictionaryAsIDictionaryWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIDictionaryWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIReadOnlyDictionaryWorks:static start.*/
                DictionaryAsIReadOnlyDictionaryWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DictionaryAsIReadOnlyDictionaryWorks()", $t.Line = "620", $t));
                    t.Fixture.DictionaryAsIReadOnlyDictionaryWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIReadOnlyDictionaryWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIReadOnlyCollectionWorks:static start.*/
                DictionaryAsIReadOnlyCollectionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DictionaryAsIReadOnlyCollectionWorks()", $t.Line = "685", $t));
                    t.Fixture.DictionaryAsIReadOnlyCollectionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.DictionaryAsIReadOnlyCollectionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.GenericDictionaryTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/GenericDictionaryTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+GenericDictionaryTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWithoutBindingFlagsWorks:static start.*/
                GetMembersWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWithoutBindingFlagsWorks()", $t.Line = "917", $t));
                    t.Fixture.GetMembersWithoutBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWithoutBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWorksForInterface:static start.*/
                GetMembersWorksForInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWorksForInterface()", $t.Line = "927", $t));
                    t.Fixture.GetMembersWorksForInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWorksForInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWithBindingFlagsWorks:static start.*/
                GetMembersWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersWithBindingFlagsWorks()", $t.Line = "935", $t));
                    t.Fixture.GetMembersWithBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMembersWithBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMemberWithNameWorks:static start.*/
                GetMemberWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMemberWithNameWorks()", $t.Line = "973", $t));
                    t.Fixture.GetMemberWithNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMemberWithNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMemberWithNameAndBindingFlagsWorks:static start.*/
                GetMemberWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMemberWithNameAndBindingFlagsWorks()", $t.Line = "983", $t));
                    t.Fixture.GetMemberWithNameAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMemberWithNameAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetConstructorsWorks:static start.*/
                GetConstructorsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetConstructorsWorks()", $t.Line = "998", $t));
                    t.Fixture.GetConstructorsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetConstructorsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetConstructorWorks:static start.*/
                GetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetConstructorWorks()", $t.Line = "1004", $t));
                    t.Fixture.GetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodsWithoutBindingFlagsWorks:static start.*/
                GetMethodsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodsWithoutBindingFlagsWorks()", $t.Line = "1012", $t));
                    t.Fixture.GetMethodsWithoutBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodsWithoutBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodsWithBindingFlagsWorks:static start.*/
                GetMethodsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodsWithBindingFlagsWorks()", $t.Line = "1022", $t));
                    t.Fixture.GetMethodsWithBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodsWithBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameWorks:static start.*/
                GetMethodWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameWorks()", $t.Line = "1060", $t));
                    t.Fixture.GetMethodWithNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndBindingFlagsWorks:static start.*/
                GetMethodWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndBindingFlagsWorks()", $t.Line = "1076", $t));
                    t.Fixture.GetMethodWithNameAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndArgumentTypesWorks:static start.*/
                GetMethodWithNameAndArgumentTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndArgumentTypesWorks()", $t.Line = "1104", $t));
                    t.Fixture.GetMethodWithNameAndArgumentTypesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndArgumentTypesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks:static start.*/
                GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks()", $t.Line = "1119", $t));
                    t.Fixture.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertiesWithoutBindingFlagsWorks:static start.*/
                GetPropertiesWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertiesWithoutBindingFlagsWorks()", $t.Line = "1139", $t));
                    t.Fixture.GetPropertiesWithoutBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertiesWithoutBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertiesWithBindingFlagsWorks:static start.*/
                GetPropertiesWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertiesWithBindingFlagsWorks()", $t.Line = "1149", $t));
                    t.Fixture.GetPropertiesWithBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertiesWithBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameWorks:static start.*/
                GetPropertyWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameWorks()", $t.Line = "1187", $t));
                    t.Fixture.GetPropertyWithNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndBindingFlagsWorks:static start.*/
                GetPropertyWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndBindingFlagsWorks()", $t.Line = "1199", $t));
                    t.Fixture.GetPropertyWithNameAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndArgumentTypesWorks:static start.*/
                GetPropertyWithNameAndArgumentTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndArgumentTypesWorks()", $t.Line = "1219", $t));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndArgumentTypesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks:static start.*/
                GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks()", $t.Line = "1230", $t));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldsWithoutBindingFlagsWorks:static start.*/
                GetFieldsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldsWithoutBindingFlagsWorks()", $t.Line = "1246", $t));
                    t.Fixture.GetFieldsWithoutBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldsWithoutBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldsWithBindingFlagsWorks:static start.*/
                GetFieldsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldsWithBindingFlagsWorks()", $t.Line = "1256", $t));
                    t.Fixture.GetFieldsWithBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldsWithBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldWithNameWorks:static start.*/
                GetFieldWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldWithNameWorks()", $t.Line = "1294", $t));
                    t.Fixture.GetFieldWithNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldWithNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldWithNameAndBindingFlagsWorks:static start.*/
                GetFieldWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFieldWithNameAndBindingFlagsWorks()", $t.Line = "1304", $t));
                    t.Fixture.GetFieldWithNameAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetFieldWithNameAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventsWithoutBindingFlagsWorks:static start.*/
                GetEventsWithoutBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventsWithoutBindingFlagsWorks()", $t.Line = "1321", $t));
                    t.Fixture.GetEventsWithoutBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventsWithoutBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventsWithBindingFlagsWorks:static start.*/
                GetEventsWithBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventsWithBindingFlagsWorks()", $t.Line = "1331", $t));
                    t.Fixture.GetEventsWithBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventsWithBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventWithNameWorks:static start.*/
                GetEventWithNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventWithNameWorks()", $t.Line = "1369", $t));
                    t.Fixture.GetEventWithNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventWithNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventWithNameAndBindingFlagsWorks:static start.*/
                GetEventWithNameAndBindingFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEventWithNameAndBindingFlagsWorks()", $t.Line = "1379", $t));
                    t.Fixture.GetEventWithNameAndBindingFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetEventWithNameAndBindingFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.IsOperatorForMemberInfoWorks:static start.*/
                IsOperatorForMemberInfoWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsOperatorForMemberInfoWorks()", $t.Line = "1396", $t));
                    t.Fixture.IsOperatorForMemberInfoWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.IsOperatorForMemberInfoWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Reflection.GetMembersTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/GetMembersTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+GetMembersTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.DefaultValueWorks:static start.*/
                DefaultValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks()", $t.Line = "26", $t));
                    t.Fixture.DefaultValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.DefaultValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.CreateInstanceWorks:static start.*/
                CreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateInstanceWorks()", $t.Line = "34", $t));
                    t.Fixture.CreateInstanceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.CreateInstanceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "42", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EmptyWorks:static start.*/
                EmptyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyWorks()", $t.Line = "50", $t));
                    t.Fixture.EmptyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EmptyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToStringWithoutArgumentsWorks:static start.*/
                ToStringWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutArgumentsWorks()", $t.Line = "56", $t));
                    t.Fixture.ToStringWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToStringWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ByteArrayConstructorWorks:static start.*/
                ByteArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteArrayConstructorWorks()", $t.Line = "63", $t));
                    t.Fixture.ByteArrayConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ByteArrayConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.Int32Int16Int16ByteArrayConstructorWorks:static start.*/
                Int32Int16Int16ByteArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Int32Int16Int16ByteArrayConstructorWorks()", $t.Line = "72", $t));
                    t.Fixture.Int32Int16Int16ByteArrayConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.Int32Int16Int16ByteArrayConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.Int32Int16Int16BytesConstructorWorks:static start.*/
                Int32Int16Int16BytesConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Int32Int16Int16BytesConstructorWorks()", $t.Line = "80", $t));
                    t.Fixture.Int32Int16Int16BytesConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.Int32Int16Int16BytesConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.UInt32UInt16UInt16BytesConstructorWorks:static start.*/
                UInt32UInt16UInt16BytesConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UInt32UInt16UInt16BytesConstructorWorks()", $t.Line = "88", $t));
                    t.Fixture.UInt32UInt16UInt16BytesConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.UInt32UInt16UInt16BytesConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.StringConstructorWorks:static start.*/
                StringConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringConstructorWorks()", $t.Line = "96", $t));
                    t.Fixture.StringConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.StringConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "114", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ParseExactWorks:static start.*/
                ParseExactWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactWorks()", $t.Line = "132", $t));
                    t.Fixture.ParseExactWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ParseExactWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TryParseWorks:static start.*/
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "153", $t));
                    t.Fixture.TryParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TryParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TryParseExactWorks:static start.*/
                TryParseExactWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseExactWorks()", $t.Line = "174", $t));
                    t.Fixture.TryParseExactWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.TryParseExactWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "204", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "212", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualsObjectWorks:static start.*/
                EqualsObjectWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsObjectWorks()", $t.Line = "220", $t));
                    t.Fixture.EqualsObjectWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualsObjectWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualsGuidWorks:static start.*/
                EqualsGuidWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsGuidWorks()", $t.Line = "229", $t));
                    t.Fixture.EqualsGuidWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualsGuidWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "237", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "245", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualityOperatorWorks:static start.*/
                EqualityOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualityOperatorWorks()", $t.Line = "252", $t));
                    t.Fixture.EqualityOperatorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.EqualityOperatorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.InequalityOperatorWorks:static start.*/
                InequalityOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InequalityOperatorWorks()", $t.Line = "259", $t));
                    t.Fixture.InequalityOperatorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.InequalityOperatorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "266", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.NewGuidWorks:static start.*/
                NewGuidWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewGuidWorks()", $t.Line = "278", $t));
                    t.Fixture.NewGuidWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.NewGuidWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToByteArrayWorks:static start.*/
                ToByteArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToByteArrayWorks()", $t.Line = "294", $t));
                    t.Fixture.ToByteArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.ToByteArrayWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.GuidTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/GuidTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+GuidTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "97", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayImplementsICollection:static start.*/
                ArrayImplementsICollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsICollection()", $t.Line = "108", $t));
                    t.Fixture.ArrayImplementsICollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayImplementsICollection:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.CustomClassThatShouldImplementICollectionDoesSo:static start.*/
                CustomClassThatShouldImplementICollectionDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementICollectionDoesSo()", $t.Line = "114", $t));
                    t.Fixture.CustomClassThatShouldImplementICollectionDoesSo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.CustomClassThatShouldImplementICollectionDoesSo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionCountWorks:static start.*/
                ArrayCastToICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToICollectionCountWorks()", $t.Line = "120", $t));
                    t.Fixture.ArrayCastToICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCountWorks:static start.*/
                ClassImplementingICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCountWorks()", $t.Line = "126", $t));
                    t.Fixture.ClassImplementingICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionCountWorks:static start.*/
                ClassImplementingICollectionCastToICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionCountWorks()", $t.Line = "132", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionIsReadOnlyWorks:static start.*/
                ArrayCastToICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToICollectionIsReadOnlyWorks()", $t.Line = "138", $t));
                    t.Fixture.ArrayCastToICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionIsReadOnlyWorks:static start.*/
                ClassImplementingICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionIsReadOnlyWorks()", $t.Line = "144", $t));
                    t.Fixture.ClassImplementingICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks:static start.*/
                ClassImplementingICollectionCastToICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionIsReadOnlyWorks()", $t.Line = "150", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionAddWorks:static start.*/
                ClassImplementingICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionAddWorks()", $t.Line = "156", $t));
                    t.Fixture.ClassImplementingICollectionAddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionAddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionAddWorks:static start.*/
                ClassImplementingICollectionCastToICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionAddWorks()", $t.Line = "165", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionAddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionAddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionClearWorks:static start.*/
                ClassImplementingICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionClearWorks()", $t.Line = "174", $t));
                    t.Fixture.ClassImplementingICollectionClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionClearWorks:static start.*/
                ClassImplementingICollectionCastToICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionClearWorks()", $t.Line = "182", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionContainsWorks:static start.*/
                ArrayCastToICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToICollectionContainsWorks()", $t.Line = "190", $t));
                    t.Fixture.ArrayCastToICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ArrayCastToICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionContainsWorks:static start.*/
                ClassImplementingICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionContainsWorks()", $t.Line = "198", $t));
                    t.Fixture.ClassImplementingICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionContainsWorks:static start.*/
                ClassImplementingICollectionCastToICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionContainsWorks()", $t.Line = "206", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionRemoveWorks:static start.*/
                ClassImplementingICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionRemoveWorks()", $t.Line = "214", $t));
                    t.Fixture.ClassImplementingICollectionRemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionRemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionRemoveWorks:static start.*/
                ClassImplementingICollectionCastToICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionRemoveWorks()", $t.Line = "224", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionRemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionRemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCopyToWorks:static start.*/
                ClassImplementingICollectionCopyToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCopyToWorks()", $t.Line = "234", $t));
                    t.Fixture.ClassImplementingICollectionCopyToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCopyToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionCopyToWorks:static start.*/
                ClassImplementingICollectionCastToICollectionCopyToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToICollectionCopyToWorks()", $t.Line = "264", $t));
                    t.Fixture.ClassImplementingICollectionCastToICollectionCopyToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.ClassImplementingICollectionCastToICollectionCopyToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.ICollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/ICollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ICollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod:static start.*/
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()", $t.Line = "22", $t));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IComparableTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IComparableTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IComparableTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "144", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ClassImplementsInterfaces_SPI_1626:static start.*/
                ClassImplementsInterfaces_SPI_1626: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementsInterfaces_SPI_1626()", $t.Line = "157", $t));
                    t.Fixture.ClassImplementsInterfaces_SPI_1626();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ClassImplementsInterfaces_SPI_1626:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "165", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.KeysWorks:static start.*/
                KeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KeysWorks()", $t.Line = "178", $t));
                    t.Fixture.KeysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.KeysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.GetItemWorks:static start.*/
                GetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetItemWorks()", $t.Line = "196", $t));
                    t.Fixture.GetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.GetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ValuesWorks:static start.*/
                ValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValuesWorks()", $t.Line = "235", $t));
                    t.Fixture.ValuesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ValuesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ContainsKeyWorks:static start.*/
                ContainsKeyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsKeyWorks()", $t.Line = "253", $t));
                    t.Fixture.ContainsKeyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ContainsKeyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.TryGetValueWorks:static start.*/
                TryGetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWorks()", $t.Line = "271", $t));
                    t.Fixture.TryGetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.TryGetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "302", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "330", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.RemoveWorks:static start.*/
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "340", $t));
                    t.Fixture.RemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.RemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.SetItemWorks:static start.*/
                SetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetItemWorks()", $t.Line = "357", $t));
                    t.Fixture.SetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.SetItemWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IDictionaryTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IDictionaryTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IDictionaryTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayImplementsIEnumerable:static start.*/
                ArrayImplementsIEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIEnumerable()", $t.Line = "26", $t));
                    t.Fixture.ArrayImplementsIEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayImplementsIEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.CustomClassThatShouldImplementIEnumerableDoesSo:static start.*/
                CustomClassThatShouldImplementIEnumerableDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIEnumerableDoesSo()", $t.Line = "32", $t));
                    t.Fixture.CustomClassThatShouldImplementIEnumerableDoesSo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.CustomClassThatShouldImplementIEnumerableDoesSo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayGetEnumeratorMethodWorks:static start.*/
                ArrayGetEnumeratorMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayGetEnumeratorMethodWorks()", $t.Line = "38", $t));
                    t.Fixture.ArrayGetEnumeratorMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayGetEnumeratorMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayCastToIEnumerableCanBeEnumerated:static start.*/
                ArrayCastToIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIEnumerableCanBeEnumerated()", $t.Line = "51", $t));
                    t.Fixture.ArrayCastToIEnumerableCanBeEnumerated();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ArrayCastToIEnumerableCanBeEnumerated:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ClassImplementingIEnumerableCanBeEnumerated:static start.*/
                ClassImplementingIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIEnumerableCanBeEnumerated()", $t.Line = "65", $t));
                    t.Fixture.ClassImplementingIEnumerableCanBeEnumerated();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ClassImplementingIEnumerableCanBeEnumerated:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated:static start.*/
                ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated()", $t.Line = "79", $t));
                    t.Fixture.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IEnumerableTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IEnumerableTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IEnumerableTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod:static start.*/
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()", $t.Line = "22", $t));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IEquatableTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IEquatableTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IEquatableTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "124", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayImplementsIList:static start.*/
                ArrayImplementsIList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIList()", $t.Line = "137", $t));
                    t.Fixture.ArrayImplementsIList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayImplementsIList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.CustomClassThatShouldImplementIListDoesSo:static start.*/
                CustomClassThatShouldImplementIListDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIListDoesSo()", $t.Line = "143", $t));
                    t.Fixture.CustomClassThatShouldImplementIListDoesSo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.CustomClassThatShouldImplementIListDoesSo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListGetItemWorks:static start.*/
                ArrayCastToIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListGetItemWorks()", $t.Line = "149", $t));
                    t.Fixture.ArrayCastToIListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListGetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListSetItemWorks:static start.*/
                ArrayCastToIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListSetItemWorks()", $t.Line = "156", $t));
                    t.Fixture.ArrayCastToIListSetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListSetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListGetItemWorks:static start.*/
                ClassImplementingIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListGetItemWorks()", $t.Line = "164", $t));
                    t.Fixture.ClassImplementingIListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListGetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListGetItemWorks:static start.*/
                ClassImplementingIListCastToIListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListGetItemWorks()", $t.Line = "171", $t));
                    t.Fixture.ClassImplementingIListCastToIListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListGetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListSetItemWorks:static start.*/
                ClassImplementingIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListSetItemWorks()", $t.Line = "178", $t));
                    t.Fixture.ClassImplementingIListSetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListSetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListSetItemWorks:static start.*/
                ClassImplementingIListCastToIListSetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListSetItemWorks()", $t.Line = "186", $t));
                    t.Fixture.ClassImplementingIListCastToIListSetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListSetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListIsReadOnlyWorks:static start.*/
                ArrayCastToIListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListIsReadOnlyWorks()", $t.Line = "194", $t));
                    t.Fixture.ArrayCastToIListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListIsReadOnlyWorks:static start.*/
                ClassImplementingIListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListIsReadOnlyWorks()", $t.Line = "201", $t));
                    t.Fixture.ClassImplementingIListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListIsReadOnlyWorks:static start.*/
                ClassImplementingIListCastToIListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListIsReadOnlyWorks()", $t.Line = "208", $t));
                    t.Fixture.ClassImplementingIListCastToIListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListIndexOfWorks:static start.*/
                ArrayCastToIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIListIndexOfWorks()", $t.Line = "215", $t));
                    t.Fixture.ArrayCastToIListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ArrayCastToIListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListIndexOfWorks:static start.*/
                ClassImplementingIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListIndexOfWorks()", $t.Line = "223", $t));
                    t.Fixture.ClassImplementingIListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListIndexOfWorks:static start.*/
                ClassImplementingIListCastToIListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListIndexOfWorks()", $t.Line = "231", $t));
                    t.Fixture.ClassImplementingIListCastToIListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListInsertWorks:static start.*/
                ClassImplementingIListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListInsertWorks()", $t.Line = "239", $t));
                    t.Fixture.ClassImplementingIListInsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListInsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListInsertWorks:static start.*/
                ClassImplementingIListCastToIListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListInsertWorks()", $t.Line = "247", $t));
                    t.Fixture.ClassImplementingIListCastToIListInsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListInsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListRemoveAtWorks:static start.*/
                ClassImplementingIListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListRemoveAtWorks()", $t.Line = "255", $t));
                    t.Fixture.ClassImplementingIListRemoveAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListRemoveAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListRemoveAtWorks:static start.*/
                ClassImplementingIListCastToIListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListRemoveAtWorks()", $t.Line = "263", $t));
                    t.Fixture.ClassImplementingIListCastToIListRemoveAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListRemoveAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCopyToWorks:static start.*/
                ClassImplementingIListCopyToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCopyToWorks()", $t.Line = "271", $t));
                    t.Fixture.ClassImplementingIListCopyToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCopyToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListCopyToWorks:static start.*/
                ClassImplementingIListCastToIListCopyToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIListCastToIListCopyToWorks()", $t.Line = "301", $t));
                    t.Fixture.ClassImplementingIListCastToIListCopyToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.ClassImplementingIListCastToIListCopyToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IListTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IListTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IListTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/IndexOutOfRangeExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IndexOutOfRangeExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "290", $t));
                    t.Fixture.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ObjectLiteralTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+InitializationModeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetInt16ArrayWorks:static start.*/
                SetInt16ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetInt16ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetInt16ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetInt16ArrayWithOffsetWorks:static start.*/
                SetInt16ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt16ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetInt16ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetInt16ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Int16ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Int16ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "36", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "98", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "104", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "110", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "117", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "123", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "129", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "135", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.TryParseWorks_SPI_1592:static start.*/
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "148", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.TryParseWorks_SPI_1592:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.Int16Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/Int16Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int16Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetInt32ArrayWorks:static start.*/
                SetInt32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetInt32ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetInt32ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetInt32ArrayWithOffsetWorks:static start.*/
                SetInt32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt32ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetInt32ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetInt32ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Int32ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Int32ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "38", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypeIsWorksForInt32:static start.*/
                TypeIsWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsWorksForInt32()", $t.Line = "89", $t));
                    t.Fixture.TypeIsWorksForInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypeIsWorksForInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypeAsWorksForInt32:static start.*/
                TypeAsWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeAsWorksForInt32()", $t.Line = "98", $t));
                    t.Fixture.TypeAsWorksForInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TypeAsWorksForInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.UnboxingWorksForInt32:static start.*/
                UnboxingWorksForInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingWorksForInt32()", $t.Line = "107", $t));
                    t.Fixture.UnboxingWorksForInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.UnboxingWorksForInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "131", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "137", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "143", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "149", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "156", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "162", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "168", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "174", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TryParseWorks:static start.*/
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "187", $t));
                    t.Fixture.TryParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.TryParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "216", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "230", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "236", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "243", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "251", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "260", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "274", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "282", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerDivisionWorks:static start.*/
                IntegerDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerDivisionWorks()", $t.Line = "290", $t));
                    t.Fixture.IntegerDivisionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerDivisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerModuloWorks_SPI_1602:static start.*/
                IntegerModuloWorks_SPI_1602: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerModuloWorks_SPI_1602()", $t.Line = "304", $t));
                    t.Fixture.IntegerModuloWorks_SPI_1602();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerModuloWorks_SPI_1602:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerDivisionByZeroThrowsDivideByZeroException:static start.*/
                IntegerDivisionByZeroThrowsDivideByZeroException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IntegerDivisionByZeroThrowsDivideByZeroException()", $t.Line = "319", $t));
                    t.Fixture.IntegerDivisionByZeroThrowsDivideByZeroException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.IntegerDivisionByZeroThrowsDivideByZeroException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DoublesAreTruncatedWhenConvertedToIntegers:static start.*/
                DoublesAreTruncatedWhenConvertedToIntegers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DoublesAreTruncatedWhenConvertedToIntegers()", $t.Line = "329", $t));
                    t.Fixture.DoublesAreTruncatedWhenConvertedToIntegers();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.DoublesAreTruncatedWhenConvertedToIntegers:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.Int32Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/Int32Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int32Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.MinMaxValuesAreCorrect:static start.*/
                MinMaxValuesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinMaxValuesAreCorrect()", $t.Line = "36", $t));
                    t.Fixture.MinMaxValuesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.MinMaxValuesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "43", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.OverflowWorks:static start.*/
                OverflowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OverflowWorks()", $t.Line = "80", $t));
                    t.Fixture.OverflowWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.OverflowWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CombinedTypesOperationsWork:static start.*/
                CombinedTypesOperationsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombinedTypesOperationsWork()", $t.Line = "104", $t));
                    t.Fixture.CombinedTypesOperationsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CombinedTypesOperationsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "147", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "153", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "159", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "165", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "171", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "177", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "183", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.TryParseWorks:static start.*/
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "196", $t));
                    t.Fixture.TryParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.TryParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "245", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CastingOfLargeDoublesToInt64Works:static start.*/
                CastingOfLargeDoublesToInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingOfLargeDoublesToInt64Works()", $t.Line = "261", $t));
                    t.Fixture.CastingOfLargeDoublesToInt64Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CastingOfLargeDoublesToInt64Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DivisionOfLargeInt64Works:static start.*/
                DivisionOfLargeInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivisionOfLargeInt64Works()", $t.Line = "269", $t));
                    t.Fixture.DivisionOfLargeInt64Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.DivisionOfLargeInt64Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "277", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "283", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "290", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "299", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "308", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "322", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "330", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ShiftWorks:static start.*/
                ShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ShiftWorks()", $t.Line = "338", $t));
                    t.Fixture.ShiftWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.ShiftWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.Int64Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/Int64Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int64Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetInt8ArrayWorks:static start.*/
                SetInt8ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetInt8ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetInt8ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetInt8ArrayWithOffsetWorks:static start.*/
                SetInt8ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetInt8ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetInt8ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetInt8ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Int8ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Int8ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Int8ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.InvalidCastExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/InvalidCastExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidCastExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/InvalidOperationExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+InvalidOperationExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "70", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayImplementsIReadOnlyCollection:static start.*/
                ArrayImplementsIReadOnlyCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIReadOnlyCollection()", $t.Line = "82", $t));
                    t.Fixture.ArrayImplementsIReadOnlyCollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayImplementsIReadOnlyCollection:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo:static start.*/
                CustomClassThatShouldImplementIReadOnlyCollectionDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIReadOnlyCollectionDoesSo()", $t.Line = "88", $t));
                    t.Fixture.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionCountWorks:static start.*/
                ArrayCastToIReadOnlyCollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIReadOnlyCollectionCountWorks()", $t.Line = "94", $t));
                    t.Fixture.ArrayCastToIReadOnlyCollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks:static start.*/
                ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks()", $t.Line = "104", $t));
                    t.Fixture.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionContainsWorks:static start.*/
                ArrayCastToIReadOnlyCollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIReadOnlyCollectionContainsWorks()", $t.Line = "110", $t));
                    t.Fixture.ArrayCastToIReadOnlyCollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks:static start.*/
                ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks()", $t.Line = "118", $t));
                    t.Fixture.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IReadOnlyCollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyCollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "80", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ClassImplementsInterfaces:static start.*/
                ClassImplementsInterfaces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementsInterfaces()", $t.Line = "93", $t));
                    t.Fixture.ClassImplementsInterfaces();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ClassImplementsInterfaces:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "99", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.KeysWorks:static start.*/
                KeysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "KeysWorks()", $t.Line = "109", $t));
                    t.Fixture.KeysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.KeysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.GetItemWorks:static start.*/
                GetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetItemWorks()", $t.Line = "138", $t));
                    t.Fixture.GetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.GetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ValuesWorks:static start.*/
                ValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValuesWorks()", $t.Line = "166", $t));
                    t.Fixture.ValuesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ValuesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ContainsKeyWorks:static start.*/
                ContainsKeyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsKeyWorks()", $t.Line = "196", $t));
                    t.Fixture.ContainsKeyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.ContainsKeyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.TryGetValueWorks:static start.*/
                TryGetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetValueWorks()", $t.Line = "209", $t));
                    t.Fixture.TryGetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.TryGetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.UsersTestCase_1626_Works:static start.*/
                UsersTestCase_1626_Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UsersTestCase_1626_Works()", $t.Line = "246", $t));
                    t.Fixture.UsersTestCase_1626_Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.UsersTestCase_1626_Works:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IReadOnlyDictionaryTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyDictionaryTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "82", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.CustomClassThatShouldImplementIReadOnlyListDoesSo:static start.*/
                CustomClassThatShouldImplementIReadOnlyListDoesSo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomClassThatShouldImplementIReadOnlyListDoesSo()", $t.Line = "95", $t));
                    t.Fixture.CustomClassThatShouldImplementIReadOnlyListDoesSo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.CustomClassThatShouldImplementIReadOnlyListDoesSo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ArrayImplementsIReadOnlyList:static start.*/
                ArrayImplementsIReadOnlyList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayImplementsIReadOnlyList()", $t.Line = "101", $t));
                    t.Fixture.ArrayImplementsIReadOnlyList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ArrayImplementsIReadOnlyList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ArrayCastToIReadOnlyListGetItemWorks:static start.*/
                ArrayCastToIReadOnlyListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayCastToIReadOnlyListGetItemWorks()", $t.Line = "107", $t));
                    t.Fixture.ArrayCastToIReadOnlyListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ArrayCastToIReadOnlyListGetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ClassImplementingIReadOnlyListGetItemWorks:static start.*/
                ClassImplementingIReadOnlyListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIReadOnlyListGetItemWorks()", $t.Line = "114", $t));
                    t.Fixture.ClassImplementingIReadOnlyListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ClassImplementingIReadOnlyListGetItemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks:static start.*/
                ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks()", $t.Line = "121", $t));
                    t.Fixture.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IReadOnlyListTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IReadOnlyListTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IReadOnlyListTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554:static start.*/
                TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554()", $t.Line = "123", $t));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555:static start.*/
                EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555()", $t.Line = "132", $t));
                    t.Fixture.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555:static start.*/
                PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555()", $t.Line = "148", $t));
                    t.Fixture.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554:static start.*/
                ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554()", $t.Line = "166", $t));
                    t.Fixture.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554:static start.*/
                TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554()", $t.Line = "192", $t));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555:static start.*/
                EnumeratingIEnumerableIteratorToEndWorks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingIEnumerableIteratorToEndWorks_SPI_1555()", $t.Line = "201", $t));
                    t.Fixture.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingIEnumerableIteratorToEndWorks_SPI_1555:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555:static start.*/
                PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555()", $t.Line = "225", $t));
                    t.Fixture.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554:static start.*/
                ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554()", $t.Line = "244", $t));
                    t.Fixture.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters:static start.*/
                EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters()", $t.Line = "272", $t));
                    t.Fixture.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals:static start.*/
                DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals()", $t.Line = "286", $t));
                    t.Fixture.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.IteratorBlockTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/IteratorBlockTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+IteratorBlockTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TypePropertiesAreCorrect_SPI_1607_1608_1609:static start.*/
                TypePropertiesAreCorrect_SPI_1607_1608_1609: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1607_1608_1609()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1607_1608_1609();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TypePropertiesAreCorrect_SPI_1607_1608_1609:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DefaultConstructorWorks_SPI_1606:static start.*/
                DefaultConstructorWorks_SPI_1606: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks_SPI_1606()", $t.Line = "39", $t));
                    t.Fixture.DefaultConstructorWorks_SPI_1606();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DefaultConstructorWorks_SPI_1606:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DefaultValueWorks_SPI_1606:static start.*/
                DefaultValueWorks_SPI_1606: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks_SPI_1606()", $t.Line = "56", $t));
                    t.Fixture.DefaultValueWorks_SPI_1606();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DefaultValueWorks_SPI_1606:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CreatingInstanceReturnsDateWithZeroValue_SPI_1606:static start.*/
                CreatingInstanceReturnsDateWithZeroValue_SPI_1606: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsDateWithZeroValue_SPI_1606()", $t.Line = "73", $t));
                    t.Fixture.CreatingInstanceReturnsDateWithZeroValue_SPI_1606();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CreatingInstanceReturnsDateWithZeroValue_SPI_1606:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MillisecondSinceEpochConstructorWorks:static start.*/
                MillisecondSinceEpochConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MillisecondSinceEpochConstructorWorks()", $t.Line = "90", $t));
                    t.Fixture.MillisecondSinceEpochConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MillisecondSinceEpochConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LongConstructorWorks:static start.*/
                LongConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LongConstructorWorks()", $t.Line = "97", $t));
                    t.Fixture.LongConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LongConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LongConstructorUtcWorks:static start.*/
                LongConstructorUtcWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LongConstructorUtcWorks()", $t.Line = "118", $t));
                    t.Fixture.LongConstructorUtcWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LongConstructorUtcWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDConstructorWorks:static start.*/
                YMDConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDConstructorWorks()", $t.Line = "149", $t));
                    t.Fixture.YMDConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHConstructorWorks:static start.*/
                YMDHConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHConstructorWorks()", $t.Line = "156", $t));
                    t.Fixture.YMDHConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHConstructorUtcWorks:static start.*/
                YMDHConstructorUtcWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHConstructorUtcWorks()", $t.Line = "163", $t));
                    t.Fixture.YMDHConstructorUtcWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHConstructorUtcWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNConstructorWorks:static start.*/
                YMDHNConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNConstructorWorks()", $t.Line = "173", $t));
                    t.Fixture.YMDHNConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNConstructorUtcWorks:static start.*/
                YMDHNConstructorUtcWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNConstructorUtcWorks()", $t.Line = "180", $t));
                    t.Fixture.YMDHNConstructorUtcWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNConstructorUtcWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSConstructorWorks:static start.*/
                YMDHNSConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSConstructorWorks()", $t.Line = "190", $t));
                    t.Fixture.YMDHNSConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSConstructorUtcWorks:static start.*/
                YMDHNSConstructorUtcWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSConstructorUtcWorks()", $t.Line = "197", $t));
                    t.Fixture.YMDHNSConstructorUtcWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSConstructorUtcWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSUConstructorWorks:static start.*/
                YMDHNSUConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSUConstructorWorks()", $t.Line = "207", $t));
                    t.Fixture.YMDHNSUConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSUConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSUConstructorUtcWorks:static start.*/
                YMDHNSUConstructorUtcWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YMDHNSUConstructorUtcWorks()", $t.Line = "214", $t));
                    t.Fixture.YMDHNSUConstructorUtcWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YMDHNSUConstructorUtcWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MinWorks:static start.*/
                MinWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinWorks()", $t.Line = "224", $t));
                    t.Fixture.MinWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MinWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MaxWorks:static start.*/
                MaxWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxWorks()", $t.Line = "240", $t));
                    t.Fixture.MaxWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MaxWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.NowWorks:static start.*/
                NowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NowWorks()", $t.Line = "247", $t));
                    t.Fixture.NowWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.NowWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.UtcNowWorks:static start.*/
                UtcNowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UtcNowWorks()", $t.Line = "260", $t));
                    t.Fixture.UtcNowWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.UtcNowWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToUniversalWorksDoesNotDoubleCompute:static start.*/
                ToUniversalWorksDoesNotDoubleCompute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUniversalWorksDoesNotDoubleCompute()", $t.Line = "344", $t));
                    t.Fixture.ToUniversalWorksDoesNotDoubleCompute();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToUniversalWorksDoesNotDoubleCompute:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToUniversalTimeWorks_N2929_N2524:static start.*/
                ToUniversalTimeWorks_N2929_N2524: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUniversalTimeWorks_N2929_N2524()", $t.Line = "354", $t));
                    t.Fixture.ToUniversalTimeWorks_N2929_N2524();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToUniversalTimeWorks_N2929_N2524:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToLocalWorksDoesNotDoubleCompute:static start.*/
                ToLocalWorksDoesNotDoubleCompute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocalWorksDoesNotDoubleCompute()", $t.Line = "372", $t));
                    t.Fixture.ToLocalWorksDoesNotDoubleCompute();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToLocalWorksDoesNotDoubleCompute:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToLocalTimeWorks_N2929_N2524:static start.*/
                ToLocalTimeWorks_N2929_N2524: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLocalTimeWorks_N2929_N2524()", $t.Line = "382", $t));
                    t.Fixture.ToLocalTimeWorks_N2929_N2524();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToLocalTimeWorks_N2929_N2524:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TodayWorks:static start.*/
                TodayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TodayWorks()", $t.Line = "397", $t));
                    t.Fixture.TodayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TodayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "411", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "418", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "425", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "432", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LocaleFormatWorks:static start.*/
                LocaleFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocaleFormatWorks()", $t.Line = "441", $t));
                    t.Fixture.LocaleFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.LocaleFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetFullYearWorks:static start.*/
                GetFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFullYearWorks()", $t.Line = "448", $t));
                    t.Fixture.GetFullYearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetFullYearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMonthWorks:static start.*/
                GetMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMonthWorks()", $t.Line = "455", $t));
                    t.Fixture.GetMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetDateWorks:static start.*/
                GetDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDateWorks()", $t.Line = "462", $t));
                    t.Fixture.GetDateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetDateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetHoursWorks:static start.*/
                GetHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHoursWorks()", $t.Line = "469", $t));
                    t.Fixture.GetHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMinutesWorks:static start.*/
                GetMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMinutesWorks()", $t.Line = "476", $t));
                    t.Fixture.GetMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetSecondsWorks:static start.*/
                GetSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetSecondsWorks()", $t.Line = "483", $t));
                    t.Fixture.GetSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMillisecondsWorks:static start.*/
                GetMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMillisecondsWorks()", $t.Line = "490", $t));
                    t.Fixture.GetMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetDayWorks:static start.*/
                GetDayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetDayWorks()", $t.Line = "497", $t));
                    t.Fixture.GetDayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetDayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TicksWorks:static start.*/
                TicksWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TicksWorks()", $t.Line = "521", $t));
                    Bridge.ClientTest.SimpleTypes.JsDateTimeTests.TicksWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.TicksWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCFullYearWorks:static start.*/
                GetUTCFullYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCFullYearWorks()", $t.Line = "590", $t));
                    t.Fixture.GetUTCFullYearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCFullYearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUtcMonthWorks:static start.*/
                GetUtcMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUtcMonthWorks()", $t.Line = "597", $t));
                    t.Fixture.GetUtcMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUtcMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCDateWorks:static start.*/
                GetUTCDateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCDateWorks()", $t.Line = "604", $t));
                    t.Fixture.GetUTCDateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCDateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCHoursWorks:static start.*/
                GetUTCHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCHoursWorks()", $t.Line = "611", $t));
                    t.Fixture.GetUTCHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCMinutesWorks:static start.*/
                GetUTCMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCMinutesWorks()", $t.Line = "618", $t));
                    t.Fixture.GetUTCMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCSecondsWorks:static start.*/
                GetUTCSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCSecondsWorks()", $t.Line = "625", $t));
                    t.Fixture.GetUTCSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCMillisecondsWorks:static start.*/
                GetUTCMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCMillisecondsWorks()", $t.Line = "632", $t));
                    t.Fixture.GetUTCMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCDayWorks:static start.*/
                GetUTCDayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUTCDayWorks()", $t.Line = "639", $t));
                    t.Fixture.GetUTCDayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetUTCDayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "646", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWorks:static start.*/
                ParseExactWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactWorks()", $t.Line = "653", $t));
                    t.Fixture.ParseExactWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactReturnsNullIfTheInputIsInvalid:static start.*/
                ParseExactReturnsNullIfTheInputIsInvalid: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactReturnsNullIfTheInputIsInvalid()", $t.Line = "660", $t));
                    t.Fixture.ParseExactReturnsNullIfTheInputIsInvalid();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactReturnsNullIfTheInputIsInvalid:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWithCultureWorks:static start.*/
                ParseExactWithCultureWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactWithCultureWorks()", $t.Line = "666", $t));
                    t.Fixture.ParseExactWithCultureWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWithCultureWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWithCultureReturnsNullIfTheInputIsInvalid:static start.*/
                ParseExactWithCultureReturnsNullIfTheInputIsInvalid: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseExactWithCultureReturnsNullIfTheInputIsInvalid()", $t.Line = "673", $t));
                    t.Fixture.ParseExactWithCultureReturnsNullIfTheInputIsInvalid();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ParseExactWithCultureReturnsNullIfTheInputIsInvalid:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SubtractingDatesWorks:static start.*/
                SubtractingDatesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractingDatesWorks()", $t.Line = "958", $t));
                    t.Fixture.SubtractingDatesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SubtractingDatesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SubtractMethodReturningTimeSpanWorks:static start.*/
                SubtractMethodReturningTimeSpanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractMethodReturningTimeSpanWorks()", $t.Line = "965", $t));
                    t.Fixture.SubtractMethodReturningTimeSpanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SubtractMethodReturningTimeSpanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateEqualityWorks:static start.*/
                DateEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateEqualityWorks()", $t.Line = "994", $t));
                    t.Fixture.DateEqualityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateEqualityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateInequalityWorks:static start.*/
                DateInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateInequalityWorks()", $t.Line = "1023", $t));
                    t.Fixture.DateInequalityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateInequalityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateLessThanWorks:static start.*/
                DateLessThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessThanWorks()", $t.Line = "1048", $t));
                    t.Fixture.DateLessThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateLessThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateLessEqualWorks:static start.*/
                DateLessEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateLessEqualWorks()", $t.Line = "1056", $t));
                    t.Fixture.DateLessEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateLessEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateGreaterThanWorks:static start.*/
                DateGreaterThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterThanWorks()", $t.Line = "1064", $t));
                    t.Fixture.DateGreaterThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateGreaterThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateGreaterEqualWorks:static start.*/
                DateGreaterEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateGreaterEqualWorks()", $t.Line = "1072", $t));
                    t.Fixture.DateGreaterEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateGreaterEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateTimeGreaterThanAndLessThanOperators_N3138:static start.*/
                DateTimeGreaterThanAndLessThanOperators_N3138: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateTimeGreaterThanAndLessThanOperators_N3138()", $t.Line = "1080", $t));
                    t.Fixture.DateTimeGreaterThanAndLessThanOperators_N3138();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateTimeGreaterThanAndLessThanOperators_N3138:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138:static start.*/
                DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138()", $t.Line = "1110", $t));
                    t.Fixture.DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DateTimeGreaterThanAndLessThanOperatorsForNullable_N3138:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "1149", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "1158", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IEquatableEqualsWorks_SPI_1608:static start.*/
                IEquatableEqualsWorks_SPI_1608: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks_SPI_1608()", $t.Line = "1173", $t));
                    t.Fixture.IEquatableEqualsWorks_SPI_1608();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IEquatableEqualsWorks_SPI_1608:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.StaticEqualsWorks:static start.*/
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "1191", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.StaticEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "1206", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.StaticCompareWorks:static start.*/
                StaticCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticCompareWorks()", $t.Line = "1218", $t));
                    t.Fixture.StaticCompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.StaticCompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IComparableCompareToWorks_SPI_1609:static start.*/
                IComparableCompareToWorks_SPI_1609: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks_SPI_1609()", $t.Line = "1230", $t));
                    t.Fixture.IComparableCompareToWorks_SPI_1609();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IComparableCompareToWorks_SPI_1609:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DatePropertyWorks:static start.*/
                DatePropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DatePropertyWorks()", $t.Line = "1243", $t));
                    t.Fixture.DatePropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DatePropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayPropertyWorks:static start.*/
                DayPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DayPropertyWorks()", $t.Line = "1250", $t));
                    t.Fixture.DayPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayOfWeekPropertyWorks:static start.*/
                DayOfWeekPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DayOfWeekPropertyWorks()", $t.Line = "1257", $t));
                    t.Fixture.DayOfWeekPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayOfWeekPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayOfYearPropertyWorks:static start.*/
                DayOfYearPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DayOfYearPropertyWorks()", $t.Line = "1271", $t));
                    t.Fixture.DayOfYearPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DayOfYearPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.HourPropertyWorks:static start.*/
                HourPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HourPropertyWorks()", $t.Line = "1318", $t));
                    t.Fixture.HourPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.HourPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MillisecondPropertyWorks:static start.*/
                MillisecondPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MillisecondPropertyWorks()", $t.Line = "1325", $t));
                    t.Fixture.MillisecondPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MillisecondPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MinutePropertyWorks:static start.*/
                MinutePropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinutePropertyWorks()", $t.Line = "1332", $t));
                    t.Fixture.MinutePropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MinutePropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MonthPropertyWorks:static start.*/
                MonthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MonthPropertyWorks()", $t.Line = "1339", $t));
                    t.Fixture.MonthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.MonthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SecondPropertyWorks:static start.*/
                SecondPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SecondPropertyWorks()", $t.Line = "1346", $t));
                    t.Fixture.SecondPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SecondPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YearPropertyWorks:static start.*/
                YearPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "YearPropertyWorks()", $t.Line = "1353", $t));
                    t.Fixture.YearPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.YearPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddDaysWorks:static start.*/
                AddDaysWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddDaysWorks()", $t.Line = "1360", $t));
                    t.Fixture.AddDaysWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddDaysWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddDaysForDSTWorks_N2967:static start.*/
                AddDaysForDSTWorks_N2967: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddDaysForDSTWorks_N2967()", $t.Line = "1369", $t));
                    t.Fixture.AddDaysForDSTWorks_N2967();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddDaysForDSTWorks_N2967:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddHoursWorks:static start.*/
                AddHoursWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddHoursWorks()", $t.Line = "1389", $t));
                    t.Fixture.AddHoursWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddHoursWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMillisecondsWorks:static start.*/
                AddMillisecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddMillisecondsWorks()", $t.Line = "1398", $t));
                    t.Fixture.AddMillisecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMillisecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMinutesWorks:static start.*/
                AddMinutesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddMinutesWorks()", $t.Line = "1407", $t));
                    t.Fixture.AddMinutesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMinutesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMonthsWorks:static start.*/
                AddMonthsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddMonthsWorks()", $t.Line = "1416", $t));
                    t.Fixture.AddMonthsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMonthsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMonthsEdgeCasesWorks:static start.*/
                AddMonthsEdgeCasesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddMonthsEdgeCasesWorks()", $t.Line = "1425", $t));
                    t.Fixture.AddMonthsEdgeCasesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddMonthsEdgeCasesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddSecondsWorks:static start.*/
                AddSecondsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddSecondsWorks()", $t.Line = "1451", $t));
                    t.Fixture.AddSecondsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddSecondsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddYearsWorks:static start.*/
                AddYearsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddYearsWorks()", $t.Line = "1460", $t));
                    t.Fixture.AddYearsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddYearsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddYearsWorks_N2963:static start.*/
                AddYearsWorks_N2963: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddYearsWorks_N2963()", $t.Line = "1470", $t));
                    t.Fixture.AddYearsWorks_N2963();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.AddYearsWorks_N2963:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DaysInMonthWorks:static start.*/
                DaysInMonthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DaysInMonthWorks()", $t.Line = "1484", $t));
                    t.Fixture.DaysInMonthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.DaysInMonthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IsLeapYearWorks:static start.*/
                IsLeapYearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsLeapYearWorks()", $t.Line = "1503", $t));
                    t.Fixture.IsLeapYearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.IsLeapYearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SpecifyKindWorks:static start.*/
                SpecifyKindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpecifyKindWorks()", $t.Line = "1511", $t));
                    t.Fixture.SpecifyKindWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.SpecifyKindWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CreateUnixTimestampAndConvertBackToDateTime:static start.*/
                CreateUnixTimestampAndConvertBackToDateTime: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateUnixTimestampAndConvertBackToDateTime()", $t.Line = "1548", $t));
                    t.Fixture.CreateUnixTimestampAndConvertBackToDateTime();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.CreateUnixTimestampAndConvertBackToDateTime:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToShortDateStringWorks:static start.*/
                ToShortDateStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToShortDateStringWorks()", $t.Line = "1574", $t));
                    t.Fixture.ToShortDateStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToShortDateStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToShortTimeStringWorks:static start.*/
                ToShortTimeStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToShortTimeStringWorks()", $t.Line = "1599", $t));
                    t.Fixture.ToShortTimeStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.ToShortTimeStringWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.JsDateTimeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/DateTimeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsDateTimeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks:static start.*/
                NonGenericParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWorks()", $t.Line = "67", $t));
                    t.Fixture.NonGenericParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks:static start.*/
                GenericParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWorks()", $t.Line = "76", $t));
                    t.Fixture.GenericParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks:static start.*/
                NonGenericParseWithCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWithCallbackWorks()", $t.Line = "85", $t));
                    t.Fixture.NonGenericParseWithCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks:static start.*/
                GenericParseWithCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWithCallbackWorks()", $t.Line = "94", $t));
                    t.Fixture.GenericParseWithCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks3:static start.*/
                NonGenericParseWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWorks3()", $t.Line = "103", $t));
                    t.Fixture.NonGenericParseWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks3:static start.*/
                GenericParseWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWorks3()", $t.Line = "114", $t));
                    t.Fixture.GenericParseWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks3:static start.*/
                NonGenericParseWithCallbackWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWithCallbackWorks3()", $t.Line = "125", $t));
                    t.Fixture.NonGenericParseWithCallbackWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks3:static start.*/
                GenericParseWithCallbackWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWithCallbackWorks3()", $t.Line = "136", $t));
                    t.Fixture.GenericParseWithCallbackWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks4:static start.*/
                NonGenericParseWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWorks4()", $t.Line = "147", $t));
                    t.Fixture.NonGenericParseWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks4:static start.*/
                GenericParseWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWorks4()", $t.Line = "158", $t));
                    t.Fixture.GenericParseWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks4:static start.*/
                NonGenericParseWithCallbackWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonGenericParseWithCallbackWorks4()", $t.Line = "169", $t));
                    t.Fixture.NonGenericParseWithCallbackWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.NonGenericParseWithCallbackWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks4:static start.*/
                GenericParseWithCallbackWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParseWithCallbackWorks4()", $t.Line = "180", $t));
                    t.Fixture.GenericParseWithCallbackWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GenericParseWithCallbackWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWorks:static start.*/
                StringifyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWorks()", $t.Line = "191", $t));
                    t.Fixture.StringifyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks:static start.*/
                StringifyWithSerializableMembersArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayWorks()", $t.Line = "200", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks:static start.*/
                StringifyWithSerializableMembersArrayAndIntentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentCountWorks()", $t.Line = "210", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks:static start.*/
                StringifyWithSerializableMembersArrayAndIntentTextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentTextWorks()", $t.Line = "220", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks:static start.*/
                StringifyWithCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackWorks()", $t.Line = "230", $t));
                    t.Fixture.StringifyWithCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks:static start.*/
                StringifyWithCallbackAndIndentCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentCountWorks()", $t.Line = "240", $t));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks:static start.*/
                StringifyWithCallbackAndIndentTextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentTextWorks()", $t.Line = "250", $t));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks3:static start.*/
                StringifyWithSerializableMembersArrayWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayWorks3()", $t.Line = "260", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks3:static start.*/
                StringifyWithSerializableMembersArrayAndIntentCountWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentCountWorks3()", $t.Line = "266", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks3:static start.*/
                StringifyWithSerializableMembersArrayAndIntentTextWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentTextWorks3()", $t.Line = "272", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks3:static start.*/
                StringifyWithCallbackWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackWorks3()", $t.Line = "278", $t));
                    t.Fixture.StringifyWithCallbackWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks3:static start.*/
                StringifyWithCallbackAndIndentCountWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentCountWorks3()", $t.Line = "284", $t));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks3:static start.*/
                StringifyWithCallbackAndIndentTextWorks3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentTextWorks3()", $t.Line = "290", $t));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks4:static start.*/
                StringifyWithSerializableMembersArrayWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayWorks4()", $t.Line = "296", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks4:static start.*/
                StringifyWithSerializableMembersArrayAndIntentCountWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentCountWorks4()", $t.Line = "302", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks4:static start.*/
                StringifyWithSerializableMembersArrayAndIntentTextWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithSerializableMembersArrayAndIntentTextWorks4()", $t.Line = "308", $t));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks4:static start.*/
                StringifyWithCallbackWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackWorks4()", $t.Line = "314", $t));
                    t.Fixture.StringifyWithCallbackWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks4:static start.*/
                StringifyWithCallbackAndIndentCountWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentCountWorks4()", $t.Line = "320", $t));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentCountWorks4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks4:static start.*/
                StringifyWithCallbackAndIndentTextWorks4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringifyWithCallbackAndIndentTextWorks4()", $t.Line = "326", $t));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.StringifyWithCallbackAndIndentTextWorks4:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.JsonTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Serialization/JsonTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsonTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.CharAtWorks:static start.*/
                CharAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharAtWorks()", $t.Line = "11", $t));
                    t.Fixture.CharAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.CharAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.CharCodeAtWorks:static start.*/
                CharCodeAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharCodeAtWorks()", $t.Line = "17", $t));
                    t.Fixture.CharCodeAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.CharCodeAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.FromCharCodeWorks:static start.*/
                FromCharCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromCharCodeWorks()", $t.Line = "23", $t));
                    t.Fixture.FromCharCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.FromCharCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.LocaleCompareWorks:static start.*/
                LocaleCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocaleCompareWorks()", $t.Line = "33", $t));
                    t.Fixture.LocaleCompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.LocaleCompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SliceWorks:static start.*/
                SliceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SliceWorks()", $t.Line = "94", $t));
                    t.Fixture.SliceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SliceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithCharWorks:static start.*/
                SplitWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharWorks()", $t.Line = "118", $t));
                    t.Fixture.SplitWithCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithLimitWorks:static start.*/
                SplitWithLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithLimitWorks()", $t.Line = "124", $t));
                    t.Fixture.SplitWithLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWorks:static start.*/
                SplitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWorks()", $t.Line = "130", $t));
                    t.Fixture.SplitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithCharAndLimitWorks:static start.*/
                SplitWithCharAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharAndLimitWorks()", $t.Line = "136", $t));
                    t.Fixture.SplitWithCharAndLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithCharAndLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithStringWorks:static start.*/
                SplitWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringWorks()", $t.Line = "143", $t));
                    t.Fixture.SplitWithStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SplitWithStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.JsSplitWithStringAndLimitWorks:static start.*/
                JsSplitWithStringAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JsSplitWithStringAndLimitWorks()", $t.Line = "151", $t));
                    t.Fixture.JsSplitWithStringAndLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.JsSplitWithStringAndLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SubstrWorks:static start.*/
                SubstrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstrWorks()", $t.Line = "193", $t));
                    t.Fixture.SubstrWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.SubstrWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.JavaScriptSubstringWorks:static start.*/
                JavaScriptSubstringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JavaScriptSubstringWorks()", $t.Line = "220", $t));
                    t.Fixture.JavaScriptSubstringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.JavaScriptSubstringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.Strings:static start.*/
                Strings: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Strings()", $t.Line = "246", $t));
                    Bridge.ClientTest.SimpleTypes.JsStringTests.Strings();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.Strings:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.JsStringTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/JsStringTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+JsStringTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "34", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "43", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/KeyNotFoundExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyNotFoundExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TheConstructorWithParametersCanBeUsed:static start.*/
                TheConstructorWithParametersCanBeUsed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TheConstructorWithParametersCanBeUsed()", $t.Line = "13", $t));
                    t.Fixture.TheConstructorWithParametersCanBeUsed();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TheConstructorWithParametersCanBeUsed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TypeTestWorks:static start.*/
                TypeTestWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeTestWorks()", $t.Line = "22", $t));
                    t.Fixture.TypeTestWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TypeTestWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TypeTestWorksGeneric_SPI_1556:static start.*/
                TypeTestWorksGeneric_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeTestWorksGeneric_SPI_1556()", $t.Line = "34", $t));
                    t.Fixture.TypeTestWorksGeneric_SPI_1556();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TypeTestWorksGeneric_SPI_1556:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TheDefaultConstructorCanBeUsed_SPI_1556:static start.*/
                TheDefaultConstructorCanBeUsed_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TheDefaultConstructorCanBeUsed_SPI_1556()", $t.Line = "42", $t));
                    t.Fixture.TheDefaultConstructorCanBeUsed_SPI_1556();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.TheDefaultConstructorCanBeUsed_SPI_1556:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556:static start.*/
                CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556()", $t.Line = "52", $t));
                    t.Fixture.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.ActivatorCreateInstanceWorks:static start.*/
                ActivatorCreateInstanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.KeyValuePairTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyValuePairTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ActivatorCreateInstanceWorks()", $t.Line = "63", $t));
                    t.Fixture.ActivatorCreateInstanceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.ActivatorCreateInstanceWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.KeyValuePairTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/KeyValuePairTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+KeyValuePairTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable:static start.*/
                LinkedList_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedList_Generic_Constructor_IEnumerable()", $t.Line = "2797", $t));
                    t.Fixture.LinkedList_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException:static start.*/
                LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException()", $t.Line = "2818", $t));
                    t.Fixture.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode:static start.*/
                AddAfter_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode()", $t.Line = "2826", $t));
                    t.Fixture.AddAfter_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_Negative:static start.*/
                AddAfter_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_Negative()", $t.Line = "3016", $t));
                    t.Fixture.AddAfter_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode:static start.*/
                AddAfter_LLNode_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_LLNode()", $t.Line = "3051", $t));
                    t.Fixture.AddAfter_LLNode_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode_Negative:static start.*/
                AddAfter_LLNode_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_LLNode_Negative()", $t.Line = "3251", $t));
                    t.Fixture.AddAfter_LLNode_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddAfter_LLNode_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode:static start.*/
                AddBefore_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode()", $t.Line = "3318", $t));
                    t.Fixture.AddBefore_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_Negative:static start.*/
                AddBefore_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_Negative()", $t.Line = "3510", $t));
                    t.Fixture.AddBefore_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode:static start.*/
                AddBefore_LLNode_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_LLNode()", $t.Line = "3543", $t));
                    t.Fixture.AddBefore_LLNode_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode_Negative:static start.*/
                AddBefore_LLNode_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_LLNode_Negative()", $t.Line = "3733", $t));
                    t.Fixture.AddBefore_LLNode_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddBefore_LLNode_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_T_Tests:static start.*/
                AddFirst_T_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_T_Tests()", $t.Line = "3796", $t));
                    t.Fixture.AddFirst_T_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_T_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_LinkedListNode:static start.*/
                AddFirst_LinkedListNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_LinkedListNode()", $t.Line = "3912", $t));
                    t.Fixture.AddFirst_LinkedListNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_LinkedListNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_LinkedListNode_Negative:static start.*/
                AddFirst_LinkedListNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_LinkedListNode_Negative()", $t.Line = "4011", $t));
                    t.Fixture.AddFirst_LinkedListNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddFirst_LinkedListNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_T_Tests:static start.*/
                AddLast_T_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_T_Tests()", $t.Line = "4051", $t));
                    t.Fixture.AddLast_T_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_T_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_LinkedListNode:static start.*/
                AddLast_LinkedListNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_LinkedListNode()", $t.Line = "4148", $t));
                    t.Fixture.AddLast_LinkedListNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_LinkedListNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_LinkedListNode_Negative:static start.*/
                AddLast_LinkedListNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_LinkedListNode_Negative()", $t.Line = "4243", $t));
                    t.Fixture.AddLast_LinkedListNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.AddLast_LinkedListNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.CtorTest:static start.*/
                CtorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CtorTest()", $t.Line = "4283", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int.CtorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.CtorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Ctor_IEnumerableTest:static start.*/
                Ctor_IEnumerableTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Ctor_IEnumerableTest()", $t.Line = "4292", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int.Ctor_IEnumerableTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Ctor_IEnumerableTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Ctor_IEnumerableTest_Negative:static start.*/
                Ctor_IEnumerableTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Ctor_IEnumerableTest_Negative()", $t.Line = "4338", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int.Ctor_IEnumerableTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Ctor_IEnumerableTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Find_T:static start.*/
                Find_T: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Find_T()", $t.Line = "4353", $t));
                    t.Fixture.Find_T();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Find_T:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.FindLast_T:static start.*/
                FindLast_T: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FindLast_T()", $t.Line = "4484", $t));
                    t.Fixture.FindLast_T();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.FindLast_T:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Verify:static start.*/
                Verify: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Verify()", $t.Line = "4611", $t));
                    t.Fixture.Verify();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Verify:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveFirst_Tests:static start.*/
                RemoveFirst_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveFirst_Tests()", $t.Line = "4658", $t));
                    t.Fixture.RemoveFirst_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveFirst_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveFirst_Tests_Negative:static start.*/
                RemoveFirst_Tests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveFirst_Tests_Negative()", $t.Line = "4765", $t));
                    t.Fixture.RemoveFirst_Tests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveFirst_Tests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveLast_Tests:static start.*/
                RemoveLast_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveLast_Tests()", $t.Line = "4774", $t));
                    t.Fixture.RemoveLast_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveLast_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveLast_Tests_Negative:static start.*/
                RemoveLast_Tests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveLast_Tests_Negative()", $t.Line = "4878", $t));
                    t.Fixture.RemoveLast_Tests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.RemoveLast_Tests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_LLNode:static start.*/
                Remove_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_LLNode()", $t.Line = "4886", $t));
                    t.Fixture.Remove_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_Duplicates_LLNode:static start.*/
                Remove_Duplicates_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_Duplicates_LLNode()", $t.Line = "5071", $t));
                    t.Fixture.Remove_Duplicates_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_Duplicates_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_LLNode_Negative:static start.*/
                Remove_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_LLNode_Negative()", $t.Line = "5132", $t));
                    t.Fixture.Remove_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.Remove_LLNode_Negative:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_int", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/LinkedList/LinkedList.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_int end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable:static start.*/
                LinkedList_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedList_Generic_Constructor_IEnumerable()", $t.Line = "372", $t));
                    t.Fixture.LinkedList_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException:static start.*/
                LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException()", $t.Line = "393", $t));
                    t.Fixture.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.LinkedList_Generic_Constructor_IEnumerable_Null_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode:static start.*/
                AddAfter_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode()", $t.Line = "401", $t));
                    t.Fixture.AddAfter_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_Negative:static start.*/
                AddAfter_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_Negative()", $t.Line = "598", $t));
                    t.Fixture.AddAfter_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode:static start.*/
                AddAfter_LLNode_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_LLNode()", $t.Line = "633", $t));
                    t.Fixture.AddAfter_LLNode_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode_Negative:static start.*/
                AddAfter_LLNode_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddAfter_LLNode_LLNode_Negative()", $t.Line = "840", $t));
                    t.Fixture.AddAfter_LLNode_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddAfter_LLNode_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode:static start.*/
                AddBefore_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode()", $t.Line = "907", $t));
                    t.Fixture.AddBefore_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_Negative:static start.*/
                AddBefore_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_Negative()", $t.Line = "1107", $t));
                    t.Fixture.AddBefore_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode:static start.*/
                AddBefore_LLNode_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_LLNode()", $t.Line = "1140", $t));
                    t.Fixture.AddBefore_LLNode_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode_Negative:static start.*/
                AddBefore_LLNode_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddBefore_LLNode_LLNode_Negative()", $t.Line = "1337", $t));
                    t.Fixture.AddBefore_LLNode_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddBefore_LLNode_LLNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_T_Tests:static start.*/
                AddFirst_T_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_T_Tests()", $t.Line = "1400", $t));
                    t.Fixture.AddFirst_T_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_T_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_LinkedListNode:static start.*/
                AddFirst_LinkedListNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_LinkedListNode()", $t.Line = "1520", $t));
                    t.Fixture.AddFirst_LinkedListNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_LinkedListNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_LinkedListNode_Negative:static start.*/
                AddFirst_LinkedListNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddFirst_LinkedListNode_Negative()", $t.Line = "1619", $t));
                    t.Fixture.AddFirst_LinkedListNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddFirst_LinkedListNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_T_Tests:static start.*/
                AddLast_T_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_T_Tests()", $t.Line = "1659", $t));
                    t.Fixture.AddLast_T_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_T_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_LinkedListNode:static start.*/
                AddLast_LinkedListNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_LinkedListNode()", $t.Line = "1756", $t));
                    t.Fixture.AddLast_LinkedListNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_LinkedListNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_LinkedListNode_Negative:static start.*/
                AddLast_LinkedListNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddLast_LinkedListNode_Negative()", $t.Line = "1851", $t));
                    t.Fixture.AddLast_LinkedListNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.AddLast_LinkedListNode_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.CtorTest:static start.*/
                CtorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CtorTest()", $t.Line = "1891", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string.CtorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.CtorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Ctor_IEnumerableTest:static start.*/
                Ctor_IEnumerableTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Ctor_IEnumerableTest()", $t.Line = "1900", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string.Ctor_IEnumerableTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Ctor_IEnumerableTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Ctor_IEnumerableTest_Negative:static start.*/
                Ctor_IEnumerableTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Ctor_IEnumerableTest_Negative()", $t.Line = "1946", $t));
                    Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string.Ctor_IEnumerableTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Ctor_IEnumerableTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Find_T:static start.*/
                Find_T: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Find_T()", $t.Line = "1961", $t));
                    t.Fixture.Find_T();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Find_T:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.FindLast_T:static start.*/
                FindLast_T: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FindLast_T()", $t.Line = "2092", $t));
                    t.Fixture.FindLast_T();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.FindLast_T:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Verify:static start.*/
                Verify: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Verify()", $t.Line = "2219", $t));
                    t.Fixture.Verify();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Verify:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveFirst_Tests:static start.*/
                RemoveFirst_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveFirst_Tests()", $t.Line = "2266", $t));
                    t.Fixture.RemoveFirst_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveFirst_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveFirst_Tests_Negative:static start.*/
                RemoveFirst_Tests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveFirst_Tests_Negative()", $t.Line = "2373", $t));
                    t.Fixture.RemoveFirst_Tests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveFirst_Tests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveLast_Tests:static start.*/
                RemoveLast_Tests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveLast_Tests()", $t.Line = "2382", $t));
                    t.Fixture.RemoveLast_Tests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveLast_Tests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveLast_Tests_Negative:static start.*/
                RemoveLast_Tests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveLast_Tests_Negative()", $t.Line = "2486", $t));
                    t.Fixture.RemoveLast_Tests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.RemoveLast_Tests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_LLNode:static start.*/
                Remove_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_LLNode()", $t.Line = "2494", $t));
                    t.Fixture.Remove_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_Duplicates_LLNode:static start.*/
                Remove_Duplicates_LLNode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_Duplicates_LLNode()", $t.Line = "2679", $t));
                    t.Fixture.Remove_Duplicates_LLNode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_Duplicates_LLNode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_LLNode_Negative:static start.*/
                Remove_LLNode_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.LinkedList_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Remove_LLNode_Negative()", $t.Line = "2740", $t));
                    t.Fixture.Remove_LLNode_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.Remove_LLNode_Negative:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.LinkedList_Generic_Tests_string", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/LinkedList/LinkedList.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+LinkedList_Generic_Tests_string end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "135", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "150", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructorWithCapacityWorks:static start.*/
                ConstructorWithCapacityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithCapacityWorks()", $t.Line = "157", $t));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructorWithCapacityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromArrayWorks:static start.*/
                ConstructingFromArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromArrayWorks()", $t.Line = "176", $t));
                    t.Fixture.ConstructingFromArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromListWorks:static start.*/
                ConstructingFromListWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromListWorks()", $t.Line = "185", $t));
                    t.Fixture.ConstructingFromListWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromListWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromIEnumerableWorks:static start.*/
                ConstructingFromIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromIEnumerableWorks()", $t.Line = "194", $t));
                    t.Fixture.ConstructingFromIEnumerableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConstructingFromIEnumerableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AsReadonlyWorks:static start.*/
                AsReadonlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsReadonlyWorks()", $t.Line = "203", $t));
                    t.Fixture.AsReadonlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AsReadonlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "226", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "234", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWorks:static start.*/
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "241", $t));
                    t.Fixture.ForeachWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.GetEnumeratorWorks:static start.*/
                GetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks()", $t.Line = "252", $t));
                    t.Fixture.GetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.GetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "263", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AddRangeWorks:static start.*/
                AddRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddRangeWorks()", $t.Line = "271", $t));
                    t.Fixture.AddRangeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.AddRangeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch1Works:static start.*/
                BinarySearch1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch1Works()", $t.Line = "279", $t));
                    t.Fixture.BinarySearch1Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch1Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch3Works:static start.*/
                BinarySearch3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch3Works()", $t.Line = "306", $t));
                    t.Fixture.BinarySearch3Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch3Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch4Works:static start.*/
                BinarySearch4Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinarySearch4Works()", $t.Line = "315", $t));
                    t.Fixture.BinarySearch4Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.BinarySearch4Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "334", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConcatWorks:static start.*/
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "342", $t));
                    t.Fixture.ConcatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ConcatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "351", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ContainsUsesEqualsMethod:static start.*/
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "359", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodSameBound:static start.*/
                CopyToMethodSameBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodSameBound()", $t.Line = "367", $t));
                    t.Fixture.CopyToMethodSameBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodSameBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodOffsetBound:static start.*/
                CopyToMethodOffsetBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodOffsetBound()", $t.Line = "380", $t));
                    t.Fixture.CopyToMethodOffsetBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodOffsetBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodIllegalBound:static start.*/
                CopyToMethodIllegalBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodIllegalBound()", $t.Line = "395", $t));
                    t.Fixture.CopyToMethodIllegalBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.CopyToMethodIllegalBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWithListItemCallbackWorks:static start.*/
                ForeachWithListItemCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWithListItemCallbackWorks()", $t.Line = "457", $t));
                    t.Fixture.ForeachWithListItemCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWithListItemCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithoutStartIndexWorks:static start.*/
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexWorks()", $t.Line = "499", $t));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithoutStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithoutStartIndexUsesEqualsMethod:static start.*/
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithoutStartIndexUsesEqualsMethod()", $t.Line = "505", $t));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithoutStartIndexUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithStartIndexWorks:static start.*/
                IndexOfWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexWorks()", $t.Line = "513", $t));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithStartIndexUsesEqualsMethod:static start.*/
                IndexOfWithStartIndexUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWithStartIndexUsesEqualsMethod()", $t.Line = "519", $t));
                    t.Fixture.IndexOfWithStartIndexUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IndexOfWithStartIndexUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.InsertWorks:static start.*/
                InsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertWorks()", $t.Line = "525", $t));
                    t.Fixture.InsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.InsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.InsertRangeWorks:static start.*/
                InsertRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertRangeWorks()", $t.Line = "533", $t));
                    t.Fixture.InsertRangeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.InsertRangeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveWorks:static start.*/
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "572", $t));
                    t.Fixture.RemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveReturnsFalseIfTheElementWasNotFound:static start.*/
                RemoveReturnsFalseIfTheElementWasNotFound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveReturnsFalseIfTheElementWasNotFound()", $t.Line = "580", $t));
                    t.Fixture.RemoveReturnsFalseIfTheElementWasNotFound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveReturnsFalseIfTheElementWasNotFound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveCanRemoveNullItem:static start.*/
                RemoveCanRemoveNullItem: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveCanRemoveNullItem()", $t.Line = "588", $t));
                    t.Fixture.RemoveCanRemoveNullItem();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveCanRemoveNullItem:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveCanRemoveNullItemFromEmptyList_N3149:static start.*/
                RemoveCanRemoveNullItemFromEmptyList_N3149: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveCanRemoveNullItemFromEmptyList_N3149()", $t.Line = "596", $t));
                    t.Fixture.RemoveCanRemoveNullItemFromEmptyList_N3149();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveCanRemoveNullItemFromEmptyList_N3149:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveUsesEqualsMethod:static start.*/
                RemoveUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveUsesEqualsMethod()", $t.Line = "619", $t));
                    t.Fixture.RemoveUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveAtWorks:static start.*/
                RemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveAtWorks()", $t.Line = "629", $t));
                    t.Fixture.RemoveAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.TrueForAllWorks:static start.*/
                TrueForAllWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrueForAllWorks()", $t.Line = "637", $t));
                    t.Fixture.TrueForAllWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.TrueForAllWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindWorks:static start.*/
                FindWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FindWorks()", $t.Line = "648", $t));
                    t.Fixture.FindWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindLastWorks:static start.*/
                FindLastWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FindLastWorks()", $t.Line = "665", $t));
                    t.Fixture.FindLastWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindLastWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindAllWorks:static start.*/
                FindAllWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FindAllWorks()", $t.Line = "682", $t));
                    t.Fixture.FindAllWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.FindAllWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ExistsWorks:static start.*/
                ExistsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExistsWorks()", $t.Line = "699", $t));
                    t.Fixture.ExistsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ExistsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveAllWorks_N3092:static start.*/
                RemoveAllWorks_N3092: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveAllWorks_N3092()", $t.Line = "712", $t));
                    t.Fixture.RemoveAllWorks_N3092();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveAllWorks_N3092:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveRangeWorks:static start.*/
                RemoveRangeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveRangeWorks()", $t.Line = "727", $t));
                    t.Fixture.RemoveRangeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.RemoveRangeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ReverseWorks:static start.*/
                ReverseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReverseWorks()", $t.Line = "735", $t));
                    t.Fixture.ReverseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ReverseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithDefaultCompareWorks:static start.*/
                SortWithDefaultCompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithDefaultCompareWorks()", $t.Line = "759", $t));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithDefaultCompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithCompareCallbackWorks:static start.*/
                SortWithCompareCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithCompareCallbackWorks()", $t.Line = "767", $t));
                    t.Fixture.SortWithCompareCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithCompareCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithIComparerWorks:static start.*/
                SortWithIComparerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithIComparerWorks()", $t.Line = "775", $t));
                    t.Fixture.SortWithIComparerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithIComparerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithComparisonWorks_N3126:static start.*/
                SortWithComparisonWorks_N3126: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortWithComparisonWorks_N3126()", $t.Line = "783", $t));
                    Bridge.ClientTest.Collections.Generic.ListTests.SortWithComparisonWorks_N3126();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.SortWithComparisonWorks_N3126:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWhenCastToIEnumerableWorks:static start.*/
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIEnumerableWorks()", $t.Line = "811", $t));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ForeachWhenCastToIEnumerableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "823", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionCountWorks:static start.*/
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "835", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionAddWorks:static start.*/
                ICollectionAddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionAddWorks()", $t.Line = "842", $t));
                    t.Fixture.ICollectionAddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionAddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionClearWorks:static start.*/
                ICollectionClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionClearWorks()", $t.Line = "850", $t));
                    t.Fixture.ICollectionClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionContainsWorks:static start.*/
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "858", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionContainsUsesEqualsMethod:static start.*/
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "866", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveWorks:static start.*/
                ICollectionRemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveWorks()", $t.Line = "874", $t));
                    t.Fixture.ICollectionRemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveCanRemoveNullItem:static start.*/
                ICollectionRemoveCanRemoveNullItem: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveCanRemoveNullItem()", $t.Line = "885", $t));
                    t.Fixture.ICollectionRemoveCanRemoveNullItem();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveCanRemoveNullItem:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveUsesEqualsMethod:static start.*/
                ICollectionRemoveUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionRemoveUsesEqualsMethod()", $t.Line = "893", $t));
                    t.Fixture.ICollectionRemoveUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ICollectionRemoveUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexingWorks:static start.*/
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "903", $t));
                    t.Fixture.IListIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexOfWorks:static start.*/
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "912", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexOfUsesEqualsMethod:static start.*/
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "920", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListIndexOfUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListInsertWorks:static start.*/
                IListInsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListInsertWorks()", $t.Line = "928", $t));
                    t.Fixture.IListInsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListInsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListRemoveAtWorks:static start.*/
                IListRemoveAtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListRemoveAtWorks()", $t.Line = "936", $t));
                    t.Fixture.IListRemoveAtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListRemoveAtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListNonGenericAddWorks_N2925:static start.*/
                IListNonGenericAddWorks_N2925: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListNonGenericAddWorks_N2925()", $t.Line = "944", $t));
                    t.Fixture.IListNonGenericAddWorks_N2925();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IListNonGenericAddWorks_N2925:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ToArrayWorks:static start.*/
                ToArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayWorks()", $t.Line = "955", $t));
                    t.Fixture.ToArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.ToArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyCollectionCountWorks:static start.*/
                IReadOnlyCollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionCountWorks()", $t.Line = "967", $t));
                    t.Fixture.IReadOnlyCollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyCollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyCollectionGetEnumeratorWorks:static start.*/
                IReadOnlyCollectionGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionGetEnumeratorWorks()", $t.Line = "974", $t));
                    t.Fixture.IReadOnlyCollectionGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyCollectionGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListIndexingWorks:static start.*/
                IReadOnlyListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListIndexingWorks()", $t.Line = "986", $t));
                    t.Fixture.IReadOnlyListIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListCountWorks:static start.*/
                IReadOnlyListCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListCountWorks()", $t.Line = "993", $t));
                    t.Fixture.IReadOnlyListCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListGetEnumeratorWorks:static start.*/
                IReadOnlyListGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListGetEnumeratorWorks()", $t.Line = "1000", $t));
                    t.Fixture.IReadOnlyListGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.IReadOnlyListGetEnumeratorWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.ListTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/ListTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ListTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "14", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ConstantsWork_N2473:static start.*/
                ConstantsWork_N2473: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork_N2473()", $t.Line = "22", $t));
                    t.Fixture.ConstantsWork_N2473();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ConstantsWork_N2473:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfDoubleWorks:static start.*/
                AbsOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfDoubleWorks()", $t.Line = "29", $t));
                    t.Fixture.AbsOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfIntWorks:static start.*/
                AbsOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfIntWorks()", $t.Line = "35", $t));
                    t.Fixture.AbsOfIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfLongWorks:static start.*/
                AbsOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfLongWorks()", $t.Line = "41", $t));
                    t.Fixture.AbsOfLongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfLongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfSbyteWorks:static start.*/
                AbsOfSbyteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfSbyteWorks()", $t.Line = "47", $t));
                    t.Fixture.AbsOfSbyteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfSbyteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfShortWorks:static start.*/
                AbsOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfShortWorks()", $t.Line = "53", $t));
                    t.Fixture.AbsOfShortWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfShortWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfFloatWorks:static start.*/
                AbsOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfFloatWorks()", $t.Line = "59", $t));
                    t.Fixture.AbsOfFloatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfFloatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfDecimalWorks:static start.*/
                AbsOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AbsOfDecimalWorks()", $t.Line = "65", $t));
                    t.Fixture.AbsOfDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AbsOfDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AcosWorks:static start.*/
                AcosWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AcosWorks()", $t.Line = "74", $t));
                    t.Fixture.AcosWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AcosWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AsinWorks:static start.*/
                AsinWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsinWorks()", $t.Line = "80", $t));
                    t.Fixture.AsinWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AsinWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AtanWorks:static start.*/
                AtanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AtanWorks()", $t.Line = "86", $t));
                    t.Fixture.AtanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.AtanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.Atan2Works:static start.*/
                Atan2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Atan2Works()", $t.Line = "92", $t));
                    t.Fixture.Atan2Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.Atan2Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CeilingOfDoubleWorks:static start.*/
                CeilingOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingOfDoubleWorks()", $t.Line = "98", $t));
                    t.Fixture.CeilingOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CeilingOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CeilingOfDecimalWorks:static start.*/
                CeilingOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CeilingOfDecimalWorks()", $t.Line = "105", $t));
                    t.Fixture.CeilingOfDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CeilingOfDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CosWorks:static start.*/
                CosWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CosWorks()", $t.Line = "113", $t));
                    t.Fixture.CosWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CosWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CoshWorks:static start.*/
                CoshWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CoshWorks()", $t.Line = "119", $t));
                    t.Fixture.CoshWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.CoshWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SinhWorks:static start.*/
                SinhWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinhWorks()", $t.Line = "125", $t));
                    t.Fixture.SinhWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SinhWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TanhWorks:static start.*/
                TanhWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TanhWorks()", $t.Line = "131", $t));
                    t.Fixture.TanhWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TanhWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.DivRemWorks:static start.*/
                DivRemWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivRemWorks()", $t.Line = "137", $t));
                    t.Fixture.DivRemWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.DivRemWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ExpWorks:static start.*/
                ExpWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpWorks()", $t.Line = "167", $t));
                    t.Fixture.ExpWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.ExpWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.FloorOfDoubleWorks:static start.*/
                FloorOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorOfDoubleWorks()", $t.Line = "173", $t));
                    t.Fixture.FloorOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.FloorOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.FloorOfDecimalWorks:static start.*/
                FloorOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FloorOfDecimalWorks()", $t.Line = "180", $t));
                    t.Fixture.FloorOfDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.FloorOfDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.LogWorks:static start.*/
                LogWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogWorks()", $t.Line = "188", $t));
                    t.Fixture.LogWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.LogWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.LogWithBaseWorks_SPI_1566:static start.*/
                LogWithBaseWorks_SPI_1566: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LogWithBaseWorks_SPI_1566()", $t.Line = "194", $t));
                    t.Fixture.LogWithBaseWorks_SPI_1566();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.LogWithBaseWorks_SPI_1566:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.Log10Works_SPI_1629:static start.*/
                Log10Works_SPI_1629: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Log10Works_SPI_1629()", $t.Line = "209", $t));
                    t.Fixture.Log10Works_SPI_1629();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.Log10Works_SPI_1629:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfByteWorks:static start.*/
                MaxOfByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfByteWorks()", $t.Line = "217", $t));
                    t.Fixture.MaxOfByteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfByteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfDecimalWorks:static start.*/
                MaxOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfDecimalWorks()", $t.Line = "224", $t));
                    t.Fixture.MaxOfDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfDoubleWorks:static start.*/
                MaxOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfDoubleWorks()", $t.Line = "231", $t));
                    t.Fixture.MaxOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfShortWorks:static start.*/
                MaxOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfShortWorks()", $t.Line = "238", $t));
                    t.Fixture.MaxOfShortWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfShortWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfIntWorks:static start.*/
                MaxOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfIntWorks()", $t.Line = "245", $t));
                    t.Fixture.MaxOfIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfLongWorks:static start.*/
                MaxOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfLongWorks()", $t.Line = "252", $t));
                    t.Fixture.MaxOfLongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfLongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfSByteWorks:static start.*/
                MaxOfSByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfSByteWorks()", $t.Line = "259", $t));
                    t.Fixture.MaxOfSByteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfSByteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfFloatWorks:static start.*/
                MaxOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfFloatWorks()", $t.Line = "266", $t));
                    t.Fixture.MaxOfFloatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfFloatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfUShortWorks:static start.*/
                MaxOfUShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfUShortWorks()", $t.Line = "273", $t));
                    t.Fixture.MaxOfUShortWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfUShortWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfUIntWorks:static start.*/
                MaxOfUIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfUIntWorks()", $t.Line = "280", $t));
                    t.Fixture.MaxOfUIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfUIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfULongWorks:static start.*/
                MaxOfULongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MaxOfULongWorks()", $t.Line = "287", $t));
                    t.Fixture.MaxOfULongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MaxOfULongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfByteWorks:static start.*/
                MinOfByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfByteWorks()", $t.Line = "294", $t));
                    t.Fixture.MinOfByteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfByteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfDecimalWorks:static start.*/
                MinOfDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfDecimalWorks()", $t.Line = "301", $t));
                    t.Fixture.MinOfDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfDoubleWorks:static start.*/
                MinOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfDoubleWorks()", $t.Line = "308", $t));
                    t.Fixture.MinOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfShortWorks:static start.*/
                MinOfShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfShortWorks()", $t.Line = "315", $t));
                    t.Fixture.MinOfShortWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfShortWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfIntWorks:static start.*/
                MinOfIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfIntWorks()", $t.Line = "322", $t));
                    t.Fixture.MinOfIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfLongWorks:static start.*/
                MinOfLongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfLongWorks()", $t.Line = "329", $t));
                    t.Fixture.MinOfLongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfLongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfSByteWorks:static start.*/
                MinOfSByteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfSByteWorks()", $t.Line = "336", $t));
                    t.Fixture.MinOfSByteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfSByteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfFloatWorks:static start.*/
                MinOfFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfFloatWorks()", $t.Line = "343", $t));
                    t.Fixture.MinOfFloatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfFloatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfUShortWorks:static start.*/
                MinOfUShortWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfUShortWorks()", $t.Line = "350", $t));
                    t.Fixture.MinOfUShortWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfUShortWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfUIntWorks:static start.*/
                MinOfUIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfUIntWorks()", $t.Line = "357", $t));
                    t.Fixture.MinOfUIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfUIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfULongWorks:static start.*/
                MinOfULongWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinOfULongWorks()", $t.Line = "364", $t));
                    t.Fixture.MinOfULongWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.MinOfULongWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.PowWorks:static start.*/
                PowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PowWorks()", $t.Line = "371", $t));
                    t.Fixture.PowWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.PowWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RandomWorks:static start.*/
                RandomWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RandomWorks()", $t.Line = "380", $t));
                    t.Fixture.RandomWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RandomWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundOfDoubleWorks:static start.*/
                RoundOfDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundOfDoubleWorks()", $t.Line = "391", $t));
                    t.Fixture.RoundOfDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundOfDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDecimalWithModeWorks:static start.*/
                RoundDecimalWithModeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundDecimalWithModeWorks()", $t.Line = "402", $t));
                    t.Fixture.RoundDecimalWithModeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDecimalWithModeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDecimalWithPrecisionAndModeWorks:static start.*/
                RoundDecimalWithPrecisionAndModeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundDecimalWithPrecisionAndModeWorks()", $t.Line = "476", $t));
                    t.Fixture.RoundDecimalWithPrecisionAndModeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDecimalWithPrecisionAndModeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDoubleWithModeWorks:static start.*/
                RoundDoubleWithModeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundDoubleWithModeWorks()", $t.Line = "550", $t));
                    t.Fixture.RoundDoubleWithModeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDoubleWithModeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDoubleWithPrecisionAndModeWorks:static start.*/
                RoundDoubleWithPrecisionAndModeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundDoubleWithPrecisionAndModeWorks()", $t.Line = "624", $t));
                    t.Fixture.RoundDoubleWithPrecisionAndModeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.RoundDoubleWithPrecisionAndModeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.JsRoundWorks:static start.*/
                JsRoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JsRoundWorks()", $t.Line = "698", $t));
                    t.Fixture.JsRoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.JsRoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.IEEERemainderWorks:static start.*/
                IEEERemainderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEEERemainderWorks()", $t.Line = "709", $t));
                    t.Fixture.IEEERemainderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.IEEERemainderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithDecimalWorks:static start.*/
                SignWithDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithDecimalWorks()", $t.Line = "737", $t));
                    t.Fixture.SignWithDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithDecimalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithDoubleWorks:static start.*/
                SignWithDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithDoubleWorks()", $t.Line = "745", $t));
                    t.Fixture.SignWithDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithFloatWorks:static start.*/
                SignWithFloatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SignWithFloatWorks()", $t.Line = "793", $t));
                    t.Fixture.SignWithFloatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SignWithFloatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SinWorks:static start.*/
                SinWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinWorks()", $t.Line = "801", $t));
                    t.Fixture.SinWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SinWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SqrtWorks:static start.*/
                SqrtWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SqrtWorks()", $t.Line = "807", $t));
                    t.Fixture.SqrtWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.SqrtWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TanWorks:static start.*/
                TanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TanWorks()", $t.Line = "813", $t));
                    t.Fixture.TanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TruncateWithDoubleWorks:static start.*/
                TruncateWithDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWithDoubleWorks()", $t.Line = "819", $t));
                    t.Fixture.TruncateWithDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TruncateWithDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TruncateWithDecimalWorks:static start.*/
                TruncateWithDecimalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TruncateWithDecimalWorks()", $t.Line = "826", $t));
                    t.Fixture.TruncateWithDecimalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.TruncateWithDecimalWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.MathTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/MathTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MathTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_ConstructorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_NegativeIndeces:static start.*/
                MemoryStream_Ctor_NegativeIndeces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_ConstructorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_Ctor_NegativeIndeces()", $t.Line = "15", $t));
                    Bridge.ClientTest.IO.MemoryStream_ConstructorTests.MemoryStream_Ctor_NegativeIndeces();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_NegativeIndeces:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_OutOfRangeIndeces:static start.*/
                MemoryStream_Ctor_OutOfRangeIndeces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_ConstructorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_Ctor_OutOfRangeIndeces()", $t.Line = "34", $t));
                    Bridge.ClientTest.IO.MemoryStream_ConstructorTests.MemoryStream_Ctor_OutOfRangeIndeces();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_OutOfRangeIndeces:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_NullArray:static start.*/
                MemoryStream_Ctor_NullArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_ConstructorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_Ctor_NullArray()", $t.Line = "53", $t));
                    Bridge.ClientTest.IO.MemoryStream_ConstructorTests.MemoryStream_Ctor_NullArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_NullArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_InvalidCapacities:static start.*/
                MemoryStream_Ctor_InvalidCapacities: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_ConstructorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_ConstructorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_Ctor_InvalidCapacities()", $t.Line = "59", $t));
                    Bridge.ClientTest.IO.MemoryStream_ConstructorTests.MemoryStream_Ctor_InvalidCapacities();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.MemoryStream_Ctor_InvalidCapacities:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.MemoryStream_ConstructorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/MemoryStream/MemoryStream.ConstructorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_ConstructorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_GetBufferTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Length:static start.*/
                MemoryStream_GetBuffer_Length: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_GetBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_GetBuffer_Length()", $t.Line = "15", $t));
                    t.Fixture.MemoryStream_GetBuffer_Length();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Length:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_NonExposable:static start.*/
                MemoryStream_GetBuffer_NonExposable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_GetBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_GetBuffer_NonExposable()", $t.Line = "23", $t));
                    t.Fixture.MemoryStream_GetBuffer_NonExposable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_NonExposable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Exposable:static start.*/
                MemoryStream_GetBuffer_Exposable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_GetBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_GetBuffer_Exposable()", $t.Line = "30", $t));
                    t.Fixture.MemoryStream_GetBuffer_Exposable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer_Exposable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer:static start.*/
                MemoryStream_GetBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_GetBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_GetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_GetBuffer()", $t.Line = "38", $t));
                    t.Fixture.MemoryStream_GetBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.MemoryStream_GetBuffer:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.MemoryStream_GetBufferTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/MemoryStream/MemoryStream.GetBufferTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_GetBufferTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsTrue:static start.*/
                TryGetBuffer_Constructor_AlwaysReturnsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_AlwaysReturnsTrue()", $t.Line = "16", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue:static start.*/
                TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue()", $t.Line = "29", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse:static start.*/
                TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse()", $t.Line = "42", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse:static start.*/
                TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse()", $t.Line = "51", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse()", $t.Line = "60", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse()", $t.Line = "69", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse()", $t.Line = "78", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue()", $t.Line = "87", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_TrueAsPubliclyVisible_ReturnsTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment:static start.*/
                TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment()", $t.Line = "101", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_AlwaysReturnsEmptyArraySegment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment:static start.*/
                TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment()", $t.Line = "118", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Bool_AlwaysReturnsEmptyArraySegment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment()", $t.Line = "135", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_AlwaysReturnsEmptyArraySegment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment()", $t.Line = "152", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_AlwaysReturnsEmptyArraySegment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment()", $t.Line = "169", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_FalseAsPubliclyVisible_ReturnsEmptyArraySegment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero:static start.*/
                TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero()", $t.Line = "186", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_AlwaysReturnsOffsetSetToZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero:static start.*/
                TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero()", $t.Line = "198", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_AlwaysReturnsOffsetSetToZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex()", $t.Line = "209", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsIndexAndTrueAsPubliclyVisible_AlwaysReturnsOffsetSetToIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero:static start.*/
                TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero()", $t.Line = "225", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByDefaultReturnsCountSetToZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength:static start.*/
                TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength()", $t.Line = "236", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsCountSetToWrittenLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero:static start.*/
                TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero()", $t.Line = "253", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ByDefaultReturnsCountSetToZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength:static start.*/
                TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength()", $t.Line = "264", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_ReturnsCountSetToWrittenLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount()", $t.Line = "281", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsCountAndTrueAsPubliclyVisible_AlwaysReturnsCountSetToCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsArray:static start.*/
                TryGetBuffer_Constructor_ReturnsArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ReturnsArray()", $t.Line = "297", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ReturnsArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_MultipleCallsReturnsSameArray:static start.*/
                TryGetBuffer_Constructor_MultipleCallsReturnsSameArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_MultipleCallsReturnsSameArray()", $t.Line = "308", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_MultipleCallsReturnsSameArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_MultipleCallsReturnsSameArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray:static start.*/
                TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray()", $t.Line = "321", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_MultipleCallsReturnSameArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays:static start.*/
                TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays()", $t.Line = "334", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_Int32_WhenWritingPastCapacity_ReturnsDifferentArrays:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer:static start.*/
                TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer()", $t.Line = "351", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_Constructor_ByteArray_Int32_Int32_Bool_Bool_ValueAsBufferAndTrueAsPubliclyVisible_AlwaysReturnsArraySetToBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsTrue:static start.*/
                TryGetBuffer_WhenDisposed_ReturnsTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_WhenDisposed_ReturnsTrue()", $t.Line = "367", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsTrue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex:static start.*/
                TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex()", $t.Line = "386", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsOffsetSetToIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsCountSetToCount:static start.*/
                TryGetBuffer_WhenDisposed_ReturnsCountSetToCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_WhenDisposed_ReturnsCountSetToCount()", $t.Line = "403", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsCountSetToCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsCountSetToCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer:static start.*/
                TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStream_TryGetBufferTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer()", $t.Line = "420", $t));
                    Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.TryGetBuffer_WhenDisposed_ReturnsArraySetToBuffer:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.MemoryStream_TryGetBufferTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/MemoryStream/MemoryStream.TryGetBufferTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStream_TryGetBufferTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_Write_BeyondCapacity:static start.*/
                MemoryStream_Write_BeyondCapacity: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_Write_BeyondCapacity()", $t.Line = "16", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_Write_BeyondCapacity();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_Write_BeyondCapacity:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteByte_BeyondCapacity:static start.*/
                MemoryStream_WriteByte_BeyondCapacity: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_WriteByte_BeyondCapacity()", $t.Line = "47", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_WriteByte_BeyondCapacity();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteByte_BeyondCapacity:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_GetPositionTest_Negative:static start.*/
                MemoryStream_GetPositionTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_GetPositionTest_Negative()", $t.Line = "70", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_GetPositionTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_GetPositionTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_LengthTest:static start.*/
                MemoryStream_LengthTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_LengthTest()", $t.Line = "87", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_LengthTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_LengthTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_LengthTest_Negative:static start.*/
                MemoryStream_LengthTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_LengthTest_Negative()", $t.Line = "113", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_LengthTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_LengthTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_ReadTest_Negative:static start.*/
                MemoryStream_ReadTest_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_ReadTest_Negative()", $t.Line = "123", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_ReadTest_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_ReadTest_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteToTests:static start.*/
                MemoryStream_WriteToTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_WriteToTests()", $t.Line = "139", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_WriteToTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteToTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteToTests_Negative:static start.*/
                MemoryStream_WriteToTests_Negative: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_WriteToTests_Negative()", $t.Line = "183", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_WriteToTests_Negative();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_WriteToTests_Negative:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_CopyTo_Invalid:static start.*/
                MemoryStream_CopyTo_Invalid: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStream_CopyTo_Invalid()", $t.Line = "201", $t));
                    Bridge.ClientTest.IO.MemoryStreamTests.MemoryStream_CopyTo_Invalid();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.MemoryStream_CopyTo_Invalid:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.CopyTo:static start.*/
                CopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.MemoryStreamTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MemoryStreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyTo()", $t.Line = "242", $t));
                    t.Fixture.CopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.CopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.MemoryStreamTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/MemoryStream/MemoryStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MemoryStreamTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestGlobalMethods:static start.*/
                TestGlobalMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGlobalMethods()", $t.Line = "19", $t));
                    t.Fixture.TestGlobalMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestGlobalMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestMixin:static start.*/
                TestMixin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMixin()", $t.Line = "34", $t));
                    t.Fixture.TestMixin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestMixin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestMixin_N3156:static start.*/
                TestMixin_N3156: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMixin_N3156()", $t.Line = "64", $t));
                    t.Fixture.TestMixin_N3156();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.TestMixin_N3156:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.MixinTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/MixinTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MixinTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "22", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GettingValueByIndexWorks:static start.*/
                GettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingValueByIndexWorks()", $t.Line = "29", $t));
                    t.Fixture.GettingValueByIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GettingValueByIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWorks:static start.*/
                GetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorks()", $t.Line = "41", $t));
                    t.Fixture.GetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWorksForUninitializedElement:static start.*/
                GetValueWorksForUninitializedElement: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForUninitializedElement()", $t.Line = "53", $t));
                    t.Fixture.GetValueWorksForUninitializedElement();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWorksForUninitializedElement:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueByIndexWorksForUninitializedElement:static start.*/
                GetValueByIndexWorksForUninitializedElement: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueByIndexWorksForUninitializedElement()", $t.Line = "60", $t));
                    t.Fixture.GetValueByIndexWorksForUninitializedElement();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueByIndexWorksForUninitializedElement:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SettingValueByIndexWorks:static start.*/
                SettingValueByIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SettingValueByIndexWorks()", $t.Line = "67", $t));
                    t.Fixture.SettingValueByIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SettingValueByIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SetValueWorks:static start.*/
                SetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorks()", $t.Line = "85", $t));
                    t.Fixture.SetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetLengthWorks:static start.*/
                GetLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLengthWorks()", $t.Line = "103", $t));
                    t.Fixture.GetLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetLowerBoundWorks:static start.*/
                GetLowerBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetLowerBoundWorks()", $t.Line = "112", $t));
                    t.Fixture.GetLowerBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetLowerBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetUpperBoundWorks:static start.*/
                GetUpperBoundWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetUpperBoundWorks()", $t.Line = "121", $t));
                    t.Fixture.GetUpperBoundWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetUpperBoundWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.ForeachWorks:static start.*/
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "130", $t));
                    t.Fixture.ForeachWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.ForeachWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.RankWorks:static start.*/
                RankWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RankWorks()", $t.Line = "142", $t));
                    t.Fixture.RankWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.RankWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWithIndexOutOfRangeThrowsAnException:static start.*/
                GetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWithIndexOutOfRangeThrowsAnException()", $t.Line = "149", $t));
                    t.Fixture.GetValueWithIndexOutOfRangeThrowsAnException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetValueWithIndexOutOfRangeThrowsAnException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SetValueWithIndexOutOfRangeThrowsAnException:static start.*/
                SetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWithIndexOutOfRangeThrowsAnException()", $t.Line = "164", $t));
                    t.Fixture.SetValueWithIndexOutOfRangeThrowsAnException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.SetValueWithIndexOutOfRangeThrowsAnException:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.MultidimArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/MultidimArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MultidimArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests.TestNewlyAttachedElements:static start.*/
                TestNewlyAttachedElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNewlyAttachedElements()", $t.Line = "22", $t));
                    t.Fixture.TestNewlyAttachedElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests.TestNewlyAttachedElements:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.MutationObserverTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/MutationObserverTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+MutationObserverTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.NotImplementedExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/NotImplementedExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NotImplementedExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.NotSupportedExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/NotSupportedExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NotSupportedExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.TypePropertiesAreCorrect_SPI_1567:static start.*/
                TypePropertiesAreCorrect_SPI_1567: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1567()", $t.Line = "77", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1567();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.TypePropertiesAreCorrect_SPI_1567:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.ConvertingToNullableWorks:static start.*/
                ConvertingToNullableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConvertingToNullableWorks()", $t.Line = "101", $t));
                    t.Fixture.ConvertingToNullableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.ConvertingToNullableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.HasValueWorks:static start.*/
                HasValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HasValueWorks()", $t.Line = "111", $t));
                    t.Fixture.HasValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.HasValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.BoxingWorks:static start.*/
                BoxingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BoxingWorks()", $t.Line = "119", $t));
                    t.Fixture.BoxingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.BoxingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.UnboxingWorks:static start.*/
                UnboxingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingWorks()", $t.Line = "127", $t));
                    t.Fixture.UnboxingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.UnboxingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.ValueWorks:static start.*/
                ValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueWorks()", $t.Line = "142", $t));
                    t.Fixture.ValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.ValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.UnboxingValueOfWrongTypeThrowsAnException:static start.*/
                UnboxingValueOfWrongTypeThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnboxingValueOfWrongTypeThrowsAnException()", $t.Line = "157", $t));
                    t.Fixture.UnboxingValueOfWrongTypeThrowsAnException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.UnboxingValueOfWrongTypeThrowsAnException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.GetValueOrDefaultWithArgWorks:static start.*/
                GetValueOrDefaultWithArgWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueOrDefaultWithArgWorks()", $t.Line = "167", $t));
                    t.Fixture.GetValueOrDefaultWithArgWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.GetValueOrDefaultWithArgWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode1Works:static start.*/
                LiftedGetHashCode1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGetHashCode1Works()", $t.Line = "175", $t));
                    t.Fixture.LiftedGetHashCode1Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode1Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode2Works:static start.*/
                LiftedGetHashCode2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGetHashCode2Works()", $t.Line = "206", $t));
                    t.Fixture.LiftedGetHashCode2Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode2Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode3Works:static start.*/
                LiftedGetHashCode3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGetHashCode3Works()", $t.Line = "237", $t));
                    t.Fixture.LiftedGetHashCode3Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGetHashCode3Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedEqualityWorks:static start.*/
                LiftedEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedEqualityWorks()", $t.Line = "299", $t));
                    t.Fixture.LiftedEqualityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedEqualityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedInequalityWorks:static start.*/
                LiftedInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedInequalityWorks()", $t.Line = "309", $t));
                    t.Fixture.LiftedInequalityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedInequalityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanWorks:static start.*/
                LiftedLessThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanWorks()", $t.Line = "319", $t));
                    t.Fixture.LiftedLessThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanWorks:static start.*/
                LiftedGreaterThanWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanWorks()", $t.Line = "329", $t));
                    t.Fixture.LiftedGreaterThanWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanOrEqualWorks:static start.*/
                LiftedLessThanOrEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanOrEqualWorks()", $t.Line = "339", $t));
                    t.Fixture.LiftedLessThanOrEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanOrEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanOrEqualWorks:static start.*/
                LiftedGreaterThanOrEqualWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanOrEqualWorks()", $t.Line = "349", $t));
                    t.Fixture.LiftedGreaterThanOrEqualWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanOrEqualWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedSubtractionWorks:static start.*/
                LiftedSubtractionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedSubtractionWorks()", $t.Line = "359", $t));
                    t.Fixture.LiftedSubtractionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedSubtractionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedAdditionWorks:static start.*/
                LiftedAdditionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedAdditionWorks()", $t.Line = "367", $t));
                    t.Fixture.LiftedAdditionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedAdditionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedModWorks:static start.*/
                LiftedModWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedModWorks()", $t.Line = "375", $t));
                    t.Fixture.LiftedModWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedModWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedFloatingPointDivisionWorks:static start.*/
                LiftedFloatingPointDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedFloatingPointDivisionWorks()", $t.Line = "383", $t));
                    t.Fixture.LiftedFloatingPointDivisionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedFloatingPointDivisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedIntegerDivisionWorks:static start.*/
                LiftedIntegerDivisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedIntegerDivisionWorks()", $t.Line = "391", $t));
                    t.Fixture.LiftedIntegerDivisionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedIntegerDivisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedMultiplicationWorks:static start.*/
                LiftedMultiplicationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedMultiplicationWorks()", $t.Line = "399", $t));
                    t.Fixture.LiftedMultiplicationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedMultiplicationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseAndWorks:static start.*/
                LiftedBitwiseAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseAndWorks()", $t.Line = "407", $t));
                    t.Fixture.LiftedBitwiseAndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseAndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseOrWorks:static start.*/
                LiftedBitwiseOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseOrWorks()", $t.Line = "415", $t));
                    t.Fixture.LiftedBitwiseOrWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseOrWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseXorWorks:static start.*/
                LiftedBitwiseXorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBitwiseXorWorks()", $t.Line = "423", $t));
                    t.Fixture.LiftedBitwiseXorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBitwiseXorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLeftShiftWorks:static start.*/
                LiftedLeftShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLeftShiftWorks()", $t.Line = "431", $t));
                    t.Fixture.LiftedLeftShiftWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLeftShiftWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedSignedRightShiftWorks:static start.*/
                LiftedSignedRightShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedSignedRightShiftWorks()", $t.Line = "439", $t));
                    t.Fixture.LiftedSignedRightShiftWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedSignedRightShiftWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnsignedRightShiftWorks:static start.*/
                LiftedUnsignedRightShiftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnsignedRightShiftWorks()", $t.Line = "447", $t));
                    t.Fixture.LiftedUnsignedRightShiftWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnsignedRightShiftWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedEqualityWorksWithUserDefinedOperators:static start.*/
                LiftedEqualityWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedEqualityWorksWithUserDefinedOperators()", $t.Line = "455", $t));
                    t.Fixture.LiftedEqualityWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedEqualityWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedInequalityWorksWithUserDefinedOperators:static start.*/
                LiftedInequalityWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedInequalityWorksWithUserDefinedOperators()", $t.Line = "466", $t));
                    t.Fixture.LiftedInequalityWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedInequalityWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanWorksWithUserDefinedOperators:static start.*/
                LiftedLessThanWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanWorksWithUserDefinedOperators()", $t.Line = "477", $t));
                    t.Fixture.LiftedLessThanWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanWorksWithUserDefinedOperators:static start.*/
                LiftedGreaterThanWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanWorksWithUserDefinedOperators()", $t.Line = "488", $t));
                    t.Fixture.LiftedGreaterThanWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanOrEqualWorksWithUserDefinedOperators:static start.*/
                LiftedLessThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedLessThanOrEqualWorksWithUserDefinedOperators()", $t.Line = "499", $t));
                    t.Fixture.LiftedLessThanOrEqualWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedLessThanOrEqualWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators:static start.*/
                LiftedGreaterThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedGreaterThanOrEqualWorksWithUserDefinedOperators()", $t.Line = "510", $t));
                    t.Fixture.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedGreaterThanOrEqualWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedAdditionWorksWithUserDefinedOperators:static start.*/
                LiftedAdditionWorksWithUserDefinedOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedAdditionWorksWithUserDefinedOperators()", $t.Line = "521", $t));
                    t.Fixture.LiftedAdditionWorksWithUserDefinedOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedAdditionWorksWithUserDefinedOperators:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634:static start.*/
                LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634()", $t.Line = "530", $t));
                    t.Fixture.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanAndWorks:static start.*/
                LiftedBooleanAndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanAndWorks()", $t.Line = "539", $t));
                    t.Fixture.LiftedBooleanAndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanAndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanOrWorks:static start.*/
                LiftedBooleanOrWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanOrWorks()", $t.Line = "554", $t));
                    t.Fixture.LiftedBooleanOrWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanOrWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanXorWorks_SPI_1568:static start.*/
                LiftedBooleanXorWorks_SPI_1568: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanXorWorks_SPI_1568()", $t.Line = "569", $t));
                    t.Fixture.LiftedBooleanXorWorks_SPI_1568();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanXorWorks_SPI_1568:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanNotWorks:static start.*/
                LiftedBooleanNotWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedBooleanNotWorks()", $t.Line = "588", $t));
                    t.Fixture.LiftedBooleanNotWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedBooleanNotWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedNegationWorks:static start.*/
                LiftedNegationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedNegationWorks()", $t.Line = "597", $t));
                    t.Fixture.LiftedNegationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedNegationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnaryPlusWorks:static start.*/
                LiftedUnaryPlusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedUnaryPlusWorks()", $t.Line = "605", $t));
                    t.Fixture.LiftedUnaryPlusWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedUnaryPlusWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedOnesComplementWorks:static start.*/
                LiftedOnesComplementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LiftedOnesComplementWorks()", $t.Line = "613", $t));
                    t.Fixture.LiftedOnesComplementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.LiftedOnesComplementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.CoalesceWorks:static start.*/
                CoalesceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CoalesceWorks()", $t.Line = "621", $t));
                    t.Fixture.CoalesceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.CoalesceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.BoxedandUnboxedEnumToStringWorks:static start.*/
                BoxedandUnboxedEnumToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BoxedandUnboxedEnumToStringWorks()", $t.Line = "639", $t));
                    t.Fixture.BoxedandUnboxedEnumToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.BoxedandUnboxedEnumToStringWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.NullableTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/NullableTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullableTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.NullReferenceExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/NullReferenceExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullReferenceExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Flush:static start.*/
                TestNullStream_Flush: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_Flush()", $t.Line = "17", $t));
                    t.Fixture.TestNullStream_Flush();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Flush:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Dispose:static start.*/
                TestNullStream_Dispose: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_Dispose()", $t.Line = "29", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_Dispose();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Dispose:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_CopyTo:static start.*/
                TestNullStream_CopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_CopyTo()", $t.Line = "36", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_CopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_CopyTo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_CopyToAsyncValidation:static start.*/
                TestNullStream_CopyToAsyncValidation: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_CopyToAsyncValidation()", $t.Line = "56", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_CopyToAsyncValidation();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_CopyToAsyncValidation:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Read:static start.*/
                TestNullStream_Read: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_Read()", $t.Line = "77", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_Read();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Read:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_ReadByte:static start.*/
                TestNullStream_ReadByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_ReadByte()", $t.Line = "103", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_ReadByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_ReadByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Write:static start.*/
                TestNullStream_Write: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_Write()", $t.Line = "113", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_Write();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_Write:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_WriteByte:static start.*/
                TestNullStream_WriteByte: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullStream_WriteByte()", $t.Line = "136", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullStream_WriteByte();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullStream_WriteByte:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullTextReader:static start.*/
                TestNullTextReader: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestNullTextReader()", $t.Line = "145", $t));
                    Bridge.ClientTest.IO.NullTests.TestNullTextReader();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TestNullTextReader:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TextNullTextWriter:static start.*/
                TextNullTextWriter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.NullTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TextNullTextWriter()", $t.Line = "172", $t));
                    Bridge.ClientTest.IO.NullTests.TextNullTextWriter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.TextNullTextWriter:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.NullTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.NullTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NullTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.GetFormatWorks:static start.*/
                GetFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetFormatWorks()", $t.Line = "21", $t));
                    t.Fixture.GetFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.GetFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.InvariantWorks:static start.*/
                InvariantWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvariantWorks()", $t.Line = "29", $t));
                    t.Fixture.InvariantWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.InvariantWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Format.NumberFormatInfoTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Format/NumberFormatInfoTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatInfoTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CurrencyFormatSpecifierWorks:static start.*/
                CurrencyFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CurrencyFormatSpecifierWorks()", $t.Line = "12", $t));
                    t.Fixture.CurrencyFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CurrencyFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.DecimalFormatSpecifierWorks:static start.*/
                DecimalFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DecimalFormatSpecifierWorks()", $t.Line = "22", $t));
                    t.Fixture.DecimalFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.DecimalFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.ExponentialFormatSpecifierWorks:static start.*/
                ExponentialFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExponentialFormatSpecifierWorks()", $t.Line = "33", $t));
                    t.Fixture.ExponentialFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.ExponentialFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.FixedPointFormatSpecifierWorks:static start.*/
                FixedPointFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FixedPointFormatSpecifierWorks()", $t.Line = "43", $t));
                    t.Fixture.FixedPointFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.FixedPointFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.GeneralFormatSpecifierWorks:static start.*/
                GeneralFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GeneralFormatSpecifierWorks()", $t.Line = "61", $t));
                    t.Fixture.GeneralFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.GeneralFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.NumericFormatSpecifierWorks:static start.*/
                NumericFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NumericFormatSpecifierWorks()", $t.Line = "83", $t));
                    t.Fixture.NumericFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.NumericFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.PercentFormatSpecifierWorks:static start.*/
                PercentFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PercentFormatSpecifierWorks()", $t.Line = "94", $t));
                    t.Fixture.PercentFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.PercentFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.RoundTripFormatSpecifierWorks:static start.*/
                RoundTripFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RoundTripFormatSpecifierWorks()", $t.Line = "103", $t));
                    t.Fixture.RoundTripFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.RoundTripFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.HexadecimalFormatSpecifierWorks:static start.*/
                HexadecimalFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HexadecimalFormatSpecifierWorks()", $t.Line = "114", $t));
                    t.Fixture.HexadecimalFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.HexadecimalFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomZeroFormatSpecifierWorks:static start.*/
                CustomZeroFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomZeroFormatSpecifierWorks()", $t.Line = "127", $t));
                    t.Fixture.CustomZeroFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomZeroFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomHashFormatSpecifierWorks:static start.*/
                CustomHashFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomHashFormatSpecifierWorks()", $t.Line = "152", $t));
                    t.Fixture.CustomHashFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomHashFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomDotFormatSpecifierWorks:static start.*/
                CustomDotFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomDotFormatSpecifierWorks()", $t.Line = "172", $t));
                    t.Fixture.CustomDotFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomDotFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomCommaFormatSpecifierWorks:static start.*/
                CustomCommaFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomCommaFormatSpecifierWorks()", $t.Line = "184", $t));
                    t.Fixture.CustomCommaFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomCommaFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomPercentFormatSpecifierWorks:static start.*/
                CustomPercentFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomPercentFormatSpecifierWorks()", $t.Line = "197", $t));
                    t.Fixture.CustomPercentFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomPercentFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomPerMileFormatSpecifierWorks:static start.*/
                CustomPerMileFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomPerMileFormatSpecifierWorks()", $t.Line = "204", $t));
                    t.Fixture.CustomPerMileFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomPerMileFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomEscapeFormatSpecifierWorks:static start.*/
                CustomEscapeFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomEscapeFormatSpecifierWorks()", $t.Line = "211", $t));
                    t.Fixture.CustomEscapeFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomEscapeFormatSpecifierWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomSemicolonFormatSpecifierWorks:static start.*/
                CustomSemicolonFormatSpecifierWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CustomSemicolonFormatSpecifierWorks()", $t.Line = "221", $t));
                    t.Fixture.CustomSemicolonFormatSpecifierWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.CustomSemicolonFormatSpecifierWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Format.NumberFormatSpecifiersTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Format/NumberFormatSpecifiersTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+NumberFormatSpecifiersTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ObjectLiteralCreateTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.ObjectLiteralCreateTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.TestExternalInterface:static start.*/
                TestExternalInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.ObjectLiteralCreateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectLiteralCreateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestExternalInterface()", $t.Line = "464", $t));
                    t.Fixture.TestExternalInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.TestExternalInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.TestClass:static start.*/
                TestClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.ObjectLiteralCreateTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectLiteralCreateTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestClass()", $t.Line = "496", $t));
                    t.Fixture.TestClass();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.TestClass:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ObjectLiteralTests.ObjectLiteralCreateTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ObjectLiteralTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectLiteralCreateTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "21", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.CanGetHashCodeForObject:static start.*/
                CanGetHashCodeForObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetHashCodeForObject()", $t.Line = "29", $t));
                    t.Fixture.CanGetHashCodeForObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.CanGetHashCodeForObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.RepeatedCallsToGetHashCodeReturnsSameValue:static start.*/
                RepeatedCallsToGetHashCodeReturnsSameValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RepeatedCallsToGetHashCodeReturnsSameValue()", $t.Line = "37", $t));
                    t.Fixture.RepeatedCallsToGetHashCodeReturnsSameValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.RepeatedCallsToGetHashCodeReturnsSameValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ObjectIsEqualToItself:static start.*/
                ObjectIsEqualToItself: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectIsEqualToItself()", $t.Line = "44", $t));
                    t.Fixture.ObjectIsEqualToItself();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ObjectIsEqualToItself:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ObjectIsNotEqualToOtherObject:static start.*/
                ObjectIsNotEqualToOtherObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectIsNotEqualToOtherObject()", $t.Line = "51", $t));
                    t.Fixture.ObjectIsNotEqualToOtherObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ObjectIsNotEqualToOtherObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.StaticEqualsWorks:static start.*/
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "57", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.StaticEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ReferenceEqualsWorks:static start.*/
                ReferenceEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReferenceEqualsWorks()", $t.Line = "68", $t));
                    t.Fixture.ReferenceEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ReferenceEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ToStringOverride:static start.*/
                ToStringOverride: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringOverride()", $t.Line = "80", $t));
                    t.Fixture.ToStringOverride();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.ToStringOverride:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.ObjectTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/ObjectTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ObjectTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.CancellationTokenOnlyConstructorWorks:static start.*/
                CancellationTokenOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancellationTokenOnlyConstructorWorks()", $t.Line = "35", $t));
                    t.Fixture.CancellationTokenOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.CancellationTokenOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageOnlyConstructorWorks:static start.*/
                MessageOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageOnlyConstructorWorks()", $t.Line = "46", $t));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks:static start.*/
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionConstructorWorks()", $t.Line = "56", $t));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndCancellationTokenConstructorWorks:static start.*/
                MessageAndCancellationTokenConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndCancellationTokenConstructorWorks()", $t.Line = "67", $t));
                    t.Fixture.MessageAndCancellationTokenConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndCancellationTokenConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndInnerExceptionAndCancellationTokenConstructorWorks:static start.*/
                MessageAndInnerExceptionAndCancellationTokenConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionAndCancellationTokenConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.MessageAndInnerExceptionAndCancellationTokenConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.MessageAndInnerExceptionAndCancellationTokenConstructorWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/OperationCanceledExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+OperationCanceledExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "23", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "32", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "41", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/OutOfMemoryExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+OutOfMemoryExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "10", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.OverflowExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/OverflowExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+OverflowExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsOnlyConstructorWorks:static start.*/
                ArgumentsOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsOnlyConstructorWorks()", $t.Line = "25", $t));
                    t.Fixture.ArgumentsOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsAndMessageConstructorWorks:static start.*/
                ArgumentsAndMessageConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsAndMessageConstructorWorks()", $t.Line = "37", $t));
                    t.Fixture.ArgumentsAndMessageConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsAndMessageConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsAndMessageAndInnerExceptionConstructorWorks:static start.*/
                ArgumentsAndMessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentsAndMessageAndInnerExceptionConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.ArgumentsAndMessageAndInnerExceptionConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.ArgumentsAndMessageAndInnerExceptionConstructorWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.PromiseExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/PromiseExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes:static start.*/
                TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes()", $t.Line = "132", $t));
                    t.Fixture.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes:static start.*/
                TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes()", $t.Line = "164", $t));
                    t.Fixture.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWorksWhenPromiseFails:static start.*/
                TaskFromPromiseWorksWhenPromiseFails: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWorksWhenPromiseFails()", $t.Line = "203", $t));
                    t.Fixture.TaskFromPromiseWorksWhenPromiseFails();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWorksWhenPromiseFails:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.CompletingPromiseCanBeAwaited:static start.*/
                CompletingPromiseCanBeAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompletingPromiseCanBeAwaited()", $t.Line = "238", $t));
                    t.Fixture.CompletingPromiseCanBeAwaited();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.CompletingPromiseCanBeAwaited:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.FailingPromiseCanBeAwaited:static start.*/
                FailingPromiseCanBeAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FailingPromiseCanBeAwaited()", $t.Line = "260", $t));
                    t.Fixture.FailingPromiseCanBeAwaited();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.FailingPromiseCanBeAwaited:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes:static start.*/
                TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes()", $t.Line = "305", $t));
                    t.Fixture.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Threading.PromiseTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Threading/Tasks/PromiseTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+PromiseTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedInstance:static start.*/
                AccessorsCanBeInvokedInstance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedInstance()", $t.Line = "267", $t));
                    t.Fixture.AccessorsCanBeInvokedInstance();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedInstance:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedStatic:static start.*/
                AccessorsCanBeInvokedStatic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedStatic()", $t.Line = "285", $t));
                    t.Fixture.AccessorsCanBeInvokedStatic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedStatic:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedGeneric:static start.*/
                AccessorsCanBeInvokedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedGeneric()", $t.Line = "301", $t));
                    t.Fixture.AccessorsCanBeInvokedGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedGenericStatic:static start.*/
                AccessorsCanBeInvokedGenericStatic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessorsCanBeInvokedGenericStatic()", $t.Line = "319", $t));
                    t.Fixture.AccessorsCanBeInvokedGenericStatic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.AccessorsCanBeInvokedGenericStatic:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.BaseAccessorsCanBeInvoked:static start.*/
                BaseAccessorsCanBeInvoked: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseAccessorsCanBeInvoked()", $t.Line = "335", $t));
                    t.Fixture.BaseAccessorsCanBeInvoked();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.BaseAccessorsCanBeInvoked:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.BaseAccessorsCanBeInvokedGeneric:static start.*/
                BaseAccessorsCanBeInvokedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseAccessorsCanBeInvokedGeneric()", $t.Line = "353", $t));
                    t.Fixture.BaseAccessorsCanBeInvokedGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.BaseAccessorsCanBeInvokedGeneric:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.PropertyAccessorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/PropertyAccessorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+PropertyAccessorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "31", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "40", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.EnqueueAndDequeueWork:static start.*/
                EnqueueAndDequeueWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EnqueueAndDequeueWork()", $t.Line = "51", $t));
                    t.Fixture.EnqueueAndDequeueWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.EnqueueAndDequeueWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.PeekWorks:static start.*/
                PeekWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PeekWorks()", $t.Line = "63", $t));
                    t.Fixture.PeekWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.PeekWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "75", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ContainsUsesEqualsMethod:static start.*/
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "87", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.QueueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.QueueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "98", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.ClearWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.QueueTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/QueueTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+QueueTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Unseeded:static start.*/
                Unseeded: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Unseeded()", $t.Line = "13", $t));
                    Bridge.ClientTest.RandomTests.Unseeded();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Unseeded:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Seeded:static start.*/
                Seeded: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Seeded()", $t.Line = "37", $t));
                    Bridge.ClientTest.RandomTests.Seeded();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Seeded:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Sample:static start.*/
                Sample: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Sample()", $t.Line = "65", $t));
                    Bridge.ClientTest.RandomTests.Sample();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.Sample:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "85", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "96", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.SeedConstructorWorks:static start.*/
                SeedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SeedConstructorWorks()", $t.Line = "102", $t));
                    t.Fixture.SeedConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.SeedConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWorks:static start.*/
                NextWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWorks()", $t.Line = "110", $t));
                    t.Fixture.NextWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWithMaxWorks:static start.*/
                NextWithMaxWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWithMaxWorks()", $t.Line = "122", $t));
                    t.Fixture.NextWithMaxWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWithMaxWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWithMinAndMaxWorks:static start.*/
                NextWithMinAndMaxWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextWithMinAndMaxWorks()", $t.Line = "134", $t));
                    t.Fixture.NextWithMinAndMaxWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextWithMinAndMaxWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextDoubleWorks:static start.*/
                NextDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextDoubleWorks()", $t.Line = "146", $t));
                    t.Fixture.NextDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextBytesWorks:static start.*/
                NextBytesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NextBytesWorks()", $t.Line = "158", $t));
                    t.Fixture.NextBytesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.NextBytesWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.RandomTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/RandomTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RandomTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "21", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "30", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.ConstructorWithMessageWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.RankExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/RankExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RankExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithNullString:static start.*/
                StringReaderWithNullString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringReaderWithNullString()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.ReaderTests.StringReaderWithNullString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithNullString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithEmptyString:static start.*/
                StringReaderWithEmptyString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringReaderWithEmptyString()", $t.Line = "24", $t));
                    Bridge.ClientTest.IO.ReaderTests.StringReaderWithEmptyString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithEmptyString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithGenericString:static start.*/
                StringReaderWithGenericString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringReaderWithGenericString()", $t.Line = "33", $t));
                    Bridge.ClientTest.IO.ReaderTests.StringReaderWithGenericString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.StringReaderWithGenericString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadEmptyString:static start.*/
                ReadEmptyString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadEmptyString()", $t.Line = "43", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadEmptyString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadEmptyString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadString:static start.*/
                ReadString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadString()", $t.Line = "51", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadLine:static start.*/
                ReadLine: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadLine()", $t.Line = "62", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadLine();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadLine:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadPseudoRandomString:static start.*/
                ReadPseudoRandomString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadPseudoRandomString()", $t.Line = "79", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadPseudoRandomString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadPseudoRandomString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekEmptyString:static start.*/
                PeekEmptyString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PeekEmptyString()", $t.Line = "94", $t));
                    Bridge.ClientTest.IO.ReaderTests.PeekEmptyString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekEmptyString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekString:static start.*/
                PeekString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PeekString()", $t.Line = "102", $t));
                    Bridge.ClientTest.IO.ReaderTests.PeekString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekPseudoRandomString:static start.*/
                PeekPseudoRandomString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PeekPseudoRandomString()", $t.Line = "116", $t));
                    Bridge.ClientTest.IO.ReaderTests.PeekPseudoRandomString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.PeekPseudoRandomString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndEmptyString:static start.*/
                ReadToEndEmptyString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadToEndEmptyString()", $t.Line = "133", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadToEndEmptyString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndEmptyString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndString:static start.*/
                ReadToEndString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadToEndString()", $t.Line = "146", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadToEndString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndPseudoRandom:static start.*/
                ReadToEndPseudoRandom: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadToEndPseudoRandom()", $t.Line = "154", $t));
                    Bridge.ClientTest.IO.ReaderTests.ReadToEndPseudoRandom();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.ReadToEndPseudoRandom:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.Closed_DisposedExceptions:static start.*/
                Closed_DisposedExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Closed_DisposedExceptions()", $t.Line = "168", $t));
                    Bridge.ClientTest.IO.ReaderTests.Closed_DisposedExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.Closed_DisposedExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.Disposed_DisposedExceptions:static start.*/
                Disposed_DisposedExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.ReaderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Disposed_DisposedExceptions()", $t.Line = "176", $t));
                    Bridge.ClientTest.IO.ReaderTests.Disposed_DisposedExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.Disposed_DisposedExceptions:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.ReaderTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StringReader/StringReader.CtorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReaderTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "32", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ConstructorWorks:static start.*/
                ConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWorks()", $t.Line = "45", $t));
                    t.Fixture.ConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "55", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "63", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ForeachWorks:static start.*/
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "71", $t));
                    t.Fixture.ForeachWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ForeachWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.GetEnumeratorWorks:static start.*/
                GetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks()", $t.Line = "82", $t));
                    t.Fixture.GetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.GetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "93", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ContainsUsesEqualsMethod:static start.*/
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "101", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodSameBound:static start.*/
                CopyToMethodSameBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodSameBound()", $t.Line = "109", $t));
                    t.Fixture.CopyToMethodSameBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodSameBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodOffsetBound:static start.*/
                CopyToMethodOffsetBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodOffsetBound()", $t.Line = "122", $t));
                    t.Fixture.CopyToMethodOffsetBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodOffsetBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodIllegalBound:static start.*/
                CopyToMethodIllegalBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodIllegalBound()", $t.Line = "137", $t));
                    t.Fixture.CopyToMethodIllegalBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodIllegalBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListSameBound:static start.*/
                CopyToMethodWhenCastToIListSameBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToIListSameBound()", $t.Line = "153", $t));
                    t.Fixture.CopyToMethodWhenCastToIListSameBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListSameBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListOffsetBound:static start.*/
                CopyToMethodWhenCastToIListOffsetBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToIListOffsetBound()", $t.Line = "166", $t));
                    t.Fixture.CopyToMethodWhenCastToIListOffsetBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListOffsetBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListIllegalBound:static start.*/
                CopyToMethodWhenCastToIListIllegalBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToIListIllegalBound()", $t.Line = "181", $t));
                    t.Fixture.CopyToMethodWhenCastToIListIllegalBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToIListIllegalBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionSameBound:static start.*/
                CopyToMethodWhenCastToICollectionSameBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToICollectionSameBound()", $t.Line = "197", $t));
                    t.Fixture.CopyToMethodWhenCastToICollectionSameBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionSameBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionOffsetBound:static start.*/
                CopyToMethodWhenCastToICollectionOffsetBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToICollectionOffsetBound()", $t.Line = "210", $t));
                    t.Fixture.CopyToMethodWhenCastToICollectionOffsetBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionOffsetBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionIllegalBound:static start.*/
                CopyToMethodWhenCastToICollectionIllegalBound: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToMethodWhenCastToICollectionIllegalBound()", $t.Line = "225", $t));
                    t.Fixture.CopyToMethodWhenCastToICollectionIllegalBound();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionIllegalBound:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "241", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ForeachWhenCastToIEnumerableWorks:static start.*/
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWhenCastToIEnumerableWorks()", $t.Line = "248", $t));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ForeachWhenCastToIEnumerableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "260", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionCountWorks:static start.*/
                ICollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCountWorks()", $t.Line = "272", $t));
                    t.Fixture.ICollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "279", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionContainsWorks:static start.*/
                ICollectionContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsWorks()", $t.Line = "286", $t));
                    t.Fixture.ICollectionContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionContainsUsesEqualsMethod:static start.*/
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionContainsUsesEqualsMethod()", $t.Line = "294", $t));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.ICollectionContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexingWorks:static start.*/
                IListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexingWorks()", $t.Line = "302", $t));
                    t.Fixture.IListIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexOfWorks:static start.*/
                IListIndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfWorks()", $t.Line = "309", $t));
                    t.Fixture.IListIndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexOfUsesEqualsMethod:static start.*/
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIndexOfUsesEqualsMethod()", $t.Line = "317", $t));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIndexOfUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "325", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyCollectionCountWorks:static start.*/
                IReadOnlyCollectionCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionCountWorks()", $t.Line = "332", $t));
                    t.Fixture.IReadOnlyCollectionCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyCollectionCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyCollectionGetEnumeratorWorks:static start.*/
                IReadOnlyCollectionGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyCollectionGetEnumeratorWorks()", $t.Line = "339", $t));
                    t.Fixture.IReadOnlyCollectionGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyCollectionGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListIndexingWorks:static start.*/
                IReadOnlyListIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListIndexingWorks()", $t.Line = "351", $t));
                    t.Fixture.IReadOnlyListIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListCountWorks:static start.*/
                IReadOnlyListCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListCountWorks()", $t.Line = "358", $t));
                    t.Fixture.IReadOnlyListCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListGetEnumeratorWorks:static start.*/
                IReadOnlyListGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyListGetEnumeratorWorks()", $t.Line = "365", $t));
                    t.Fixture.IReadOnlyListGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.IReadOnlyListGetEnumeratorWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/ObjectModel/ReadOnlyCollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReadOnlyCollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute:static start.*/
                GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute()", $t.Line = "838", $t));
                    t.Fixture.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.StructMemberReflectionWorks:static start.*/
                StructMemberReflectionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StructMemberReflectionWorks()", $t.Line = "847", $t));
                    t.Fixture.StructMemberReflectionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.StructMemberReflectionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticFlagWorksForMethod:static start.*/
                IsStaticFlagWorksForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticFlagWorksForMethod()", $t.Line = "856", $t));
                    t.Fixture.IsStaticFlagWorksForMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticFlagWorksForMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsMethodForMethod:static start.*/
                MemberTypeIsMethodForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsMethodForMethod()", $t.Line = "863", $t));
                    t.Fixture.MemberTypeIsMethodForMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsMethodForMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsConstructorIsFalseForMethod:static start.*/
                IsConstructorIsFalseForMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsConstructorIsFalseForMethod()", $t.Line = "870", $t));
                    t.Fixture.IsConstructorIsFalseForMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsConstructorIsFalseForMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsConstructorIsTrueForAllKindsOfConstructors:static start.*/
                IsConstructorIsTrueForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsConstructorIsTrueForAllKindsOfConstructors()", $t.Line = "877", $t));
                    t.Fixture.IsConstructorIsTrueForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsConstructorIsTrueForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsFalseForAllKindsOfConstructors:static start.*/
                IsStaticIsFalseForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsFalseForAllKindsOfConstructors()", $t.Line = "891", $t));
                    t.Fixture.IsStaticIsFalseForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsFalseForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsConstructorForAllKindsOfConstructors:static start.*/
                MemberTypeIsConstructorForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsConstructorForAllKindsOfConstructors()", $t.Line = "905", $t));
                    t.Fixture.MemberTypeIsConstructorForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsConstructorForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCtorForAllKindsOfConstructors:static start.*/
                NameIsCtorForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCtorForAllKindsOfConstructors()", $t.Line = "919", $t));
                    t.Fixture.NameIsCtorForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCtorForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForAllKindsOfConstructors:static start.*/
                DeclaringTypeIsCorrectForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForAllKindsOfConstructors()", $t.Line = "933", $t));
                    t.Fixture.DeclaringTypeIsCorrectForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameIsCorrectForAllKindsOfConstructors:static start.*/
                ScriptNameIsCorrectForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameIsCorrectForAllKindsOfConstructors()", $t.Line = "947", $t));
                    t.Fixture.ScriptNameIsCorrectForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameIsCorrectForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticMethodIsTrueOnlyForStaticMethodConstructors:static start.*/
                IsStaticMethodIsTrueOnlyForStaticMethodConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticMethodIsTrueOnlyForStaticMethodConstructors()", $t.Line = "961", $t));
                    t.Fixture.IsStaticMethodIsTrueOnlyForStaticMethodConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticMethodIsTrueOnlyForStaticMethodConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsExpandParamsIsCorrectForConstructors:static start.*/
                IsExpandParamsIsCorrectForConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsExpandParamsIsCorrectForConstructors()", $t.Line = "975", $t));
                    t.Fixture.IsExpandParamsIsCorrectForConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsExpandParamsIsCorrectForConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors:static start.*/
                SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors()", $t.Line = "988", $t));
                    t.Fixture.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeShouldBeCorrectForMethods:static start.*/
                DeclaringTypeShouldBeCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeShouldBeCorrectForMethods()", $t.Line = "1002", $t));
                    t.Fixture.DeclaringTypeShouldBeCorrectForMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeShouldBeCorrectForMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ReturnTypeAndParameterTypesAreCorrectForMethods:static start.*/
                ReturnTypeAndParameterTypesAreCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReturnTypeAndParameterTypesAreCorrectForMethods()", $t.Line = "1010", $t));
                    t.Fixture.ReturnTypeAndParameterTypesAreCorrectForMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ReturnTypeAndParameterTypesAreCorrectForMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ParameterTypesShouldBeCorrectForConstructors:static start.*/
                ParameterTypesShouldBeCorrectForConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterTypesShouldBeCorrectForConstructors()", $t.Line = "1033", $t));
                    t.Fixture.ParameterTypesShouldBeCorrectForConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ParameterTypesShouldBeCorrectForConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.VoidIsConsideredObjectAsReturnType:static start.*/
                VoidIsConsideredObjectAsReturnType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VoidIsConsideredObjectAsReturnType()", $t.Line = "1047", $t));
                    t.Fixture.VoidIsConsideredObjectAsReturnType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.VoidIsConsideredObjectAsReturnType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MethodNameIsTheCSharpName:static start.*/
                MethodNameIsTheCSharpName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodNameIsTheCSharpName()", $t.Line = "1053", $t));
                    t.Fixture.MethodNameIsTheCSharpName();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MethodNameIsTheCSharpName:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes:static start.*/
                TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes()", $t.Line = "1060", $t));
                    t.Fixture.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes:static start.*/
                TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes()", $t.Line = "1068", $t));
                    t.Fixture.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes:static start.*/
                MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes()", $t.Line = "1080", $t));
                    t.Fixture.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsGenericMethodDefinitionAndTypeParameterCountWork:static start.*/
                IsGenericMethodDefinitionAndTypeParameterCountWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericMethodDefinitionAndTypeParameterCountWork()", $t.Line = "1088", $t));
                    t.Fixture.IsGenericMethodDefinitionAndTypeParameterCountWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsGenericMethodDefinitionAndTypeParameterCountWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameWorksForAllKindsOfMethods:static start.*/
                ScriptNameWorksForAllKindsOfMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameWorksForAllKindsOfMethods()", $t.Line = "1099", $t));
                    t.Fixture.ScriptNameWorksForAllKindsOfMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameWorksForAllKindsOfMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode:static start.*/
                SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode()", $t.Line = "1113", $t));
                    t.Fixture.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsExpandParamsIsCorrectForMethods:static start.*/
                IsExpandParamsIsCorrectForMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsExpandParamsIsCorrectForMethods()", $t.Line = "1121", $t));
                    t.Fixture.IsExpandParamsIsCorrectForMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsExpandParamsIsCorrectForMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForNonGenericInstanceMethods:static start.*/
                CreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForNonGenericInstanceMethods()", $t.Line = "1134", $t));
                    t.Fixture.CreateDelegateWorksForNonGenericInstanceMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForNonGenericInstanceMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DelegateCreateDelegateWorksForNonGenericInstanceMethods:static start.*/
                DelegateCreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DelegateCreateDelegateWorksForNonGenericInstanceMethods()", $t.Line = "1152", $t));
                    t.Fixture.DelegateCreateDelegateWorksForNonGenericInstanceMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DelegateCreateDelegateWorksForNonGenericInstanceMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksNonGenericStaticMethods:static start.*/
                CreateDelegateWorksNonGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksNonGenericStaticMethods()", $t.Line = "1160", $t));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksNonGenericStaticMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksNonGenericStaticMethodOfGenericType:static start.*/
                CreateDelegateWorksNonGenericStaticMethodOfGenericType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksNonGenericStaticMethodOfGenericType()", $t.Line = "1179", $t));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethodOfGenericType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksNonGenericStaticMethodOfGenericType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForGenericInstanceMethods:static start.*/
                CreateDelegateWorksForGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForGenericInstanceMethods()", $t.Line = "1187", $t));
                    t.Fixture.CreateDelegateWorksForGenericInstanceMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForGenericInstanceMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForGenericStaticMethods:static start.*/
                CreateDelegateWorksForGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreateDelegateWorksForGenericStaticMethods()", $t.Line = "1201", $t));
                    t.Fixture.CreateDelegateWorksForGenericStaticMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CreateDelegateWorksForGenericStaticMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInstanceMethods:static start.*/
                InvokeWorksForNonGenericInstanceMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInstanceMethods()", $t.Line = "1214", $t));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInstanceMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericStaticMethods:static start.*/
                InvokeWorksForNonGenericStaticMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericStaticMethods()", $t.Line = "1227", $t));
                    t.Fixture.InvokeWorksForNonGenericStaticMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericStaticMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes:static start.*/
                InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes()", $t.Line = "1237", $t));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInlineCodeMethods:static start.*/
                InvokeWorksForNonGenericInlineCodeMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForNonGenericInlineCodeMethods()", $t.Line = "1244", $t));
                    t.Fixture.InvokeWorksForNonGenericInlineCodeMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForNonGenericInlineCodeMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInlineCodeMethods:static start.*/
                InvokeWorksForGenericInlineCodeMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInlineCodeMethods()", $t.Line = "1251", $t));
                    t.Fixture.InvokeWorksForGenericInlineCodeMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInlineCodeMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInstanceMethod:static start.*/
                InvokeWorksForGenericInstanceMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInstanceMethod()", $t.Line = "1258", $t));
                    t.Fixture.InvokeWorksForGenericInstanceMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInstanceMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericStaticMethod:static start.*/
                InvokeWorksForGenericStaticMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericStaticMethod()", $t.Line = "1273", $t));
                    t.Fixture.InvokeWorksForGenericStaticMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericStaticMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInstanceMethodsOnSerializableTypes:static start.*/
                InvokeWorksForGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForGenericInstanceMethodsOnSerializableTypes()", $t.Line = "1285", $t));
                    t.Fixture.InvokeWorksForGenericInstanceMethodsOnSerializableTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForGenericInstanceMethodsOnSerializableTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForExpandParamsMethods:static start.*/
                InvokeWorksForExpandParamsMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForExpandParamsMethods()", $t.Line = "1292", $t));
                    t.Fixture.InvokeWorksForExpandParamsMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForExpandParamsMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForAllKindsOfConstructors:static start.*/
                InvokeWorksForAllKindsOfConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForAllKindsOfConstructors()", $t.Line = "1304", $t));
                    t.Fixture.InvokeWorksForAllKindsOfConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForAllKindsOfConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForExpandParamsConstructors:static start.*/
                InvokeWorksForExpandParamsConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeWorksForExpandParamsConstructors()", $t.Line = "1330", $t));
                    t.Fixture.InvokeWorksForExpandParamsConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.InvokeWorksForExpandParamsConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsFieldForField:static start.*/
                MemberTypeIsFieldForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsFieldForField()", $t.Line = "1344", $t));
                    t.Fixture.MemberTypeIsFieldForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsFieldForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForField:static start.*/
                DeclaringTypeIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForField()", $t.Line = "1351", $t));
                    t.Fixture.DeclaringTypeIsCorrectForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForField:static start.*/
                NameIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForField()", $t.Line = "1358", $t));
                    t.Fixture.NameIsCorrectForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForField:static start.*/
                IsStaticIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForField()", $t.Line = "1365", $t));
                    t.Fixture.IsStaticIsCorrectForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.FieldTypeIsCorrectForField:static start.*/
                FieldTypeIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FieldTypeIsCorrectForField()", $t.Line = "1373", $t));
                    t.Fixture.FieldTypeIsCorrectForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.FieldTypeIsCorrectForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameIsCorrectForField:static start.*/
                ScriptNameIsCorrectForField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptNameIsCorrectForField()", $t.Line = "1381", $t));
                    t.Fixture.ScriptNameIsCorrectForField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptNameIsCorrectForField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetValueWorksForInstanceField:static start.*/
                GetValueWorksForInstanceField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForInstanceField()", $t.Line = "1388", $t));
                    t.Fixture.GetValueWorksForInstanceField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetValueWorksForInstanceField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetValueWorksForStaticField:static start.*/
                GetValueWorksForStaticField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetValueWorksForStaticField()", $t.Line = "1395", $t));
                    t.Fixture.GetValueWorksForStaticField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetValueWorksForStaticField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SetValueWorksForInstanceField:static start.*/
                SetValueWorksForInstanceField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorksForInstanceField()", $t.Line = "1402", $t));
                    t.Fixture.SetValueWorksForInstanceField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SetValueWorksForInstanceField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SetValueWorksForStaticField:static start.*/
                SetValueWorksForStaticField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetValueWorksForStaticField()", $t.Line = "1410", $t));
                    t.Fixture.SetValueWorksForStaticField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.SetValueWorksForStaticField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsEventForEvent:static start.*/
                MemberTypeIsEventForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsEventForEvent()", $t.Line = "1417", $t));
                    t.Fixture.MemberTypeIsEventForEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsEventForEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForEvent:static start.*/
                DeclaringTypeIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForEvent()", $t.Line = "1424", $t));
                    t.Fixture.DeclaringTypeIsCorrectForEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForEvent:static start.*/
                NameIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForEvent()", $t.Line = "1431", $t));
                    t.Fixture.NameIsCorrectForEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForEvent:static start.*/
                IsStaticIsCorrectForEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForEvent()", $t.Line = "1438", $t));
                    t.Fixture.IsStaticIsCorrectForEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForInstanceEvent:static start.*/
                AddEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForInstanceEvent()", $t.Line = "1445", $t));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForInstanceEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod:static start.*/
                AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod()", $t.Line = "1457", $t));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForStaticEvent:static start.*/
                AddEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForStaticEvent()", $t.Line = "1468", $t));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForStaticEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod:static start.*/
                AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod()", $t.Line = "1479", $t));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEvent:static start.*/
                RemoveEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForInstanceEvent()", $t.Line = "1489", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod:static start.*/
                RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod()", $t.Line = "1504", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForStaticEvent:static start.*/
                RemoveEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForStaticEvent()", $t.Line = "1516", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEvent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForStaticEvent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod:static start.*/
                RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod()", $t.Line = "1530", $t));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForAddMethodAreCorrect:static start.*/
                PropertiesForAddMethodAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForAddMethodAreCorrect()", $t.Line = "1541", $t));
                    t.Fixture.PropertiesForAddMethodAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForAddMethodAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForRemoveMethodAreCorrect:static start.*/
                PropertiesForRemoveMethodAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForRemoveMethodAreCorrect()", $t.Line = "1578", $t));
                    t.Fixture.PropertiesForRemoveMethodAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForRemoveMethodAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsPropertyForProperty:static start.*/
                MemberTypeIsPropertyForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsPropertyForProperty()", $t.Line = "1617", $t));
                    t.Fixture.MemberTypeIsPropertyForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsPropertyForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties:static start.*/
                ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties()", $t.Line = "1626", $t));
                    t.Fixture.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsPropertyForIndexer:static start.*/
                MemberTypeIsPropertyForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberTypeIsPropertyForIndexer()", $t.Line = "1633", $t));
                    t.Fixture.MemberTypeIsPropertyForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberTypeIsPropertyForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForProperty:static start.*/
                DeclaringTypeIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForProperty()", $t.Line = "1640", $t));
                    t.Fixture.DeclaringTypeIsCorrectForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForIndexer:static start.*/
                DeclaringTypeIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeIsCorrectForIndexer()", $t.Line = "1649", $t));
                    t.Fixture.DeclaringTypeIsCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.DeclaringTypeIsCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForProperty:static start.*/
                NameIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForProperty()", $t.Line = "1656", $t));
                    t.Fixture.NameIsCorrectForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForIndexer:static start.*/
                NameIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NameIsCorrectForIndexer()", $t.Line = "1665", $t));
                    t.Fixture.NameIsCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.NameIsCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForProperty:static start.*/
                IsStaticIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsCorrectForProperty()", $t.Line = "1672", $t));
                    t.Fixture.IsStaticIsCorrectForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsCorrectForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsFalseForIndexer:static start.*/
                IsStaticIsFalseForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsStaticIsFalseForIndexer()", $t.Line = "1681", $t));
                    t.Fixture.IsStaticIsFalseForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IsStaticIsFalseForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyTypeIsCorrectForProperty:static start.*/
                PropertyTypeIsCorrectForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyTypeIsCorrectForProperty()", $t.Line = "1688", $t));
                    t.Fixture.PropertyTypeIsCorrectForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyTypeIsCorrectForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyTypeIsCorrectForIndexer:static start.*/
                PropertyTypeIsCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyTypeIsCorrectForIndexer()", $t.Line = "1697", $t));
                    t.Fixture.PropertyTypeIsCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyTypeIsCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IndexParameterTypesAreEmptyForProperty:static start.*/
                IndexParameterTypesAreEmptyForProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexParameterTypesAreEmptyForProperty()", $t.Line = "1704", $t));
                    t.Fixture.IndexParameterTypesAreEmptyForProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IndexParameterTypesAreEmptyForProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IndexParameterTypesAreCorrectForIndexer:static start.*/
                IndexParameterTypesAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexParameterTypesAreCorrectForIndexer()", $t.Line = "1713", $t));
                    t.Fixture.IndexParameterTypesAreCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.IndexParameterTypesAreCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods:static start.*/
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()", $t.Line = "1720", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods:static start.*/
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()", $t.Line = "1773", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields:static start.*/
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields()", $t.Line = "1826", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields:static start.*/
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields()", $t.Line = "1860", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForIndexer:static start.*/
                PropertiesForGetMethodAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForGetMethodAreCorrectForIndexer()", $t.Line = "1894", $t));
                    t.Fixture.PropertiesForGetMethodAreCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForGetMethodAreCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForIndexer:static start.*/
                PropertiesForSetMethodAreCorrectForIndexer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesForSetMethodAreCorrectForIndexer()", $t.Line = "1928", $t));
                    t.Fixture.PropertiesForSetMethodAreCorrectForIndexer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertiesForSetMethodAreCorrectForIndexer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CanReadAndWriteAndPropertiesWithOnlyOneAccessor:static start.*/
                CanReadAndWriteAndPropertiesWithOnlyOneAccessor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanReadAndWriteAndPropertiesWithOnlyOneAccessor()", $t.Line = "1968", $t));
                    t.Fixture.CanReadAndWriteAndPropertiesWithOnlyOneAccessor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CanReadAndWriteAndPropertiesWithOnlyOneAccessor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CanReadAndWriteAndIndexersWithOnlyOneAccessor:static start.*/
                CanReadAndWriteAndIndexersWithOnlyOneAccessor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanReadAndWriteAndIndexersWithOnlyOneAccessor()", $t.Line = "2022", $t));
                    t.Fixture.CanReadAndWriteAndIndexersWithOnlyOneAccessor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.CanReadAndWriteAndIndexersWithOnlyOneAccessor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyInfoGetValueWorks:static start.*/
                PropertyInfoGetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyInfoGetValueWorks()", $t.Line = "2040", $t));
                    t.Fixture.PropertyInfoGetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyInfoGetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyInfoSetValueWorks:static start.*/
                PropertyInfoSetValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertyInfoSetValueWorks()", $t.Line = "2061", $t));
                    t.Fixture.PropertyInfoSetValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.PropertyInfoSetValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberAttributesWork:static start.*/
                MemberAttributesWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemberAttributesWork()", $t.Line = "2116", $t));
                    t.Fixture.MemberAttributesWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MemberAttributesWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MembersReflectableAttributeWorks:static start.*/
                MembersReflectableAttributeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MembersReflectableAttributeWorks()", $t.Line = "2132", $t));
                    t.Fixture.MembersReflectableAttributeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.MembersReflectableAttributeWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Reflection.ReflectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/ReflectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ReflectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToLocalVariables:static start.*/
                CanUseReferenceToLocalVariables: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToLocalVariables()", $t.Line = "21", $t));
                    t.Fixture.CanUseReferenceToLocalVariables();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToLocalVariables:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToField:static start.*/
                CanUseReferenceToField: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToField()", $t.Line = "38", $t));
                    t.Fixture.CanUseReferenceToField();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToField:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToOneDimensionalArray:static start.*/
                CanUseReferenceToOneDimensionalArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToOneDimensionalArray()", $t.Line = "59", $t));
                    t.Fixture.CanUseReferenceToOneDimensionalArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToOneDimensionalArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToMultiDimensionalArray:static start.*/
                CanUseReferenceToMultiDimensionalArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToMultiDimensionalArray()", $t.Line = "74", $t));
                    t.Fixture.CanUseReferenceToMultiDimensionalArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToMultiDimensionalArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToThis_SPI_1569:static start.*/
                CanUseReferenceToThis_SPI_1569: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.RefParameterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RefParameterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanUseReferenceToThis_SPI_1569()", $t.Line = "152", $t));
                    t.Fixture.CanUseReferenceToThis_SPI_1569();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.CanUseReferenceToThis_SPI_1569:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.RefParameterTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/RefParameterTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RefParameterTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest1:static start.*/
                MsdnSimpleAlternationTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSimpleAlternationTest1()", $t.Line = "13", $t));
                    t.Fixture.MsdnSimpleAlternationTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest2:static start.*/
                MsdnSimpleAlternationTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSimpleAlternationTest2()", $t.Line = "25", $t));
                    t.Fixture.MsdnSimpleAlternationTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest3:static start.*/
                MsdnSimpleAlternationTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSimpleAlternationTest3()", $t.Line = "50", $t));
                    t.Fixture.MsdnSimpleAlternationTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnSimpleAlternationTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationExprTest1:static start.*/
                MsdnAlternationExprTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAlternationExprTest1()", $t.Line = "81", $t));
                    t.Fixture.MsdnAlternationExprTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationExprTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationExprTest2:static start.*/
                MsdnAlternationExprTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAlternationExprTest2()", $t.Line = "106", $t));
                    t.Fixture.MsdnAlternationExprTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationExprTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNameExprTest1:static start.*/
                MsdnAlternationGroupNameExprTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAlternationGroupNameExprTest1()", $t.Line = "131", $t));
                    t.Fixture.MsdnAlternationGroupNameExprTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNameExprTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNameExprTest2:static start.*/
                MsdnAlternationGroupNameExprTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAlternationGroupNameExprTest2()", $t.Line = "161", $t));
                    t.Fixture.MsdnAlternationGroupNameExprTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNameExprTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNumberExprTest:static start.*/
                MsdnAlternationGroupNumberExprTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAlternationGroupNumberExprTest()", $t.Line = "191", $t));
                    t.Fixture.MsdnAlternationGroupNumberExprTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.MsdnAlternationGroupNumberExprTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest:static start.*/
                SimpleAlternationTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleAlternationTest()", $t.Line = "223", $t));
                    t.Fixture.SimpleAlternationTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest2:static start.*/
                SimpleAlternationTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleAlternationTest2()", $t.Line = "264", $t));
                    t.Fixture.SimpleAlternationTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest3:static start.*/
                SimpleAlternationTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleAlternationTest3()", $t.Line = "283", $t));
                    t.Fixture.SimpleAlternationTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.SimpleAlternationTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationWithGroupTest:static start.*/
                AlternationWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationWithGroupTest()", $t.Line = "325", $t));
                    t.Fixture.AlternationWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupTest:static start.*/
                AlternationGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupTest()", $t.Line = "348", $t));
                    t.Fixture.AlternationGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonCapturingTest:static start.*/
                AlternationGroupNonCapturingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNonCapturingTest()", $t.Line = "362", $t));
                    t.Fixture.AlternationGroupNonCapturingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonCapturingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookaheadTest:static start.*/
                AlternationGroupPositiveLookaheadTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupPositiveLookaheadTest()", $t.Line = "376", $t));
                    t.Fixture.AlternationGroupPositiveLookaheadTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookaheadTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadTest1:static start.*/
                AlternationGroupNegativeLookaheadTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookaheadTest1()", $t.Line = "390", $t));
                    t.Fixture.AlternationGroupNegativeLookaheadTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadTest2:static start.*/
                AlternationGroupNegativeLookaheadTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookaheadTest2()", $t.Line = "404", $t));
                    t.Fixture.AlternationGroupNegativeLookaheadTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookbehindTest:static start.*/
                AlternationGroupPositiveLookbehindTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupPositiveLookbehindTest()", $t.Line = "417", $t));
                    t.Fixture.AlternationGroupPositiveLookbehindTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookbehindTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindTest1:static start.*/
                AlternationGroupNegativeLookbehindTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookbehindTest1()", $t.Line = "431", $t));
                    t.Fixture.AlternationGroupNegativeLookbehindTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindTest2:static start.*/
                AlternationGroupNegativeLookbehindTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookbehindTest2()", $t.Line = "445", $t));
                    t.Fixture.AlternationGroupNegativeLookbehindTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonBacktrackingTest:static start.*/
                AlternationGroupNonBacktrackingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNonBacktrackingTest()", $t.Line = "459", $t));
                    t.Fixture.AlternationGroupNonBacktrackingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonBacktrackingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupCommentTest:static start.*/
                AlternationGroupCommentTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupCommentTest()", $t.Line = "473", $t));
                    t.Fixture.AlternationGroupCommentTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupCommentTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithNameInConditionTest:static start.*/
                AlternationGroupWithNameInConditionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithNameInConditionTest()", $t.Line = "485", $t));
                    t.Fixture.AlternationGroupWithNameInConditionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithNameInConditionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithIncorrectRefTest1:static start.*/
                AlternationGroupWithIncorrectRefTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithIncorrectRefTest1()", $t.Line = "497", $t));
                    t.Fixture.AlternationGroupWithIncorrectRefTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithIncorrectRefTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithIncorrectRefTest2:static start.*/
                AlternationGroupWithIncorrectRefTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithIncorrectRefTest2()", $t.Line = "509", $t));
                    t.Fixture.AlternationGroupWithIncorrectRefTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithIncorrectRefTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest1:static start.*/
                AlternationGroupWithImnsxTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithImnsxTest1()", $t.Line = "521", $t));
                    t.Fixture.AlternationGroupWithImnsxTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest2:static start.*/
                AlternationGroupWithImnsxTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithImnsxTest2()", $t.Line = "535", $t));
                    t.Fixture.AlternationGroupWithImnsxTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest3:static start.*/
                AlternationGroupWithImnsxTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithImnsxTest3()", $t.Line = "548", $t));
                    t.Fixture.AlternationGroupWithImnsxTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest1:static start.*/
                AlternationConditionWithGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationConditionWithGroupTest1()", $t.Line = "562", $t));
                    t.Fixture.AlternationConditionWithGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest2:static start.*/
                AlternationConditionWithGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationConditionWithGroupTest2()", $t.Line = "579", $t));
                    t.Fixture.AlternationConditionWithGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest3:static start.*/
                AlternationConditionWithGroupTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationConditionWithGroupTest3()", $t.Line = "596", $t));
                    t.Fixture.AlternationConditionWithGroupTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest4:static start.*/
                AlternationConditionWithGroupTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationConditionWithGroupTest4()", $t.Line = "615", $t));
                    t.Fixture.AlternationConditionWithGroupTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest5:static start.*/
                AlternationConditionWithGroupTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationConditionWithGroupTest5()", $t.Line = "634", $t));
                    t.Fixture.AlternationConditionWithGroupTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationConditionWithGroupTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonCapturingWithGroupTest:static start.*/
                AlternationGroupNonCapturingWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNonCapturingWithGroupTest()", $t.Line = "656", $t));
                    t.Fixture.AlternationGroupNonCapturingWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonCapturingWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookaheadWithGroupTest:static start.*/
                AlternationGroupPositiveLookaheadWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupPositiveLookaheadWithGroupTest()", $t.Line = "672", $t));
                    t.Fixture.AlternationGroupPositiveLookaheadWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookaheadWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadWithGroupTest:static start.*/
                AlternationGroupNegativeLookaheadWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookaheadWithGroupTest()", $t.Line = "688", $t));
                    t.Fixture.AlternationGroupNegativeLookaheadWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookaheadWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookbehindWithGroupTest:static start.*/
                AlternationGroupPositiveLookbehindWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupPositiveLookbehindWithGroupTest()", $t.Line = "703", $t));
                    t.Fixture.AlternationGroupPositiveLookbehindWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupPositiveLookbehindWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindWithGroupTest:static start.*/
                AlternationGroupNegativeLookbehindWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNegativeLookbehindWithGroupTest()", $t.Line = "719", $t));
                    t.Fixture.AlternationGroupNegativeLookbehindWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNegativeLookbehindWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonBacktrackingWithGroupTest:static start.*/
                AlternationGroupNonBacktrackingWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupNonBacktrackingWithGroupTest()", $t.Line = "735", $t));
                    t.Fixture.AlternationGroupNonBacktrackingWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupNonBacktrackingWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxAndGroupTest:static start.*/
                AlternationGroupWithImnsxAndGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithImnsxAndGroupTest()", $t.Line = "751", $t));
                    t.Fixture.AlternationGroupWithImnsxAndGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithImnsxAndGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest1:static start.*/
                AlternationGroupWithoutAlternativeBranchTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithoutAlternativeBranchTest1()", $t.Line = "767", $t));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest2:static start.*/
                AlternationGroupWithoutAlternativeBranchTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithoutAlternativeBranchTest2()", $t.Line = "802", $t));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchExceptionTest:static start.*/
                AlternationGroupWithoutAlternativeBranchExceptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AlternationGroupWithoutAlternativeBranchExceptionTest()", $t.Line = "879", $t));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchExceptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.AlternationGroupWithoutAlternativeBranchExceptionTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexAlternationTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAlternationTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOrLineTest:static start.*/
                MsdnStartOfStringOrLineTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnStartOfStringOrLineTest()", $t.Line = "14", $t));
                    t.Fixture.MsdnStartOfStringOrLineTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOrLineTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOrLineMultilineModeTest:static start.*/
                MsdnStartOfStringOrLineMultilineModeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnStartOfStringOrLineMultilineModeTest()", $t.Line = "52", $t));
                    t.Fixture.MsdnStartOfStringOrLineMultilineModeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOrLineMultilineModeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest1:static start.*/
                MsdnEndOfStringOrLineTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOrLineTest1()", $t.Line = "97", $t));
                    t.Fixture.MsdnEndOfStringOrLineTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest2:static start.*/
                MsdnEndOfStringOrLineTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOrLineTest2()", $t.Line = "140", $t));
                    t.Fixture.MsdnEndOfStringOrLineTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest3:static start.*/
                MsdnEndOfStringOrLineTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOrLineTest3()", $t.Line = "187", $t));
                    t.Fixture.MsdnEndOfStringOrLineTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest4:static start.*/
                MsdnEndOfStringOrLineTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOrLineTest4()", $t.Line = "231", $t));
                    t.Fixture.MsdnEndOfStringOrLineTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrLineTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOnlyTest:static start.*/
                MsdnStartOfStringOnlyTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnStartOfStringOnlyTest()", $t.Line = "283", $t));
                    t.Fixture.MsdnStartOfStringOnlyTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnStartOfStringOnlyTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrNewlineTest:static start.*/
                MsdnEndOfStringOrNewlineTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOrNewlineTest()", $t.Line = "324", $t));
                    t.Fixture.MsdnEndOfStringOrNewlineTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOrNewlineTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOnlyTest:static start.*/
                MsdnEndOfStringOnlyTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEndOfStringOnlyTest()", $t.Line = "350", $t));
                    t.Fixture.MsdnEndOfStringOnlyTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnEndOfStringOnlyTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnContiguousMatchesTest:static start.*/
                MsdnContiguousMatchesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnContiguousMatchesTest()", $t.Line = "376", $t));
                    t.Fixture.MsdnContiguousMatchesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnContiguousMatchesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnWordBoundaryTest:static start.*/
                MsdnWordBoundaryTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnWordBoundaryTest()", $t.Line = "414", $t));
                    t.Fixture.MsdnWordBoundaryTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnWordBoundaryTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnNonWordBoundaryTest:static start.*/
                MsdnNonWordBoundaryTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonWordBoundaryTest()", $t.Line = "435", $t));
                    t.Fixture.MsdnNonWordBoundaryTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.MsdnNonWordBoundaryTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.StartAndEndOfStringCustomTest1:static start.*/
                StartAndEndOfStringCustomTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartAndEndOfStringCustomTest1()", $t.Line = "459", $t));
                    t.Fixture.StartAndEndOfStringCustomTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.StartAndEndOfStringCustomTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.StartAndEndOfStringCustomTest2:static start.*/
                StartAndEndOfStringCustomTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartAndEndOfStringCustomTest2()", $t.Line = "484", $t));
                    t.Fixture.StartAndEndOfStringCustomTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.StartAndEndOfStringCustomTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOrNewlineCustomTest1:static start.*/
                EndOfStringOrNewlineCustomTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStringOrNewlineCustomTest1()", $t.Line = "523", $t));
                    t.Fixture.EndOfStringOrNewlineCustomTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOrNewlineCustomTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOrNewlineCustomTest2:static start.*/
                EndOfStringOrNewlineCustomTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStringOrNewlineCustomTest2()", $t.Line = "543", $t));
                    t.Fixture.EndOfStringOrNewlineCustomTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOrNewlineCustomTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest1:static start.*/
                EndOfStringOnlyCustomTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStringOnlyCustomTest1()", $t.Line = "563", $t));
                    t.Fixture.EndOfStringOnlyCustomTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest2:static start.*/
                EndOfStringOnlyCustomTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStringOnlyCustomTest2()", $t.Line = "583", $t));
                    t.Fixture.EndOfStringOnlyCustomTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest3:static start.*/
                EndOfStringOnlyCustomTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStringOnlyCustomTest3()", $t.Line = "603", $t));
                    t.Fixture.EndOfStringOnlyCustomTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.EndOfStringOnlyCustomTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.ContiguousMatchesCustomTest1:static start.*/
                ContiguousMatchesCustomTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContiguousMatchesCustomTest1()", $t.Line = "623", $t));
                    t.Fixture.ContiguousMatchesCustomTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.ContiguousMatchesCustomTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.ContiguousMatchesCustomTest2:static start.*/
                ContiguousMatchesCustomTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContiguousMatchesCustomTest2()", $t.Line = "642", $t));
                    t.Fixture.ContiguousMatchesCustomTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.ContiguousMatchesCustomTest2:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexAnchorsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexAnchorsTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNumberedBackrefTest:static start.*/
                MsdnNumberedBackrefTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNumberedBackrefTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnNumberedBackrefTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNumberedBackrefTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefTest:static start.*/
                MsdnNamedBackrefTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNamedBackrefTest()", $t.Line = "68", $t));
                    t.Fixture.MsdnNamedBackrefTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithNumberAsNameTest:static start.*/
                MsdnNamedBackrefWithNumberAsNameTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNamedBackrefWithNumberAsNameTest()", $t.Line = "124", $t));
                    t.Fixture.MsdnNamedBackrefWithNumberAsNameTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithNumberAsNameTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithRedefinedGroupTest:static start.*/
                MsdnNamedBackrefWithRedefinedGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNamedBackrefWithRedefinedGroupTest()", $t.Line = "185", $t));
                    t.Fixture.MsdnNamedBackrefWithRedefinedGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithRedefinedGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest1:static start.*/
                MsdnNamedBackrefWithEmptyCaptureTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNamedBackrefWithEmptyCaptureTest1()", $t.Line = "204", $t));
                    t.Fixture.MsdnNamedBackrefWithEmptyCaptureTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest2:static start.*/
                MsdnNamedBackrefWithEmptyCaptureTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNamedBackrefWithEmptyCaptureTest2()", $t.Line = "227", $t));
                    t.Fixture.MsdnNamedBackrefWithEmptyCaptureTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToUnreachableGroupTest:static start.*/
                NamedBackrefToUnreachableGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedBackrefToUnreachableGroupTest()", $t.Line = "251", $t));
                    t.Fixture.NamedBackrefToUnreachableGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToUnreachableGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToSelfGroupTest:static start.*/
                NamedBackrefToSelfGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedBackrefToSelfGroupTest()", $t.Line = "268", $t));
                    t.Fixture.NamedBackrefToSelfGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToSelfGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToParentGroupTest:static start.*/
                NamedBackrefToParentGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedBackrefToParentGroupTest()", $t.Line = "283", $t));
                    t.Fixture.NamedBackrefToParentGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefToParentGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefTest:static start.*/
                NumberedBackrefTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NumberedBackrefTest()", $t.Line = "300", $t));
                    t.Fixture.NumberedBackrefTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefInGroupTest:static start.*/
                NumberedBackrefInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NumberedBackrefInGroupTest()", $t.Line = "320", $t));
                    t.Fixture.NumberedBackrefInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefInGroupTest:static start.*/
                NamedBackrefInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedBackrefInGroupTest()", $t.Line = "343", $t));
                    t.Fixture.NamedBackrefInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefRecursiveGroupTest:static start.*/
                NumberedBackrefRecursiveGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NumberedBackrefRecursiveGroupTest()", $t.Line = "366", $t));
                    t.Fixture.NumberedBackrefRecursiveGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NumberedBackrefRecursiveGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefRecursiveGroupTest:static start.*/
                NamedBackrefRecursiveGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedBackrefRecursiveGroupTest()", $t.Line = "386", $t));
                    t.Fixture.NamedBackrefRecursiveGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.NamedBackrefRecursiveGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.ComplexBackrefTest1:static start.*/
                ComplexBackrefTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ComplexBackrefTest1()", $t.Line = "406", $t));
                    t.Fixture.ComplexBackrefTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.ComplexBackrefTest1:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexBackreferenceTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBackreferenceTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.MsdnBalancingGroupTest1:static start.*/
                MsdnBalancingGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnBalancingGroupTest1()", $t.Line = "13", $t));
                    t.Fixture.MsdnBalancingGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.MsdnBalancingGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.MsdnBalancingGroupTest2:static start.*/
                MsdnBalancingGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnBalancingGroupTest2()", $t.Line = "48", $t));
                    t.Fixture.MsdnBalancingGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.MsdnBalancingGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupTest:static start.*/
                BalancingGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupTest()", $t.Line = "106", $t));
                    t.Fixture.BalancingGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithoutName1Test:static start.*/
                BalancingGroupWithoutName1Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupWithoutName1Test()", $t.Line = "125", $t));
                    t.Fixture.BalancingGroupWithoutName1Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithoutName1Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithQuantifierTest:static start.*/
                BalancingGroupWithQuantifierTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupWithQuantifierTest()", $t.Line = "143", $t));
                    t.Fixture.BalancingGroupWithQuantifierTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithQuantifierTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithEmptyIntervalTest:static start.*/
                BalancingGroupWithEmptyIntervalTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupWithEmptyIntervalTest()", $t.Line = "164", $t));
                    t.Fixture.BalancingGroupWithEmptyIntervalTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithEmptyIntervalTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupStackApproachTest:static start.*/
                BalancingGroupStackApproachTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupStackApproachTest()", $t.Line = "181", $t));
                    t.Fixture.BalancingGroupStackApproachTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupStackApproachTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest1:static start.*/
                BalancingGroupWithNumberReferenceTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupWithNumberReferenceTest1()", $t.Line = "203", $t));
                    t.Fixture.BalancingGroupWithNumberReferenceTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest2:static start.*/
                BalancingGroupWithNumberReferenceTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupWithNumberReferenceTest2()", $t.Line = "221", $t));
                    t.Fixture.BalancingGroupWithNumberReferenceTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest1:static start.*/
                BalancingGroupIncorrectReferenceTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupIncorrectReferenceTest1()", $t.Line = "242", $t));
                    t.Fixture.BalancingGroupIncorrectReferenceTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest2:static start.*/
                BalancingGroupIncorrectReferenceTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BalancingGroupIncorrectReferenceTest2()", $t.Line = "254", $t));
                    t.Fixture.BalancingGroupIncorrectReferenceTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest2:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexBalancingGroupsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexBalancingGroupsTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaseDataTest:static start.*/
                CaseDataTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaseDataTest()", $t.Line = "28", $t));
                    t.Fixture.CaseDataTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaseDataTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionFieldsTest:static start.*/
                CaptureCollectionFieldsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaptureCollectionFieldsTest()", $t.Line = "60", $t));
                    t.Fixture.CaptureCollectionFieldsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionFieldsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionForeachTest:static start.*/
                CaptureCollectionForeachTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaptureCollectionForeachTest()", $t.Line = "73", $t));
                    t.Fixture.CaptureCollectionForeachTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionForeachTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionEnumeratorTest:static start.*/
                CaptureCollectionEnumeratorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaptureCollectionEnumeratorTest()", $t.Line = "89", $t));
                    t.Fixture.CaptureCollectionEnumeratorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionEnumeratorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionCopyToTest:static start.*/
                CaptureCollectionCopyToTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaptureCollectionCopyToTest()", $t.Line = "111", $t));
                    t.Fixture.CaptureCollectionCopyToTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.CaptureCollectionCopyToTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexCaptureCollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCaptureCollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharGroupTest1:static start.*/
                MsdnCharGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnCharGroupTest1()", $t.Line = "13", $t));
                    t.Fixture.MsdnCharGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharGroupTest3:static start.*/
                MsdnCharGroupTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnCharGroupTest3()", $t.Line = "66", $t));
                    t.Fixture.MsdnCharGroupTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharGroupTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNegativeCharGroupTest1:static start.*/
                MsdnNegativeCharGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNegativeCharGroupTest1()", $t.Line = "105", $t));
                    t.Fixture.MsdnNegativeCharGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNegativeCharGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNegativeCharGroupTest2:static start.*/
                MsdnNegativeCharGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNegativeCharGroupTest2()", $t.Line = "137", $t));
                    t.Fixture.MsdnNegativeCharGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNegativeCharGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest1:static start.*/
                MsdnDotCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDotCharTest1()", $t.Line = "183", $t));
                    t.Fixture.MsdnDotCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest2:static start.*/
                MsdnDotCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDotCharTest2()", $t.Line = "197", $t));
                    t.Fixture.MsdnDotCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest3:static start.*/
                MsdnDotCharTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDotCharTest3()", $t.Line = "211", $t));
                    t.Fixture.MsdnDotCharTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDotCharTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharRangeInGroupTest:static start.*/
                MsdnCharRangeInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnCharRangeInGroupTest()", $t.Line = "225", $t));
                    t.Fixture.MsdnCharRangeInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnCharRangeInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnWordCharTest1:static start.*/
                MsdnWordCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnWordCharTest1()", $t.Line = "434", $t));
                    t.Fixture.MsdnWordCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnWordCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnWordCharTest2:static start.*/
                MsdnWordCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnWordCharTest2()", $t.Line = "480", $t));
                    t.Fixture.MsdnWordCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnWordCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonWordCharTest1:static start.*/
                MsdnNonWordCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonWordCharTest1()", $t.Line = "497", $t));
                    t.Fixture.MsdnNonWordCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonWordCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonWordCharTest2:static start.*/
                MsdnNonWordCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonWordCharTest2()", $t.Line = "522", $t));
                    t.Fixture.MsdnNonWordCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonWordCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSpaceCharTest1:static start.*/
                MsdnSpaceCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSpaceCharTest1()", $t.Line = "678", $t));
                    t.Fixture.MsdnSpaceCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSpaceCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSpaceCharTest2:static start.*/
                MsdnSpaceCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSpaceCharTest2()", $t.Line = "692", $t));
                    t.Fixture.MsdnSpaceCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSpaceCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonSpaceCharTest1:static start.*/
                MsdnNonSpaceCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonSpaceCharTest1()", $t.Line = "751", $t));
                    t.Fixture.MsdnNonSpaceCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonSpaceCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonSpaceCharTest2:static start.*/
                MsdnNonSpaceCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonSpaceCharTest2()", $t.Line = "765", $t));
                    t.Fixture.MsdnNonSpaceCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonSpaceCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest1:static start.*/
                MsdnDigitCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDigitCharTest1()", $t.Line = "1006", $t));
                    t.Fixture.MsdnDigitCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest2:static start.*/
                MsdnDigitCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDigitCharTest2()", $t.Line = "1020", $t));
                    t.Fixture.MsdnDigitCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest3:static start.*/
                MsdnDigitCharTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnDigitCharTest3()", $t.Line = "1037", $t));
                    t.Fixture.MsdnDigitCharTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnDigitCharTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest1:static start.*/
                MsdnNonDigitCharTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonDigitCharTest1()", $t.Line = "1052", $t));
                    t.Fixture.MsdnNonDigitCharTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest2:static start.*/
                MsdnNonDigitCharTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonDigitCharTest2()", $t.Line = "1098", $t));
                    t.Fixture.MsdnNonDigitCharTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest3:static start.*/
                MsdnNonDigitCharTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonDigitCharTest3()", $t.Line = "1112", $t));
                    t.Fixture.MsdnNonDigitCharTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnNonDigitCharTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest1:static start.*/
                MsdnSubstactGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSubstactGroupTest1()", $t.Line = "1125", $t));
                    t.Fixture.MsdnSubstactGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest2:static start.*/
                MsdnSubstactGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSubstactGroupTest2()", $t.Line = "1138", $t));
                    t.Fixture.MsdnSubstactGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest3:static start.*/
                MsdnSubstactGroupTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSubstactGroupTest3()", $t.Line = "1152", $t));
                    t.Fixture.MsdnSubstactGroupTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest4:static start.*/
                MsdnSubstactGroupTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSubstactGroupTest4()", $t.Line = "1165", $t));
                    t.Fixture.MsdnSubstactGroupTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.MsdnSubstactGroupTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassesInCharGroupTest:static start.*/
                CharClassesInCharGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharClassesInCharGroupTest()", $t.Line = "1181", $t));
                    t.Fixture.CharClassesInCharGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassesInCharGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CaretSymbolInCharGroupTest:static start.*/
                CaretSymbolInCharGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaretSymbolInCharGroupTest()", $t.Line = "1212", $t));
                    t.Fixture.CaretSymbolInCharGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CaretSymbolInCharGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.NegativeCharGroupTest:static start.*/
                NegativeCharGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeCharGroupTest()", $t.Line = "1243", $t));
                    t.Fixture.NegativeCharGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.NegativeCharGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CombiningCharRangesTest:static start.*/
                CombiningCharRangesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombiningCharRangesTest()", $t.Line = "1274", $t));
                    t.Fixture.CombiningCharRangesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CombiningCharRangesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest1:static start.*/
                SubstractGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractGroupTest1()", $t.Line = "1291", $t));
                    t.Fixture.SubstractGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest2:static start.*/
                SubstractGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractGroupTest2()", $t.Line = "1305", $t));
                    t.Fixture.SubstractGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest3:static start.*/
                SubstractGroupTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractGroupTest3()", $t.Line = "1318", $t));
                    t.Fixture.SubstractGroupTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest1:static start.*/
                SubstractNegativeGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractNegativeGroupTest1()", $t.Line = "1332", $t));
                    t.Fixture.SubstractNegativeGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest2:static start.*/
                SubstractNegativeGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractNegativeGroupTest2()", $t.Line = "1346", $t));
                    t.Fixture.SubstractNegativeGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest3:static start.*/
                SubstractNegativeGroupTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractNegativeGroupTest3()", $t.Line = "1359", $t));
                    t.Fixture.SubstractNegativeGroupTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNegativeGroupTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNestedGroupsTest1:static start.*/
                SubstractNestedGroupsTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractNestedGroupsTest1()", $t.Line = "1373", $t));
                    t.Fixture.SubstractNestedGroupsTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNestedGroupsTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNestedGroupsTest2:static start.*/
                SubstractNestedGroupsTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractNestedGroupsTest2()", $t.Line = "1419", $t));
                    t.Fixture.SubstractNestedGroupsTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractNestedGroupsTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupIsNotLastTest:static start.*/
                SubstractGroupIsNotLastTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstractGroupIsNotLastTest()", $t.Line = "1458", $t));
                    t.Fixture.SubstractGroupIsNotLastTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.SubstractGroupIsNotLastTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithEscapedBracketInGroupTest:static start.*/
                CharClassWithEscapedBracketInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharClassWithEscapedBracketInGroupTest()", $t.Line = "1471", $t));
                    t.Fixture.CharClassWithEscapedBracketInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithEscapedBracketInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithEscapedSquareBracketInGroupTest:static start.*/
                CharClassWithEscapedSquareBracketInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharClassWithEscapedSquareBracketInGroupTest()", $t.Line = "1506", $t));
                    t.Fixture.CharClassWithEscapedSquareBracketInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithEscapedSquareBracketInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithUnescapedBracketInGroupTest:static start.*/
                CharClassWithUnescapedBracketInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharClassWithUnescapedBracketInGroupTest()", $t.Line = "1541", $t));
                    t.Fixture.CharClassWithUnescapedBracketInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithUnescapedBracketInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithUnescapedSquareBracketInGroupTest:static start.*/
                CharClassWithUnescapedSquareBracketInGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharClassWithUnescapedSquareBracketInGroupTest()", $t.Line = "1576", $t));
                    t.Fixture.CharClassWithUnescapedSquareBracketInGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.CharClassWithUnescapedSquareBracketInGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.EmptyRangeTest:static start.*/
                EmptyRangeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyRangeTest()", $t.Line = "1611", $t));
                    t.Fixture.EmptyRangeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.EmptyRangeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.ClosingSquareBracketTest1:static start.*/
                ClosingSquareBracketTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClosingSquareBracketTest1()", $t.Line = "1624", $t));
                    t.Fixture.ClosingSquareBracketTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.ClosingSquareBracketTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.ClosingSquareBracketTest2:static start.*/
                ClosingSquareBracketTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClosingSquareBracketTest2()", $t.Line = "1649", $t));
                    t.Fixture.ClosingSquareBracketTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.ClosingSquareBracketTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.OpeningSquareBracketTest1:static start.*/
                OpeningSquareBracketTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OpeningSquareBracketTest1()", $t.Line = "1663", $t));
                    t.Fixture.OpeningSquareBracketTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.OpeningSquareBracketTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.OpeningSquareBracketTest2:static start.*/
                OpeningSquareBracketTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OpeningSquareBracketTest2()", $t.Line = "1688", $t));
                    t.Fixture.OpeningSquareBracketTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.OpeningSquareBracketTest2:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexCharClassesTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexCharClassesTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.CaseDataTest:static start.*/
                CaseDataTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaseDataTest()", $t.Line = "29", $t));
                    t.Fixture.CaseDataTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.CaseDataTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetGroupNamesTest:static start.*/
                GetGroupNamesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGroupNamesTest()", $t.Line = "61", $t));
                    t.Fixture.GetGroupNamesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetGroupNamesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetGroupNumbersTest:static start.*/
                GetGroupNumbersTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGroupNumbersTest()", $t.Line = "101", $t));
                    t.Fixture.GetGroupNumbersTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetGroupNumbersTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupNameFromNumberTest:static start.*/
                GroupNameFromNumberTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupNameFromNumberTest()", $t.Line = "141", $t));
                    t.Fixture.GroupNameFromNumberTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupNameFromNumberTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupNumberFromNameTest:static start.*/
                GroupNumberFromNameTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupNumberFromNameTest()", $t.Line = "189", $t));
                    t.Fixture.GroupNumberFromNameTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupNumberFromNameTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.SupportedOptionsTest:static start.*/
                SupportedOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SupportedOptionsTest()", $t.Line = "237", $t));
                    t.Fixture.SupportedOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.SupportedOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchNamedGroupTest:static start.*/
                MatchNamedGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchNamedGroupTest()", $t.Line = "255", $t));
                    t.Fixture.MatchNamedGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchNamedGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchInnerNamedGroupTest1:static start.*/
                MatchInnerNamedGroupTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchInnerNamedGroupTest1()", $t.Line = "277", $t));
                    t.Fixture.MatchInnerNamedGroupTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchInnerNamedGroupTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchInnerNamedGroupTest2:static start.*/
                MatchInnerNamedGroupTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchInnerNamedGroupTest2()", $t.Line = "302", $t));
                    t.Fixture.MatchInnerNamedGroupTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.MatchInnerNamedGroupTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupOrderingTest:static start.*/
                GroupOrderingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupOrderingTest()", $t.Line = "335", $t));
                    t.Fixture.GroupOrderingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GroupOrderingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.RepeatingGroupTest:static start.*/
                RepeatingGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RepeatingGroupTest()", $t.Line = "373", $t));
                    t.Fixture.RepeatingGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.RepeatingGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.ZeroResultTest:static start.*/
                ZeroResultTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroResultTest()", $t.Line = "403", $t));
                    t.Fixture.ZeroResultTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.ZeroResultTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.NonCapturingGroupsTest:static start.*/
                NonCapturingGroupsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonCapturingGroupsTest()", $t.Line = "448", $t));
                    t.Fixture.NonCapturingGroupsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.NonCapturingGroupsTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexEntityTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEntityTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnBellCharTest:static start.*/
                MsdnBellCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnBellCharTest()", $t.Line = "13", $t));
                    t.Fixture.MsdnBellCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnBellCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnBackspaceCharTest:static start.*/
                MsdnBackspaceCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnBackspaceCharTest()", $t.Line = "27", $t));
                    t.Fixture.MsdnBackspaceCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnBackspaceCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnTabCharTest:static start.*/
                MsdnTabCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnTabCharTest()", $t.Line = "41", $t));
                    t.Fixture.MsdnTabCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnTabCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnCarriageRetCharTest:static start.*/
                MsdnCarriageRetCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnCarriageRetCharTest()", $t.Line = "72", $t));
                    t.Fixture.MsdnCarriageRetCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnCarriageRetCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnVerticalTabCharTest:static start.*/
                MsdnVerticalTabCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnVerticalTabCharTest()", $t.Line = "89", $t));
                    t.Fixture.MsdnVerticalTabCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnVerticalTabCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnFormFeedCharTest:static start.*/
                MsdnFormFeedCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnFormFeedCharTest()", $t.Line = "103", $t));
                    t.Fixture.MsdnFormFeedCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnFormFeedCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnNewLineCharTest:static start.*/
                MsdnNewLineCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNewLineCharTest()", $t.Line = "117", $t));
                    t.Fixture.MsdnNewLineCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnNewLineCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnEscapeCharTest:static start.*/
                MsdnEscapeCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEscapeCharTest()", $t.Line = "134", $t));
                    t.Fixture.MsdnEscapeCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnEscapeCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnOctalEscapeTest:static start.*/
                MsdnOctalEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnOctalEscapeTest()", $t.Line = "148", $t));
                    t.Fixture.MsdnOctalEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnOctalEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnHexEscapeTest:static start.*/
                MsdnHexEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnHexEscapeTest()", $t.Line = "173", $t));
                    t.Fixture.MsdnHexEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnHexEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnAsciiEscapeTest:static start.*/
                MsdnAsciiEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnAsciiEscapeTest()", $t.Line = "198", $t));
                    t.Fixture.MsdnAsciiEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnAsciiEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnUnicodeEscapeTest:static start.*/
                MsdnUnicodeEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnUnicodeEscapeTest()", $t.Line = "212", $t));
                    t.Fixture.MsdnUnicodeEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnUnicodeEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnSpecialEscapesTest:static start.*/
                MsdnSpecialEscapesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSpecialEscapesTest()", $t.Line = "237", $t));
                    t.Fixture.MsdnSpecialEscapesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnSpecialEscapesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnCharEscapesExampleTest:static start.*/
                MsdnCharEscapesExampleTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnCharEscapesExampleTest()", $t.Line = "262", $t));
                    t.Fixture.MsdnCharEscapesExampleTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.MsdnCharEscapesExampleTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.CharEscapesTest:static start.*/
                CharEscapesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharEscapesTest()", $t.Line = "340", $t));
                    t.Fixture.CharEscapesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.CharEscapesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.RangeWithCharEscapesTest:static start.*/
                RangeWithCharEscapesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RangeWithCharEscapesTest()", $t.Line = "463", $t));
                    t.Fixture.RangeWithCharEscapesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.RangeWithCharEscapesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.ControlCharsTestUpperTest:static start.*/
                ControlCharsTestUpperTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ControlCharsTestUpperTest()", $t.Line = "594", $t));
                    t.Fixture.ControlCharsTestUpperTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.ControlCharsTestUpperTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.ControlCharsTestLowerTest:static start.*/
                ControlCharsTestLowerTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ControlCharsTestLowerTest()", $t.Line = "829", $t));
                    t.Fixture.ControlCharsTestLowerTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.ControlCharsTestLowerTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.BasicLatinEscapeTest:static start.*/
                BasicLatinEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BasicLatinEscapeTest()", $t.Line = "1064", $t));
                    t.Fixture.BasicLatinEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.BasicLatinEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.OctalEscapeTest:static start.*/
                OctalEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OctalEscapeTest()", $t.Line = "1099", $t));
                    t.Fixture.OctalEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.OctalEscapeTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexEscapesTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapesTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.MsdnEscapeTest:static start.*/
                MsdnEscapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnEscapeTest()", $t.Line = "14", $t));
                    t.Fixture.MsdnEscapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.MsdnEscapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.MsdnUnescapeTest:static start.*/
                MsdnUnescapeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnUnescapeTest()", $t.Line = "43", $t));
                    t.Fixture.MsdnUnescapeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.MsdnUnescapeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.EscapeCharSetTest:static start.*/
                EscapeCharSetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EscapeCharSetTest()", $t.Line = "55", $t));
                    t.Fixture.EscapeCharSetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.EscapeCharSetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.NonEscapeCharSetTest:static start.*/
                NonEscapeCharSetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonEscapeCharSetTest()", $t.Line = "73", $t));
                    t.Fixture.NonEscapeCharSetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.NonEscapeCharSetTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexEscapeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexEscapeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.EmailParseTest:static start.*/
                EmailParseTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmailParseTest()", $t.Line = "10", $t));
                    t.Fixture.EmailParseTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.EmailParseTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.PhoneParseTest:static start.*/
                PhoneParseTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PhoneParseTest()", $t.Line = "25", $t));
                    t.Fixture.PhoneParseTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.PhoneParseTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.PasswordValidationTest:static start.*/
                PasswordValidationTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PasswordValidationTest()", $t.Line = "39", $t));
                    t.Fixture.PasswordValidationTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.PasswordValidationTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.WordSlplittingTest:static start.*/
                WordSlplittingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WordSlplittingTest()", $t.Line = "56", $t));
                    t.Fixture.WordSlplittingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.WordSlplittingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.IpAddressValidationTest:static start.*/
                IpAddressValidationTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IpAddressValidationTest()", $t.Line = "117", $t));
                    t.Fixture.IpAddressValidationTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.IpAddressValidationTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.EscapeQuotedWordsTest:static start.*/
                EscapeQuotedWordsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EscapeQuotedWordsTest()", $t.Line = "143", $t));
                    t.Fixture.EscapeQuotedWordsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.EscapeQuotedWordsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.CreditCardExpirationParsingTest:static start.*/
                CreditCardExpirationParsingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreditCardExpirationParsingTest()", $t.Line = "180", $t));
                    t.Fixture.CreditCardExpirationParsingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.CreditCardExpirationParsingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.UrlParsingTest:static start.*/
                UrlParsingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UrlParsingTest()", $t.Line = "203", $t));
                    t.Fixture.UrlParsingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.UrlParsingTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexExamplesTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexExamplesTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.CaseDataTest:static start.*/
                CaseDataTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaseDataTest()", $t.Line = "28", $t));
                    t.Fixture.CaseDataTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.CaseDataTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionFieldsTest:static start.*/
                GroupCollectionFieldsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupCollectionFieldsTest()", $t.Line = "60", $t));
                    t.Fixture.GroupCollectionFieldsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionFieldsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionForeachTest:static start.*/
                GroupCollectionForeachTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupCollectionForeachTest()", $t.Line = "72", $t));
                    t.Fixture.GroupCollectionForeachTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionForeachTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionEnumeratorTest:static start.*/
                GroupCollectionEnumeratorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupCollectionEnumeratorTest()", $t.Line = "87", $t));
                    t.Fixture.GroupCollectionEnumeratorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionEnumeratorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionCopyToTest:static start.*/
                GroupCollectionCopyToTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupCollectionCopyToTest()", $t.Line = "108", $t));
                    t.Fixture.GroupCollectionCopyToTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GroupCollectionCopyToTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexGroupCollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexGroupCollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnInlineOptionsTest:static start.*/
                MsdnInlineOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnInlineOptionsTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnInlineOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnInlineOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIgnoreCaseTest:static start.*/
                MsdnIgnoreCaseTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIgnoreCaseTest()", $t.Line = "43", $t));
                    t.Fixture.MsdnIgnoreCaseTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIgnoreCaseTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnMultilineInlineOptionTest:static start.*/
                MsdnMultilineInlineOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnMultilineInlineOptionTest()", $t.Line = "75", $t));
                    t.Fixture.MsdnMultilineInlineOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnMultilineInlineOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnSinglelineInlineOptionTest:static start.*/
                MsdnSinglelineInlineOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSinglelineInlineOptionTest()", $t.Line = "142", $t));
                    t.Fixture.MsdnSinglelineInlineOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnSinglelineInlineOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest1:static start.*/
                MsdnIngoreWhitespaceInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIngoreWhitespaceInlineOptionTest1()", $t.Line = "156", $t));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest2:static start.*/
                MsdnIngoreWhitespaceInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIngoreWhitespaceInlineOptionTest2()", $t.Line = "176", $t));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest3:static start.*/
                MsdnIngoreWhitespaceInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIngoreWhitespaceInlineOptionTest3()", $t.Line = "196", $t));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest1:static start.*/
                MsdnExplicitCaptureInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnExplicitCaptureInlineOptionTest1()", $t.Line = "265", $t));
                    t.Fixture.MsdnExplicitCaptureInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest2:static start.*/
                MsdnExplicitCaptureInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnExplicitCaptureInlineOptionTest2()", $t.Line = "304", $t));
                    t.Fixture.MsdnExplicitCaptureInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest1:static start.*/
                IgnoreCaseInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseInlineOptionTest1()", $t.Line = "345", $t));
                    t.Fixture.IgnoreCaseInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest2:static start.*/
                IgnoreCaseInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseInlineOptionTest2()", $t.Line = "353", $t));
                    t.Fixture.IgnoreCaseInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest3:static start.*/
                IgnoreCaseInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseInlineOptionTest3()", $t.Line = "361", $t));
                    t.Fixture.IgnoreCaseInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest4:static start.*/
                IgnoreCaseInlineOptionTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseInlineOptionTest4()", $t.Line = "369", $t));
                    t.Fixture.IgnoreCaseInlineOptionTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest5:static start.*/
                IgnoreCaseInlineOptionTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseInlineOptionTest5()", $t.Line = "377", $t));
                    t.Fixture.IgnoreCaseInlineOptionTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IgnoreCaseInlineOptionTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest1:static start.*/
                MultilineInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest1()", $t.Line = "385", $t));
                    t.Fixture.MultilineInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest2:static start.*/
                MultilineInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest2()", $t.Line = "398", $t));
                    t.Fixture.MultilineInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest3:static start.*/
                MultilineInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest3()", $t.Line = "423", $t));
                    t.Fixture.MultilineInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest4:static start.*/
                MultilineInlineOptionTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest4()", $t.Line = "437", $t));
                    t.Fixture.MultilineInlineOptionTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest5:static start.*/
                MultilineInlineOptionTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest5()", $t.Line = "451", $t));
                    t.Fixture.MultilineInlineOptionTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest6:static start.*/
                MultilineInlineOptionTest6: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest6()", $t.Line = "468", $t));
                    t.Fixture.MultilineInlineOptionTest6();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest6:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest7:static start.*/
                MultilineInlineOptionTest7: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineInlineOptionTest7()", $t.Line = "509", $t));
                    t.Fixture.MultilineInlineOptionTest7();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.MultilineInlineOptionTest7:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest1:static start.*/
                SinglelineInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinglelineInlineOptionTest1()", $t.Line = "526", $t));
                    t.Fixture.SinglelineInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest2:static start.*/
                SinglelineInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinglelineInlineOptionTest2()", $t.Line = "540", $t));
                    t.Fixture.SinglelineInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest3:static start.*/
                SinglelineInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinglelineInlineOptionTest3()", $t.Line = "556", $t));
                    t.Fixture.SinglelineInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.SinglelineInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest1:static start.*/
                IngoreWhitespaceInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest1()", $t.Line = "579", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest2:static start.*/
                IngoreWhitespaceInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest2()", $t.Line = "592", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest3:static start.*/
                IngoreWhitespaceInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest3()", $t.Line = "606", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest4:static start.*/
                IngoreWhitespaceInlineOptionTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest4()", $t.Line = "620", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest5:static start.*/
                IngoreWhitespaceInlineOptionTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest5()", $t.Line = "634", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest6:static start.*/
                IngoreWhitespaceInlineOptionTest6: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest6()", $t.Line = "648", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest6();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest6:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest7:static start.*/
                IngoreWhitespaceInlineOptionTest7: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest7()", $t.Line = "662", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest7();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest7:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest8:static start.*/
                IngoreWhitespaceInlineOptionTest8: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest8()", $t.Line = "676", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest8();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest8:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest9:static start.*/
                IngoreWhitespaceInlineOptionTest9: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IngoreWhitespaceInlineOptionTest9()", $t.Line = "690", $t));
                    t.Fixture.IngoreWhitespaceInlineOptionTest9();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest9:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.InlineCommentTest1:static start.*/
                InlineCommentTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InlineCommentTest1()", $t.Line = "704", $t));
                    t.Fixture.InlineCommentTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.InlineCommentTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest1:static start.*/
                ExplicitCaptureInlineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExplicitCaptureInlineOptionTest1()", $t.Line = "718", $t));
                    t.Fixture.ExplicitCaptureInlineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest2:static start.*/
                ExplicitCaptureInlineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExplicitCaptureInlineOptionTest2()", $t.Line = "738", $t));
                    t.Fixture.ExplicitCaptureInlineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest3:static start.*/
                ExplicitCaptureInlineOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExplicitCaptureInlineOptionTest3()", $t.Line = "761", $t));
                    t.Fixture.ExplicitCaptureInlineOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest4:static start.*/
                ExplicitCaptureInlineOptionTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExplicitCaptureInlineOptionTest4()", $t.Line = "784", $t));
                    t.Fixture.ExplicitCaptureInlineOptionTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest4:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexInlineOptionsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexInlineOptionsTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchTest:static start.*/
                IsMatchTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsMatchTest()", $t.Line = "18", $t));
                    t.Fixture.IsMatchTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchWithOffsetTest:static start.*/
                IsMatchWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsMatchWithOffsetTest()", $t.Line = "32", $t));
                    t.Fixture.IsMatchWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchWithOffsetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticTest:static start.*/
                IsMatchStaticTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsMatchStaticTest()", $t.Line = "51", $t));
                    t.Fixture.IsMatchStaticTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticWithOptionsTest:static start.*/
                IsMatchStaticWithOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsMatchStaticWithOptionsTest()", $t.Line = "65", $t));
                    t.Fixture.IsMatchStaticWithOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticWithOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticWithOptionsAndTimeoutTest:static start.*/
                IsMatchStaticWithOptionsAndTimeoutTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsMatchStaticWithOptionsAndTimeoutTest()", $t.Line = "79", $t));
                    t.Fixture.IsMatchStaticWithOptionsAndTimeoutTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.IsMatchStaticWithOptionsAndTimeoutTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexIsMatchTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexIsMatchTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.MsdnPositiveLookaheadTest:static start.*/
                MsdnPositiveLookaheadTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnPositiveLookaheadTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnPositiveLookaheadTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.MsdnPositiveLookaheadTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.MsdnNegativeLookaheadTest:static start.*/
                MsdnNegativeLookaheadTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNegativeLookaheadTest()", $t.Line = "36", $t));
                    t.Fixture.MsdnNegativeLookaheadTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.MsdnNegativeLookaheadTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadTest1:static start.*/
                PositiveLookaheadTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookaheadTest1()", $t.Line = "77", $t));
                    t.Fixture.PositiveLookaheadTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadTest2:static start.*/
                PositiveLookaheadTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookaheadTest2()", $t.Line = "90", $t));
                    t.Fixture.PositiveLookaheadTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadTest1:static start.*/
                NegativeLookaheadTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookaheadTest1()", $t.Line = "104", $t));
                    t.Fixture.NegativeLookaheadTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadTest2:static start.*/
                NegativeLookaheadTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookaheadTest2()", $t.Line = "118", $t));
                    t.Fixture.NegativeLookaheadTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadWithGroupTest:static start.*/
                PositiveLookaheadWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookaheadWithGroupTest()", $t.Line = "131", $t));
                    t.Fixture.PositiveLookaheadWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadWithGroupTest:static start.*/
                NegativeLookaheadWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookaheadWithGroupTest()", $t.Line = "154", $t));
                    t.Fixture.NegativeLookaheadWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadWithOffsetTest:static start.*/
                PositiveLookaheadWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookaheadWithOffsetTest()", $t.Line = "176", $t));
                    t.Fixture.PositiveLookaheadWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadWithOffsetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadWithOffsetTest:static start.*/
                NegativeLookaheadWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookaheadWithOffsetTest()", $t.Line = "193", $t));
                    t.Fixture.NegativeLookaheadWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.NegativeLookaheadWithOffsetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadGroupCombineTest:static start.*/
                PositiveLookaheadGroupCombineTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookaheadGroupCombineTest()", $t.Line = "254", $t));
                    t.Fixture.PositiveLookaheadGroupCombineTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.PositiveLookaheadGroupCombineTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexLookaheadTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookaheadTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.MsdnPositiveLookbehindTest:static start.*/
                MsdnPositiveLookbehindTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnPositiveLookbehindTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnPositiveLookbehindTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.MsdnPositiveLookbehindTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.MsdnNegativeLookbehindTest:static start.*/
                MsdnNegativeLookbehindTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNegativeLookbehindTest()", $t.Line = "37", $t));
                    t.Fixture.MsdnNegativeLookbehindTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.MsdnNegativeLookbehindTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest1:static start.*/
                PositiveLookbehindTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindTest1()", $t.Line = "65", $t));
                    t.Fixture.PositiveLookbehindTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest2:static start.*/
                PositiveLookbehindTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindTest2()", $t.Line = "79", $t));
                    t.Fixture.PositiveLookbehindTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest3:static start.*/
                PositiveLookbehindTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindTest3()", $t.Line = "92", $t));
                    t.Fixture.PositiveLookbehindTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithMatchOffsetTest:static start.*/
                PositiveLookbehindWithMatchOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindWithMatchOffsetTest()", $t.Line = "106", $t));
                    t.Fixture.PositiveLookbehindWithMatchOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithMatchOffsetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindTest1:static start.*/
                NegativeLookbehindTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookbehindTest1()", $t.Line = "120", $t));
                    t.Fixture.NegativeLookbehindTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindTest2:static start.*/
                NegativeLookbehindTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookbehindTest2()", $t.Line = "133", $t));
                    t.Fixture.NegativeLookbehindTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithGroupTest:static start.*/
                PositiveLookbehindWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindWithGroupTest()", $t.Line = "147", $t));
                    t.Fixture.PositiveLookbehindWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindWithGroupTest:static start.*/
                NegativeLookbehindWithGroupTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookbehindWithGroupTest()", $t.Line = "170", $t));
                    t.Fixture.NegativeLookbehindWithGroupTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindWithGroupTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithOffsetTest:static start.*/
                PositiveLookbehindWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PositiveLookbehindWithOffsetTest()", $t.Line = "192", $t));
                    t.Fixture.PositiveLookbehindWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.PositiveLookbehindWithOffsetTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindWithOffsetTest:static start.*/
                NegativeLookbehindWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeLookbehindWithOffsetTest()", $t.Line = "209", $t));
                    t.Fixture.NegativeLookbehindWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.NegativeLookbehindWithOffsetTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexLookbehindTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexLookbehindTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.CaseDataTest:static start.*/
                CaseDataTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaseDataTest()", $t.Line = "35", $t));
                    t.Fixture.CaseDataTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.CaseDataTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionFieldsTest:static start.*/
                MatchCollectionFieldsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionFieldsTest()", $t.Line = "67", $t));
                    t.Fixture.MatchCollectionFieldsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionFieldsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionItemsTest:static start.*/
                MatchCollectionItemsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionItemsTest()", $t.Line = "78", $t));
                    t.Fixture.MatchCollectionItemsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionItemsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionForeachTest:static start.*/
                MatchCollectionForeachTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionForeachTest()", $t.Line = "94", $t));
                    t.Fixture.MatchCollectionForeachTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionForeachTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionEnumeratorTest:static start.*/
                MatchCollectionEnumeratorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionEnumeratorTest()", $t.Line = "111", $t));
                    t.Fixture.MatchCollectionEnumeratorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionEnumeratorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionCopyToTest:static start.*/
                MatchCollectionCopyToTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionCopyToTest()", $t.Line = "135", $t));
                    t.Fixture.MatchCollectionCopyToTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionCopyToTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionWithEmptyPatternTest:static start.*/
                MatchCollectionWithEmptyPatternTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchCollectionWithEmptyPatternTest()", $t.Line = "155", $t));
                    t.Fixture.MatchCollectionWithEmptyPatternTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.MatchCollectionWithEmptyPatternTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexMatchCollectionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchCollectionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.CaseDataTest:static start.*/
                CaseDataTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaseDataTest()", $t.Line = "28", $t));
                    t.Fixture.CaseDataTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.CaseDataTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchEmptyPatternTest:static start.*/
                MatchEmptyPatternTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchEmptyPatternTest()", $t.Line = "60", $t));
                    t.Fixture.MatchEmptyPatternTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchEmptyPatternTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchEmptyFieldsTest:static start.*/
                MatchEmptyFieldsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchEmptyFieldsTest()", $t.Line = "72", $t));
                    t.Fixture.MatchEmptyFieldsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchEmptyFieldsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchNextMatchTest:static start.*/
                MatchNextMatchTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchNextMatchTest()", $t.Line = "79", $t));
                    t.Fixture.MatchNextMatchTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchNextMatchTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchNextMatchWithEmptyPatternTest:static start.*/
                MatchNextMatchWithEmptyPatternTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchNextMatchWithEmptyPatternTest()", $t.Line = "95", $t));
                    t.Fixture.MatchNextMatchWithEmptyPatternTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchNextMatchWithEmptyPatternTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchResultTest:static start.*/
                MatchResultTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchResultTest()", $t.Line = "115", $t));
                    t.Fixture.MatchResultTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchResultTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchSearchGroupByNameTest:static start.*/
                MatchSearchGroupByNameTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchSearchGroupByNameTest()", $t.Line = "133", $t));
                    t.Fixture.MatchSearchGroupByNameTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.MatchSearchGroupByNameTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexMatchEntityTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchEntityTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesTest:static start.*/
                MatchesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchesTest()", $t.Line = "12", $t));
                    t.Fixture.MatchesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesAtPositionTest:static start.*/
                MatchesAtPositionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchesAtPositionTest()", $t.Line = "36", $t));
                    t.Fixture.MatchesAtPositionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesAtPositionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticTest:static start.*/
                MatchesStaticTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchesStaticTest()", $t.Line = "64", $t));
                    t.Fixture.MatchesStaticTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticWithOptionsTest:static start.*/
                MatchesStaticWithOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchesStaticWithOptionsTest()", $t.Line = "86", $t));
                    t.Fixture.MatchesStaticWithOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticWithOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticWithOptionsAndTimeoutTest:static start.*/
                MatchesStaticWithOptionsAndTimeoutTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchesStaticWithOptionsAndTimeoutTest()", $t.Line = "122", $t));
                    t.Fixture.MatchesStaticWithOptionsAndTimeoutTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.MatchesStaticWithOptionsAndTimeoutTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexMatchesTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchesTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest1:static start.*/
                GroupOrderingTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupOrderingTest1()", $t.Line = "10", $t));
                    t.Fixture.GroupOrderingTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest2:static start.*/
                GroupOrderingTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupOrderingTest2()", $t.Line = "36", $t));
                    t.Fixture.GroupOrderingTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest3:static start.*/
                GroupOrderingTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupOrderingTest3()", $t.Line = "65", $t));
                    t.Fixture.GroupOrderingTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupOrderingTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.SparseOrderingTest:static start.*/
                SparseOrderingTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SparseOrderingTest()", $t.Line = "94", $t));
                    t.Fixture.SparseOrderingTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.SparseOrderingTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupCapturesMergeTest:static start.*/
                GroupCapturesMergeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GroupCapturesMergeTest()", $t.Line = "129", $t));
                    t.Fixture.GroupCapturesMergeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GroupCapturesMergeTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Entities/RegexMatchSparseTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchSparseTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchTest:static start.*/
                MatchTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchTest()", $t.Line = "12", $t));
                    t.Fixture.MatchTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchAtPositionTest:static start.*/
                MatchAtPositionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchAtPositionTest()", $t.Line = "54", $t));
                    t.Fixture.MatchAtPositionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchAtPositionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchAtPositionAndLengthTest:static start.*/
                MatchAtPositionAndLengthTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchAtPositionAndLengthTest()", $t.Line = "96", $t));
                    t.Fixture.MatchAtPositionAndLengthTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchAtPositionAndLengthTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticTest:static start.*/
                MatchStaticTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchStaticTest()", $t.Line = "142", $t));
                    t.Fixture.MatchStaticTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticWithOptionsTest:static start.*/
                MatchStaticWithOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchStaticWithOptionsTest()", $t.Line = "169", $t));
                    t.Fixture.MatchStaticWithOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticWithOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticWithOptionsAndTimeoutTest:static start.*/
                MatchStaticWithOptionsAndTimeoutTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MatchStaticWithOptionsAndTimeoutTest()", $t.Line = "193", $t));
                    t.Fixture.MatchStaticWithOptionsAndTimeoutTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.MatchStaticWithOptionsAndTimeoutTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexMatchTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "24", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "33", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "42", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithExceptionDetailsWorks:static start.*/
                ConstructorWithExceptionDetailsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithExceptionDetailsWorks()", $t.Line = "52", $t));
                    t.Fixture.ConstructorWithExceptionDetailsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.ConstructorWithExceptionDetailsWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/RegexMatchTimeoutExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexMatchTimeoutExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.MsdnNonBacktrackingTest1:static start.*/
                MsdnNonBacktrackingTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonBacktrackingTest1()", $t.Line = "12", $t));
                    t.Fixture.MsdnNonBacktrackingTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.MsdnNonBacktrackingTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.MsdnNonBacktrackingTest2:static start.*/
                MsdnNonBacktrackingTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNonBacktrackingTest2()", $t.Line = "24", $t));
                    t.Fixture.MsdnNonBacktrackingTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.MsdnNonBacktrackingTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest1:static start.*/
                NonBacktrackingTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingTest1()", $t.Line = "38", $t));
                    t.Fixture.NonBacktrackingTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest2:static start.*/
                NonBacktrackingTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingTest2()", $t.Line = "55", $t));
                    t.Fixture.NonBacktrackingTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest3:static start.*/
                NonBacktrackingTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingTest3()", $t.Line = "67", $t));
                    t.Fixture.NonBacktrackingTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest4:static start.*/
                NonBacktrackingTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingTest4()", $t.Line = "79", $t));
                    t.Fixture.NonBacktrackingTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest5:static start.*/
                NonBacktrackingTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingTest5()", $t.Line = "93", $t));
                    t.Fixture.NonBacktrackingTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingWithOffsetTest:static start.*/
                NonBacktrackingWithOffsetTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonBacktrackingWithOffsetTest()", $t.Line = "118", $t));
                    t.Fixture.NonBacktrackingWithOffsetTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.NonBacktrackingWithOffsetTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexNonbacktrackingTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexNonbacktrackingTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnIgnoreCaseOptionTest:static start.*/
                MsdnIgnoreCaseOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIgnoreCaseOptionTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnIgnoreCaseOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnIgnoreCaseOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnMultilineOptionTest1:static start.*/
                MsdnMultilineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnMultilineOptionTest1()", $t.Line = "44", $t));
                    t.Fixture.MsdnMultilineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnMultilineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnMultilineOptionTest2:static start.*/
                MsdnMultilineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnMultilineOptionTest2()", $t.Line = "65", $t));
                    t.Fixture.MsdnMultilineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnMultilineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnSinglelineOptionTest:static start.*/
                MsdnSinglelineOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnSinglelineOptionTest()", $t.Line = "132", $t));
                    t.Fixture.MsdnSinglelineOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnSinglelineOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnIgnoreWhitespaceOptionTest:static start.*/
                MsdnIgnoreWhitespaceOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnIgnoreWhitespaceOptionTest()", $t.Line = "146", $t));
                    t.Fixture.MsdnIgnoreWhitespaceOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnIgnoreWhitespaceOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnExplicitCaptureOptionTest1:static start.*/
                MsdnExplicitCaptureOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnExplicitCaptureOptionTest1()", $t.Line = "215", $t));
                    t.Fixture.MsdnExplicitCaptureOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnExplicitCaptureOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnExplicitCaptureOptionTest2:static start.*/
                MsdnExplicitCaptureOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnExplicitCaptureOptionTest2()", $t.Line = "284", $t));
                    t.Fixture.MsdnExplicitCaptureOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MsdnExplicitCaptureOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest1:static start.*/
                IgnoreCaseOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseOptionTest1()", $t.Line = "325", $t));
                    t.Fixture.IgnoreCaseOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest2:static start.*/
                IgnoreCaseOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseOptionTest2()", $t.Line = "338", $t));
                    t.Fixture.IgnoreCaseOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest3:static start.*/
                IgnoreCaseOptionTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IgnoreCaseOptionTest3()", $t.Line = "352", $t));
                    t.Fixture.IgnoreCaseOptionTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.IgnoreCaseOptionTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.DefaultLineOptionsTest1:static start.*/
                DefaultLineOptionsTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultLineOptionsTest1()", $t.Line = "366", $t));
                    t.Fixture.DefaultLineOptionsTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.DefaultLineOptionsTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.DefaultLineOptionsTest2:static start.*/
                DefaultLineOptionsTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultLineOptionsTest2()", $t.Line = "380", $t));
                    t.Fixture.DefaultLineOptionsTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.DefaultLineOptionsTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineOptionTest1:static start.*/
                MultilineOptionTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineOptionTest1()", $t.Line = "394", $t));
                    t.Fixture.MultilineOptionTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineOptionTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineOptionTest2:static start.*/
                MultilineOptionTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineOptionTest2()", $t.Line = "447", $t));
                    t.Fixture.MultilineOptionTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineOptionTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.SinglelineOptionTest:static start.*/
                SinglelineOptionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinglelineOptionTest()", $t.Line = "479", $t));
                    t.Fixture.SinglelineOptionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.SinglelineOptionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.SinglelineDotCharTest:static start.*/
                SinglelineDotCharTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SinglelineDotCharTest()", $t.Line = "493", $t));
                    t.Fixture.SinglelineDotCharTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.SinglelineDotCharTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineAndSinglelineOptionsTest:static start.*/
                MultilineAndSinglelineOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MultilineAndSinglelineOptionsTest()", $t.Line = "507", $t));
                    t.Fixture.MultilineAndSinglelineOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.MultilineAndSinglelineOptionsTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexOptionsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexOptionsTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnZeroOrMoreTimesTest:static start.*/
                MsdnZeroOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnZeroOrMoreTimesTest()", $t.Line = "12", $t));
                    t.Fixture.MsdnZeroOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnZeroOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnOneOrMoreTimesTest:static start.*/
                MsdnOneOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnOneOrMoreTimesTest()", $t.Line = "24", $t));
                    t.Fixture.MsdnOneOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnOneOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnZeroOrOneTimeTest:static start.*/
                MsdnZeroOrOneTimeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnZeroOrOneTimeTest()", $t.Line = "36", $t));
                    t.Fixture.MsdnZeroOrOneTimeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnZeroOrOneTimeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNTimesTest1:static start.*/
                MsdnNTimesTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNTimesTest1()", $t.Line = "48", $t));
                    t.Fixture.MsdnNTimesTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNTimesTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNTimesTest2:static start.*/
                MsdnNTimesTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNTimesTest2()", $t.Line = "60", $t));
                    t.Fixture.MsdnNTimesTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNTimesTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNOrMoreTimesTest:static start.*/
                MsdnNOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNOrMoreTimesTest()", $t.Line = "72", $t));
                    t.Fixture.MsdnNOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNToMTimesTest:static start.*/
                MsdnNToMTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnNToMTimesTest()", $t.Line = "84", $t));
                    t.Fixture.MsdnNToMTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnNToMTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyZeroOrMoreTimesTest:static start.*/
                MsdnLazyZeroOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyZeroOrMoreTimesTest()", $t.Line = "96", $t));
                    t.Fixture.MsdnLazyZeroOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyZeroOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyOneOrMoreTimesTest:static start.*/
                MsdnLazyOneOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyOneOrMoreTimesTest()", $t.Line = "108", $t));
                    t.Fixture.MsdnLazyOneOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyOneOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyZeroOrOneTimeTest:static start.*/
                MsdnLazyZeroOrOneTimeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyZeroOrOneTimeTest()", $t.Line = "120", $t));
                    t.Fixture.MsdnLazyZeroOrOneTimeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyZeroOrOneTimeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNTimesTest:static start.*/
                MsdnLazyNTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyNTimesTest()", $t.Line = "132", $t));
                    t.Fixture.MsdnLazyNTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNOrMoreTimesTest:static start.*/
                MsdnLazyNOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyNOrMoreTimesTest()", $t.Line = "144", $t));
                    t.Fixture.MsdnLazyNOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNToMTimesTest:static start.*/
                MsdnLazyNToMTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MsdnLazyNToMTimesTest()", $t.Line = "156", $t));
                    t.Fixture.MsdnLazyNToMTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.MsdnLazyNToMTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.ZeroOrMoreTimesTest:static start.*/
                ZeroOrMoreTimesTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroOrMoreTimesTest()", $t.Line = "170", $t));
                    t.Fixture.ZeroOrMoreTimesTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.ZeroOrMoreTimesTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest1:static start.*/
                OneOrMoreTimesTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OneOrMoreTimesTest1()", $t.Line = "190", $t));
                    t.Fixture.OneOrMoreTimesTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest2:static start.*/
                OneOrMoreTimesTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OneOrMoreTimesTest2()", $t.Line = "210", $t));
                    t.Fixture.OneOrMoreTimesTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest3:static start.*/
                OneOrMoreTimesTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OneOrMoreTimesTest3()", $t.Line = "227", $t));
                    t.Fixture.OneOrMoreTimesTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.OneOrMoreTimesTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.ZeroOrOneTimeTest:static start.*/
                ZeroOrOneTimeTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroOrOneTimeTest()", $t.Line = "247", $t));
                    t.Fixture.ZeroOrOneTimeTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.ZeroOrOneTimeTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrMoreTimesTest1:static start.*/
                LazyZeroOrMoreTimesTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyZeroOrMoreTimesTest1()", $t.Line = "267", $t));
                    t.Fixture.LazyZeroOrMoreTimesTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrMoreTimesTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrMoreTimesTest2:static start.*/
                LazyZeroOrMoreTimesTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyZeroOrMoreTimesTest2()", $t.Line = "287", $t));
                    t.Fixture.LazyZeroOrMoreTimesTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrMoreTimesTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyOneOrMoreTimesTest1:static start.*/
                LazyOneOrMoreTimesTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyOneOrMoreTimesTest1()", $t.Line = "307", $t));
                    t.Fixture.LazyOneOrMoreTimesTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyOneOrMoreTimesTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyOneOrMoreTimesTest2:static start.*/
                LazyOneOrMoreTimesTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyOneOrMoreTimesTest2()", $t.Line = "327", $t));
                    t.Fixture.LazyOneOrMoreTimesTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyOneOrMoreTimesTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrOneTimeTest1:static start.*/
                LazyZeroOrOneTimeTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyZeroOrOneTimeTest1()", $t.Line = "347", $t));
                    t.Fixture.LazyZeroOrOneTimeTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrOneTimeTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrOneTimeTest2:static start.*/
                LazyZeroOrOneTimeTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LazyZeroOrOneTimeTest2()", $t.Line = "367", $t));
                    t.Fixture.LazyZeroOrOneTimeTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.LazyZeroOrOneTimeTest2:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexQuantifiersTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexQuantifiersTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceTest1:static start.*/
                ReplaceTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceTest1()", $t.Line = "13", $t));
                    t.Fixture.ReplaceTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceAtPositionTest:static start.*/
                ReplaceAtPositionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceAtPositionTest()", $t.Line = "42", $t));
                    t.Fixture.ReplaceAtPositionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceAtPositionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceAtPositionAndLengthTest:static start.*/
                ReplaceAtPositionAndLengthTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceAtPositionAndLengthTest()", $t.Line = "56", $t));
                    t.Fixture.ReplaceAtPositionAndLengthTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceAtPositionAndLengthTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorTest:static start.*/
                ReplaceWithEvaluatorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceWithEvaluatorTest()", $t.Line = "91", $t));
                    t.Fixture.ReplaceWithEvaluatorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorAndCountTest:static start.*/
                ReplaceWithEvaluatorAndCountTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceWithEvaluatorAndCountTest()", $t.Line = "106", $t));
                    t.Fixture.ReplaceWithEvaluatorAndCountTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorAndCountTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorAndCountAtPostitionTest:static start.*/
                ReplaceWithEvaluatorAndCountAtPostitionTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceWithEvaluatorAndCountAtPostitionTest()", $t.Line = "118", $t));
                    t.Fixture.ReplaceWithEvaluatorAndCountAtPostitionTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceWithEvaluatorAndCountAtPostitionTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticTest1:static start.*/
                ReplaceStaticTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticTest1()", $t.Line = "134", $t));
                    t.Fixture.ReplaceStaticTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticTest2:static start.*/
                ReplaceStaticTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticTest2()", $t.Line = "147", $t));
                    t.Fixture.ReplaceStaticTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithOptionsTest:static start.*/
                ReplaceStaticWithOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticWithOptionsTest()", $t.Line = "173", $t));
                    t.Fixture.ReplaceStaticWithOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithOptionsAndTimeoutTest:static start.*/
                ReplaceStaticWithOptionsAndTimeoutTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticWithOptionsAndTimeoutTest()", $t.Line = "199", $t));
                    t.Fixture.ReplaceStaticWithOptionsAndTimeoutTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithOptionsAndTimeoutTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorTest:static start.*/
                ReplaceStaticWithEvaluatorTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticWithEvaluatorTest()", $t.Line = "239", $t));
                    t.Fixture.ReplaceStaticWithEvaluatorTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsTest:static start.*/
                ReplaceStaticWithEvaluatorAndOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticWithEvaluatorAndOptionsTest()", $t.Line = "252", $t));
                    t.Fixture.ReplaceStaticWithEvaluatorAndOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest:static start.*/
                ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest()", $t.Line = "269", $t));
                    t.Fixture.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexReplaceTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexReplaceTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest1:static start.*/
                SplitTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitTest1()", $t.Line = "20", $t));
                    t.Fixture.SplitTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest2:static start.*/
                SplitTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitTest2()", $t.Line = "31", $t));
                    t.Fixture.SplitTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest3:static start.*/
                SplitTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitTest3()", $t.Line = "44", $t));
                    t.Fixture.SplitTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest4:static start.*/
                SplitTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitTest4()", $t.Line = "55", $t));
                    t.Fixture.SplitTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest5:static start.*/
                SplitTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitTest5()", $t.Line = "68", $t));
                    t.Fixture.SplitTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest1:static start.*/
                SplitWithCountTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountTest1()", $t.Line = "80", $t));
                    t.Fixture.SplitWithCountTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest2:static start.*/
                SplitWithCountTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountTest2()", $t.Line = "93", $t));
                    t.Fixture.SplitWithCountTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest3:static start.*/
                SplitWithCountTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountTest3()", $t.Line = "106", $t));
                    t.Fixture.SplitWithCountTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest4:static start.*/
                SplitWithCountTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountTest4()", $t.Line = "119", $t));
                    t.Fixture.SplitWithCountTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest1:static start.*/
                SplitWithCountAndStartAtTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountAndStartAtTest1()", $t.Line = "131", $t));
                    t.Fixture.SplitWithCountAndStartAtTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest2:static start.*/
                SplitWithCountAndStartAtTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountAndStartAtTest2()", $t.Line = "149", $t));
                    t.Fixture.SplitWithCountAndStartAtTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest3:static start.*/
                SplitWithCountAndStartAtTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountAndStartAtTest3()", $t.Line = "163", $t));
                    t.Fixture.SplitWithCountAndStartAtTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest4:static start.*/
                SplitWithCountAndStartAtTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCountAndStartAtTest4()", $t.Line = "176", $t));
                    t.Fixture.SplitWithCountAndStartAtTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitWithCountAndStartAtTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest1:static start.*/
                SplitStaticTest1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticTest1()", $t.Line = "188", $t));
                    t.Fixture.SplitStaticTest1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest2:static start.*/
                SplitStaticTest2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticTest2()", $t.Line = "198", $t));
                    t.Fixture.SplitStaticTest2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest3:static start.*/
                SplitStaticTest3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticTest3()", $t.Line = "210", $t));
                    t.Fixture.SplitStaticTest3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest4:static start.*/
                SplitStaticTest4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticTest4()", $t.Line = "220", $t));
                    t.Fixture.SplitStaticTest4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest5:static start.*/
                SplitStaticTest5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticTest5()", $t.Line = "232", $t));
                    t.Fixture.SplitStaticTest5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticTest5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticWithOptionsTest:static start.*/
                SplitStaticWithOptionsTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticWithOptionsTest()", $t.Line = "243", $t));
                    t.Fixture.SplitStaticWithOptionsTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticWithOptionsTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticWithOptionsAndTimeout:static start.*/
                SplitStaticWithOptionsAndTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitStaticWithOptionsAndTimeout()", $t.Line = "255", $t));
                    t.Fixture.SplitStaticWithOptionsAndTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.SplitStaticWithOptionsAndTimeout:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/Methods/RegexSplitTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexSplitTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexTimeoutValidationWorks:static start.*/
                RegexTimeoutValidationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexTimeoutValidationWorks()", $t.Line = "32", $t));
                    t.Fixture.RegexTimeoutValidationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexTimeoutValidationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexIsMatchWorksWithShortTimeout:static start.*/
                RegexIsMatchWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexIsMatchWorksWithShortTimeout()", $t.Line = "47", $t));
                    t.Fixture.RegexIsMatchWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexIsMatchWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexIsMatchWorksWithLongTimeout:static start.*/
                RegexIsMatchWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexIsMatchWorksWithLongTimeout()", $t.Line = "54", $t));
                    t.Fixture.RegexIsMatchWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexIsMatchWorksWithLongTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexMatchWorksWithShortTimeout:static start.*/
                RegexMatchWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexMatchWorksWithShortTimeout()", $t.Line = "62", $t));
                    t.Fixture.RegexMatchWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexMatchWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexMatchWorksWithLongTimeout:static start.*/
                RegexMatchWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexMatchWorksWithLongTimeout()", $t.Line = "69", $t));
                    t.Fixture.RegexMatchWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexMatchWorksWithLongTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexNextMatchWorksWithShortTimeout:static start.*/
                RegexNextMatchWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexNextMatchWorksWithShortTimeout()", $t.Line = "77", $t));
                    t.Fixture.RegexNextMatchWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexNextMatchWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexNextMatchWorksWithLongTimeout:static start.*/
                RegexNextMatchWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexNextMatchWorksWithLongTimeout()", $t.Line = "89", $t));
                    t.Fixture.RegexNextMatchWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexNextMatchWorksWithLongTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceWorksWithShortTimeout:static start.*/
                RegexReplaceWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexReplaceWorksWithShortTimeout()", $t.Line = "100", $t));
                    t.Fixture.RegexReplaceWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceWorksWithLongTimeout:static start.*/
                RegexReplaceWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexReplaceWorksWithLongTimeout()", $t.Line = "109", $t));
                    t.Fixture.RegexReplaceWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceWorksWithLongTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceEvaluatorWorksWithShortTimeout:static start.*/
                RegexReplaceEvaluatorWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexReplaceEvaluatorWorksWithShortTimeout()", $t.Line = "116", $t));
                    t.Fixture.RegexReplaceEvaluatorWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceEvaluatorWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceEvaluatorWorksWithLongTimeout:static start.*/
                RegexReplaceEvaluatorWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexReplaceEvaluatorWorksWithLongTimeout()", $t.Line = "125", $t));
                    t.Fixture.RegexReplaceEvaluatorWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexReplaceEvaluatorWorksWithLongTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexSplitWorksWithShortTimeout:static start.*/
                RegexSplitWorksWithShortTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexSplitWorksWithShortTimeout()", $t.Line = "132", $t));
                    t.Fixture.RegexSplitWorksWithShortTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexSplitWorksWithShortTimeout:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexSplitWorksWithLongTimeout:static start.*/
                RegexSplitWorksWithLongTimeout: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RegexSplitWorksWithLongTimeout()", $t.Line = "141", $t));
                    t.Fixture.RegexSplitWorksWithLongTimeout();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.RegexSplitWorksWithLongTimeout:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/RegularExpressions/RegexTimeoutTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RegexTimeoutTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RuntimeHelpersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Runtime.CompilerServices.RuntimeHelpersTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests.GetHashCodeWoksForObject_SPI_1570:static start.*/
                GetHashCodeWoksForObject_SPI_1570: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Runtime.CompilerServices.RuntimeHelpersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RuntimeHelpersTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWoksForObject_SPI_1570()", $t.Line = "18", $t));
                    t.Fixture.GetHashCodeWoksForObject_SPI_1570();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests.GetHashCodeWoksForObject_SPI_1570:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Runtime.CompilerServices.RuntimeHelpersTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Runtime/CompilerServices/RuntimeHelpersTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RuntimeHelpersTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.RValueTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleStruct:static start.*/
                TestSimpleStruct: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.RValueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSimpleStruct()", $t.Line = "54", $t));
                    t.Fixture.TestSimpleStruct();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleStruct:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleClass:static start.*/
                TestSimpleClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.RValueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSimpleClass()", $t.Line = "91", $t));
                    t.Fixture.TestSimpleClass();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleClass:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleType:static start.*/
                TestSimpleType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.RValueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestSimpleType()", $t.Line = "118", $t));
                    t.Fixture.TestSimpleType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestSimpleType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestRefOutGeneric:static start.*/
                TestRefOutGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.RValueTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RValueTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestRefOutGeneric()", $t.Line = "127", $t));
                    t.Fixture.TestRefOutGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.TestRefOutGeneric:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Batch1.RValueTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/RValueTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+RValueTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "36", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "98", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "104", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "110", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "117", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "123", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "129", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "135", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.TryParseWorks_SPI_1592:static start.*/
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "148", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.TryParseWorks_SPI_1592:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.SByteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/SByteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SByteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.BooleanWorks_SPI_1619:static start.*/
                BooleanWorks_SPI_1619: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BooleanWorks_SPI_1619()", $t.Line = "75", $t));
                    t.Fixture.BooleanWorks_SPI_1619();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.BooleanWorks_SPI_1619:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.EvalWorks:static start.*/
                EvalWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EvalWorks()", $t.Line = "84", $t));
                    t.Fixture.EvalWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.EvalWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.IsNullWorks_SPI_1618:static start.*/
                IsNullWorks_SPI_1618: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNullWorks_SPI_1618()", $t.Line = "100", $t));
                    t.Fixture.IsNullWorks_SPI_1618();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.IsNullWorks_SPI_1618:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.IsUndefinedWorks_SPI_1616:static start.*/
                IsUndefinedWorks_SPI_1616: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsUndefinedWorks_SPI_1616()", $t.Line = "110", $t));
                    t.Fixture.IsUndefinedWorks_SPI_1616();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.IsUndefinedWorks_SPI_1616:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.HasValueWorks_SPI_1617:static start.*/
                HasValueWorks_SPI_1617: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "HasValueWorks_SPI_1617()", $t.Line = "120", $t));
                    t.Fixture.HasValueWorks_SPI_1617();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.HasValueWorks_SPI_1617:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.TypeOfWorks:static start.*/
                TypeOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfWorks()", $t.Line = "136", $t));
                    t.Fixture.TypeOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.TypeOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.DeleteWorksForJsClass_SPI_1571:static start.*/
                DeleteWorksForJsClass_SPI_1571: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeleteWorksForJsClass_SPI_1571()", $t.Line = "152", $t));
                    t.Fixture.DeleteWorksForJsClass_SPI_1571();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.DeleteWorksForJsClass_SPI_1571:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.DeleteWorksForClassPrototype_SPI_1571:static start.*/
                DeleteWorksForClassPrototype_SPI_1571: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeleteWorksForClassPrototype_SPI_1571()", $t.Line = "190", $t));
                    t.Fixture.DeleteWorksForClassPrototype_SPI_1571();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.DeleteWorksForClassPrototype_SPI_1571:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.InWorks_SPI_1573:static start.*/
                InWorks_SPI_1573: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InWorks_SPI_1573()", $t.Line = "227", $t));
                    t.Fixture.InWorks_SPI_1573();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.InWorks_SPI_1573:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.InvokeMethodWorks_SPI_1572:static start.*/
                InvokeMethodWorks_SPI_1572: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokeMethodWorks_SPI_1572()", $t.Line = "238", $t));
                    t.Fixture.InvokeMethodWorks_SPI_1572();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.InvokeMethodWorks_SPI_1572:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.ParseIntWithoutRadixWorks:static start.*/
                ParseIntWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseIntWithoutRadixWorks()", $t.Line = "247", $t));
                    t.Fixture.ParseIntWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.ParseIntWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.ParseIntWithRadixWorks:static start.*/
                ParseIntWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ScriptTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ScriptTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseIntWithRadixWorks()", $t.Line = "253", $t));
                    t.Fixture.ParseIntWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.ParseIntWithRadixWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.ScriptTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/ScriptTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+ScriptTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "38", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "44", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "50", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "62", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "68", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "74", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "80", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "86", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "99", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToExponentialWorks:static start.*/
                ToExponentialWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWorks()", $t.Line = "105", $t));
                    t.Fixture.ToExponentialWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToExponentialWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToExponentialWithFractionalDigitsWorks:static start.*/
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToExponentialWithFractionalDigitsWorks()", $t.Line = "111", $t));
                    t.Fixture.ToExponentialWithFractionalDigitsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToExponentialWithFractionalDigitsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToFixed:static start.*/
                ToFixed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixed()", $t.Line = "117", $t));
                    t.Fixture.ToFixed();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToFixed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToFixedWithFractionalDigitsWorks:static start.*/
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToFixedWithFractionalDigitsWorks()", $t.Line = "123", $t));
                    t.Fixture.ToFixedWithFractionalDigitsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToFixedWithFractionalDigitsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToPrecisionWorks:static start.*/
                ToPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWorks()", $t.Line = "129", $t));
                    t.Fixture.ToPrecisionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToPrecisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToPrecisionWithPrecisionWorks:static start.*/
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToPrecisionWithPrecisionWorks()", $t.Line = "135", $t));
                    t.Fixture.ToPrecisionWithPrecisionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.ToPrecisionWithPrecisionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsPositiveInfinityWorks_SPI_1600:static start.*/
                IsPositiveInfinityWorks_SPI_1600: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPositiveInfinityWorks_SPI_1600()", $t.Line = "141", $t));
                    t.Fixture.IsPositiveInfinityWorks_SPI_1600();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsPositiveInfinityWorks_SPI_1600:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsNegativeInfinityWorks:static start.*/
                IsNegativeInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNegativeInfinityWorks()", $t.Line = "153", $t));
                    t.Fixture.IsNegativeInfinityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsNegativeInfinityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsInfinityWorks:static start.*/
                IsInfinityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInfinityWorks()", $t.Line = "163", $t));
                    t.Fixture.IsInfinityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsInfinityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsFiniteWorks:static start.*/
                IsFiniteWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFiniteWorks()", $t.Line = "173", $t));
                    t.Fixture.IsFiniteWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsFiniteWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsNaNWorks:static start.*/
                IsNaNWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNaNWorks()", $t.Line = "182", $t));
                    t.Fixture.IsNaNWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IsNaNWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "191", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "200", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "209", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "223", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "232", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.SingleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/SingleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SingleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IComparer:static start.*/
                SortedList_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IComparer()", $t.Line = "696", $t));
                    t.Fixture.SortedList_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary:static start.*/
                SortedList_Generic_Constructor_IDictionary: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IDictionary()", $t.Line = "717", $t));
                    t.Fixture.SortedList_Generic_Constructor_IDictionary();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException:static start.*/
                SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException()", $t.Line = "733", $t));
                    t.Fixture.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary_IComparer:static start.*/
                SortedList_Generic_Constructor_IDictionary_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IDictionary_IComparer()", $t.Line = "751", $t));
                    t.Fixture.SortedList_Generic_Constructor_IDictionary_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_IDictionary_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int:static start.*/
                SortedList_Generic_Constructor_int: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_int()", $t.Line = "774", $t));
                    t.Fixture.SortedList_Generic_Constructor_int();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException()", $t.Line = "791", $t));
                    t.Fixture.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int_IComparer:static start.*/
                SortedList_Generic_Constructor_int_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_int_IComparer()", $t.Line = "811", $t));
                    t.Fixture.SortedList_Generic_Constructor_int_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Constructor_int_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_setRoundTrips:static start.*/
                SortedList_Generic_Capacity_setRoundTrips: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_setRoundTrips()", $t.Line = "833", $t));
                    t.Fixture.SortedList_Generic_Capacity_setRoundTrips();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_setRoundTrips:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException()", $t.Line = "853", $t));
                    t.Fixture.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException()", $t.Line = "871", $t));
                    t.Fixture.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_GrowsDuringAdds:static start.*/
                SortedList_Generic_Capacity_GrowsDuringAdds: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_GrowsDuringAdds()", $t.Line = "890", $t));
                    t.Fixture.SortedList_Generic_Capacity_GrowsDuringAdds();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_GrowsDuringAdds:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearDoesntTrim:static start.*/
                SortedList_Generic_Capacity_ClearDoesntTrim: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_ClearDoesntTrim()", $t.Line = "924", $t));
                    t.Fixture.SortedList_Generic_Capacity_ClearDoesntTrim();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearDoesntTrim:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity:static start.*/
                SortedList_Generic_Capacity_ClearTrimsToInitialCapacity: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_ClearTrimsToInitialCapacity()", $t.Line = "959", $t));
                    t.Fixture.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_NotPresent:static start.*/
                SortedList_Generic_ContainsValue_NotPresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_NotPresent()", $t.Line = "979", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_NotPresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_NotPresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_Present:static start.*/
                SortedList_Generic_ContainsValue_Present: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_Present()", $t.Line = "999", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_Present();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_Present:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValueNotPresent:static start.*/
                SortedList_Generic_ContainsValue_DefaultValueNotPresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_DefaultValueNotPresent()", $t.Line = "1021", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_DefaultValueNotPresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValueNotPresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValuePresent:static start.*/
                SortedList_Generic_ContainsValue_DefaultValuePresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_DefaultValuePresent()", $t.Line = "1035", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_DefaultValuePresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_ContainsValue_DefaultValuePresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList:static start.*/
                SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList()", $t.Line = "1060", $t));
                    t.Fixture.SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOf_DefaultKeyNotContainedInSortedList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfKey_EachKey:static start.*/
                SortedList_Generic_IndexOfKey_EachKey: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfKey_EachKey()", $t.Line = "1079", $t));
                    t.Fixture.SortedList_Generic_IndexOfKey_EachKey();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfKey_EachKey:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList:static start.*/
                SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList()", $t.Line = "1103", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueContainedInList:static start.*/
                SortedList_Generic_IndexOfValue_DefaultValueContainedInList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_DefaultValueContainedInList()", $t.Line = "1123", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_DefaultValueContainedInList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_DefaultValueContainedInList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes:static start.*/
                SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes()", $t.Line = "1149", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_EachValue:static start.*/
                SortedList_Generic_IndexOfValue_EachValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_EachValue()", $t.Line = "1188", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_EachValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_IndexOfValue_EachValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection:static start.*/
                SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection()", $t.Line = "1217", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_EveryValue:static start.*/
                SortedList_Generic_RemoveAt_EveryValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_EveryValue()", $t.Line = "1239", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_EveryValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_EveryValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_OutOfRangeValues:static start.*/
                SortedList_Generic_RemoveAt_OutOfRangeValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_OutOfRangeValues()", $t.Line = "1257", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_OutOfRangeValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_RemoveAt_OutOfRangeValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack:static start.*/
                SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack()", $t.Line = "1278", $t));
                    t.Fixture.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack:static start.*/
                SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack()", $t.Line = "1304", $t));
                    t.Fixture.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys:static start.*/
                IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys()", $t.Line = "1332", $t));
                    t.Fixture.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues:static start.*/
                IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_int_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues()", $t.Line = "1350", $t));
                    t.Fixture.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_int_int", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedList/SortedList.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_int_int end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IComparer:static start.*/
                SortedList_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IComparer()", $t.Line = "18", $t));
                    t.Fixture.SortedList_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary:static start.*/
                SortedList_Generic_Constructor_IDictionary: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IDictionary()", $t.Line = "39", $t));
                    t.Fixture.SortedList_Generic_Constructor_IDictionary();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException:static start.*/
                SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException()", $t.Line = "55", $t));
                    t.Fixture.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NullIDictionary_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary_IComparer:static start.*/
                SortedList_Generic_Constructor_IDictionary_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_IDictionary_IComparer()", $t.Line = "73", $t));
                    t.Fixture.SortedList_Generic_Constructor_IDictionary_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_IDictionary_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int:static start.*/
                SortedList_Generic_Constructor_int: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_int()", $t.Line = "96", $t));
                    t.Fixture.SortedList_Generic_Constructor_int();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException()", $t.Line = "113", $t));
                    t.Fixture.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_NegativeCapacity_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int_IComparer:static start.*/
                SortedList_Generic_Constructor_int_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Constructor_int_IComparer()", $t.Line = "133", $t));
                    t.Fixture.SortedList_Generic_Constructor_int_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Constructor_int_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_setRoundTrips:static start.*/
                SortedList_Generic_Capacity_setRoundTrips: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_setRoundTrips()", $t.Line = "155", $t));
                    t.Fixture.SortedList_Generic_Capacity_setRoundTrips();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_setRoundTrips:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException()", $t.Line = "175", $t));
                    t.Fixture.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_NegativeValue_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException()", $t.Line = "193", $t));
                    t.Fixture.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_LessThanCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_GrowsDuringAdds:static start.*/
                SortedList_Generic_Capacity_GrowsDuringAdds: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_GrowsDuringAdds()", $t.Line = "212", $t));
                    t.Fixture.SortedList_Generic_Capacity_GrowsDuringAdds();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_GrowsDuringAdds:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearDoesntTrim:static start.*/
                SortedList_Generic_Capacity_ClearDoesntTrim: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_ClearDoesntTrim()", $t.Line = "246", $t));
                    t.Fixture.SortedList_Generic_Capacity_ClearDoesntTrim();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearDoesntTrim:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity:static start.*/
                SortedList_Generic_Capacity_ClearTrimsToInitialCapacity: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_Capacity_ClearTrimsToInitialCapacity()", $t.Line = "281", $t));
                    t.Fixture.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_Capacity_ClearTrimsToInitialCapacity:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_NotPresent:static start.*/
                SortedList_Generic_ContainsValue_NotPresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_NotPresent()", $t.Line = "301", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_NotPresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_NotPresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_Present:static start.*/
                SortedList_Generic_ContainsValue_Present: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_Present()", $t.Line = "321", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_Present();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_Present:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValueNotPresent:static start.*/
                SortedList_Generic_ContainsValue_DefaultValueNotPresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_DefaultValueNotPresent()", $t.Line = "343", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_DefaultValueNotPresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValueNotPresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValuePresent:static start.*/
                SortedList_Generic_ContainsValue_DefaultValuePresent: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_ContainsValue_DefaultValuePresent()", $t.Line = "357", $t));
                    t.Fixture.SortedList_Generic_ContainsValue_DefaultValuePresent();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_ContainsValue_DefaultValuePresent:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfKey_EachKey:static start.*/
                SortedList_Generic_IndexOfKey_EachKey: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfKey_EachKey()", $t.Line = "382", $t));
                    t.Fixture.SortedList_Generic_IndexOfKey_EachKey();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfKey_EachKey:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList:static start.*/
                SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList()", $t.Line = "406", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueNotContainedInList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueContainedInList:static start.*/
                SortedList_Generic_IndexOfValue_DefaultValueContainedInList: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_DefaultValueContainedInList()", $t.Line = "426", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_DefaultValueContainedInList();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_DefaultValueContainedInList:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes:static start.*/
                SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes()", $t.Line = "452", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_ValueInCollectionMultipleTimes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_EachValue:static start.*/
                SortedList_Generic_IndexOfValue_EachValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_IndexOfValue_EachValue()", $t.Line = "491", $t));
                    t.Fixture.SortedList_Generic_IndexOfValue_EachValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_IndexOfValue_EachValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection:static start.*/
                SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection()", $t.Line = "520", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_NonDefaultValueContainedInCollection:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_EveryValue:static start.*/
                SortedList_Generic_RemoveAt_EveryValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_EveryValue()", $t.Line = "542", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_EveryValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_EveryValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_OutOfRangeValues:static start.*/
                SortedList_Generic_RemoveAt_OutOfRangeValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_RemoveAt_OutOfRangeValues()", $t.Line = "560", $t));
                    t.Fixture.SortedList_Generic_RemoveAt_OutOfRangeValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_RemoveAt_OutOfRangeValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack:static start.*/
                SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack()", $t.Line = "581", $t));
                    t.Fixture.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingSomeElementsBack:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack:static start.*/
                SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack()", $t.Line = "607", $t));
                    t.Fixture.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.SortedList_Generic_TrimExcess_AfterClearingAndAddingAllElementsBack:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys:static start.*/
                IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys()", $t.Line = "635", $t));
                    t.Fixture.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Keys_ContainsAllCorrectKeys:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues:static start.*/
                IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_Generic_Tests_string_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues()", $t.Line = "653", $t));
                    t.Fixture.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.IReadOnlyDictionary_Generic_Values_ContainsAllCorrectValues:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedList_Generic_Tests_string_string", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedList/SortedList.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_Generic_Tests_string_string end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull:static start.*/
                IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull()", $t.Line = "58", $t));
                    t.Fixture.IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_NullValueWhenDefaultValueIsNonNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_KeyOfWrongType:static start.*/
                IDictionary_NonGeneric_ItemSet_KeyOfWrongType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_ItemSet_KeyOfWrongType()", $t.Line = "72", $t));
                    t.Fixture.IDictionary_NonGeneric_ItemSet_KeyOfWrongType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_KeyOfWrongType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_ValueOfWrongType:static start.*/
                IDictionary_NonGeneric_ItemSet_ValueOfWrongType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_ItemSet_ValueOfWrongType()", $t.Line = "87", $t));
                    t.Fixture.IDictionary_NonGeneric_ItemSet_ValueOfWrongType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_ItemSet_ValueOfWrongType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_KeyOfWrongType:static start.*/
                IDictionary_NonGeneric_Add_KeyOfWrongType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_Add_KeyOfWrongType()", $t.Line = "103", $t));
                    t.Fixture.IDictionary_NonGeneric_Add_KeyOfWrongType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_KeyOfWrongType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_ValueOfWrongType:static start.*/
                IDictionary_NonGeneric_Add_ValueOfWrongType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_Add_ValueOfWrongType()", $t.Line = "119", $t));
                    t.Fixture.IDictionary_NonGeneric_Add_ValueOfWrongType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_ValueOfWrongType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull:static start.*/
                IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull()", $t.Line = "135", $t));
                    t.Fixture.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Add_NullValueWhenDefaultTValueIsNonNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Contains_KeyOfWrongType:static start.*/
                IDictionary_NonGeneric_Contains_KeyOfWrongType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedList_IDictionary_NonGeneric_Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IDictionary_NonGeneric_Contains_KeyOfWrongType()", $t.Line = "151", $t));
                    t.Fixture.IDictionary_NonGeneric_Contains_KeyOfWrongType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.IDictionary_NonGeneric_Contains_KeyOfWrongType:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedList_IDictionary_NonGeneric_Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedList/SortedList.Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedList_IDictionary_NonGeneric_Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "1545", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "1552", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "1560", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "1579", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "1586", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "1605", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "1624", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "1647", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "1676", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "1699", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "1733", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "1758", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "1785", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "1824", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "1839", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "1857", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "1868", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "1890", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "1913", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "1936", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "1956", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "1976", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_EquatableBackwardsOrder, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "1998", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_EquatableBackwardsOrder", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_EquatableBackwardsOrder end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "503", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "510", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "518", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "537", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "544", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "563", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "582", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "605", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "634", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "657", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "691", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "716", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "743", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "782", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "797", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "815", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "826", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "848", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "871", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "894", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "914", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "934", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "956", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SetComparer_SetEqualsTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MinMax()", $t.Line = "987", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups:static start.*/
                SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups()", $t.Line = "1012", $t));
                    t.Fixture.SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_IntersectWith_SupersetEnumerableWithDups:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax_Exhaustive:static start.*/
                SortedSet_Generic_GetViewBetween_MinMax_Exhaustive: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MinMax_Exhaustive()", $t.Line = "1021", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MinMax_Exhaustive();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.SortedSet_Generic_GetViewBetween_MinMax_Exhaustive:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "3535", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "3542", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "3550", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "3569", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "3576", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "3595", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "3614", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "3637", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "3666", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "3689", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "3723", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "3748", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "3775", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "3814", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "3829", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "3847", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "3858", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "3880", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "3903", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "3926", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "3946", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "3966", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "3988", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_AbsOfInt end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "2535", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "2542", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "2550", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "2569", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "2576", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "2595", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "2614", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "2637", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "2666", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "2689", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "2723", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "2748", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "2775", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "2814", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "2829", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "2847", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "2858", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "2880", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "2903", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "2926", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "2946", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "2966", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "2988", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_HashCodeAlwaysReturnsZero end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "3035", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "3042", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "3050", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "3069", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "3076", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "3095", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "3114", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "3137", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "3166", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "3189", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "3223", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "3248", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "3275", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "3314", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "3329", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "3347", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "3358", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "3380", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "3403", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "3426", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "3446", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "3466", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "3488", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_ModOfInt", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_ModOfInt end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "2035", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "2042", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "2050", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "2069", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "2076", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "2095", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "2114", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "2137", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "2166", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "2189", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "2223", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "2248", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "2275", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "2314", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "2329", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "2347", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "2358", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "2380", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "2403", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "2426", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "2446", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "2466", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "2488", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_Comparer_SameAsDefaultComparer end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "1063", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "1070", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "1078", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "1097", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "1104", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "1123", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "1142", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "1165", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "1194", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "1217", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "1251", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "1276", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "1303", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "1342", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "1357", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "1375", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "1386", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "1408", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "1431", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "1454", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "1474", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "1494", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_int_With_NullComparer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "1516", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_int_With_NullComparer", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_int_With_NullComparer end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor:static start.*/
                SortedSet_Generic_Constructor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor()", $t.Line = "15", $t));
                    t.Fixture.SortedSet_Generic_Constructor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IComparer:static start.*/
                SortedSet_Generic_Constructor_IComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IComparer()", $t.Line = "22", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable:static start.*/
                SortedSet_Generic_Constructor_IEnumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable()", $t.Line = "30", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_Null:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_Null: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_Null()", $t.Line = "49", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_Null();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_Null:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp()", $t.Line = "56", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx()", $t.Line = "75", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_Netfx:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static start.*/
                SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp()", $t.Line = "94", $t));
                    t.Fixture.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_Constructor_IEnumerable_IComparer_NullComparer_Netcoreapp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_MaxAndMin:static start.*/
                SortedSet_Generic_MaxAndMin: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_MaxAndMin()", $t.Line = "117", $t));
                    t.Fixture.SortedSet_Generic_MaxAndMin();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_MaxAndMin:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_EntireSet:static start.*/
                SortedSet_Generic_GetViewBetween_EntireSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_EntireSet()", $t.Line = "146", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_EntireSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_EntireSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_MiddleOfSet:static start.*/
                SortedSet_Generic_GetViewBetween_MiddleOfSet: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_MiddleOfSet()", $t.Line = "169", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_MiddleOfSet();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_MiddleOfSet:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static start.*/
                SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException()", $t.Line = "203", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_LowerValueGreaterThanUpperValue_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException()", $t.Line = "228", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_SubsequentOutOfRangeCall_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_Empty_MinMax:static start.*/
                SortedSet_Generic_GetViewBetween_Empty_MinMax: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_GetViewBetween_Empty_MinMax()", $t.Line = "255", $t));
                    t.Fixture.SortedSet_Generic_GetViewBetween_Empty_MinMax();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_GetViewBetween_Empty_MinMax:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_AllElements:static start.*/
                SortedSet_Generic_RemoveWhere_AllElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_AllElements()", $t.Line = "294", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_AllElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_AllElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NoElements:static start.*/
                SortedSet_Generic_RemoveWhere_NoElements: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NoElements()", $t.Line = "309", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NoElements();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NoElements:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static start.*/
                SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException()", $t.Line = "327", $t));
                    t.Fixture.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_RemoveWhere_NullPredicate_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_SetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_SetIsProperlySortedAccordingToComparer()", $t.Line = "338", $t));
                    t.Fixture.SortedSet_Generic_SetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_SetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static start.*/
                SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer()", $t.Line = "360", $t));
                    t.Fixture.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_ReverseSetIsProperlySortedAccordingToComparer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_TestSubSetEnumerator:static start.*/
                SortedSet_Generic_TestSubSetEnumerator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_TestSubSetEnumerator()", $t.Line = "383", $t));
                    t.Fixture.SortedSet_Generic_TestSubSetEnumerator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_TestSubSetEnumerator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithoutIndex:static start.*/
                SortedSet_Generic_CopyTo_WithoutIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithoutIndex()", $t.Line = "406", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithoutIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithoutIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithValidFullCount:static start.*/
                SortedSet_Generic_CopyTo_WithValidFullCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_WithValidFullCount()", $t.Line = "426", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_WithValidFullCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_WithValidFullCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static start.*/
                SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException()", $t.Line = "446", $t));
                    t.Fixture.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SortedSet_Generic_CopyTo_NegativeCount_ThrowsArgumentOutOfRangeException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SetComparer_SetEqualsTests:static start.*/
                SetComparer_SetEqualsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SortedSet_Generic_Tests_string, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetComparer_SetEqualsTests()", $t.Line = "468", $t));
                    t.Fixture.SetComparer_SetEqualsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.SetComparer_SetEqualsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.SortedSet_Generic_Tests_string", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/SortedSet/SortedSet.Generic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SortedSet_Generic_Tests_string end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StackTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "49", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "59", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructorWithCapacityWorks:static start.*/
                ConstructorWithCapacityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithCapacityWorks()", $t.Line = "66", $t));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructorWithCapacityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromArrayWorks:static start.*/
                ConstructingFromArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromArrayWorks()", $t.Line = "73", $t));
                    t.Fixture.ConstructingFromArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromListWorks:static start.*/
                ConstructingFromListWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromListWorks()", $t.Line = "82", $t));
                    t.Fixture.ConstructingFromListWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromListWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromIEnumerableWorks:static start.*/
                ConstructingFromIEnumerableWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingFromIEnumerableWorks()", $t.Line = "91", $t));
                    t.Fixture.ConstructingFromIEnumerableWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ConstructingFromIEnumerableWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.CountWorks:static start.*/
                CountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CountWorks()", $t.Line = "100", $t));
                    t.Fixture.CountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.CountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ForeachWorks:static start.*/
                ForeachWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks()", $t.Line = "108", $t));
                    t.Fixture.ForeachWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ForeachWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PushWorks:static start.*/
                PushWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PushWorks()", $t.Line = "130", $t));
                    t.Fixture.PushWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PushWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "138", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "146", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ContainsUsesEqualsMethod:static start.*/
                ContainsUsesEqualsMethod: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsUsesEqualsMethod()", $t.Line = "154", $t));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ContainsUsesEqualsMethod:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ForeachWithListItemCallbackWorks:static start.*/
                ForeachWithListItemCallbackWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWithListItemCallbackWorks()", $t.Line = "162", $t));
                    t.Fixture.ForeachWithListItemCallbackWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ForeachWithListItemCallbackWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PopWorks:static start.*/
                PopWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PopWorks()", $t.Line = "170", $t));
                    t.Fixture.PopWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PopWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PeekWorks:static start.*/
                PeekWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PeekWorks()", $t.Line = "178", $t));
                    t.Fixture.PeekWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.PeekWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ToArrayWorks:static start.*/
                ToArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.StackTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StackTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToArrayWorks()", $t.Line = "186", $t));
                    t.Fixture.ToArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.ToArrayWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.StackTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Generic/StackTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StackTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetTimestamp:static start.*/
                GetTimestamp: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimestamp()", $t.Line = "23", $t));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.GetTimestamp();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetTimestamp:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ConstructStartAndStop:static start.*/
                ConstructStartAndStop: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructStartAndStop()", $t.Line = "32", $t));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.ConstructStartAndStop();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ConstructStartAndStop:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewAndReset:static start.*/
                StartNewAndReset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartNewAndReset()", $t.Line = "66", $t));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StartNewAndReset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewAndReset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewAndRestart:static start.*/
                StartNewAndRestart: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartNewAndRestart()", $t.Line = "81", $t));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StartNewAndRestart();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewAndRestart:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StopShouldContinue:static start.*/
                StopShouldContinue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StopShouldContinue()", $t.Line = "109", $t));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StopShouldContinue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StopShouldContinue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "137", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ConstantsWorks:static start.*/
                ConstantsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWorks()", $t.Line = "145", $t));
                    t.Fixture.ConstantsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ConstantsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewWorks:static start.*/
                StartNewWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartNewWorks()", $t.Line = "152", $t));
                    t.Fixture.StartNewWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartNewWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartAndStopWork:static start.*/
                StartAndStopWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartAndStopWork()", $t.Line = "160", $t));
                    t.Fixture.StartAndStopWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.StartAndStopWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ElapsedWorks:static start.*/
                ElapsedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ElapsedWorks()", $t.Line = "171", $t));
                    t.Fixture.ElapsedWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.ElapsedWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetTimestampWorks:static start.*/
                GetTimestampWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTimestampWorks()", $t.Line = "205", $t));
                    t.Fixture.GetTimestampWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetTimestampWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Diagnostics.StopwatchTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Diagnostics/StopwatchTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StopwatchTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamAPMTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamAPMTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.BeginEndReadTest:static start.*/
                BeginEndReadTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamAPMTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamAPMTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BeginEndReadTest()", $t.Line = "25", $t));
                    t.Fixture.BeginEndReadTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.BeginEndReadTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.BeginEndWriteTest:static start.*/
                BeginEndWriteTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamAPMTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamAPMTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BeginEndWriteTest()", $t.Line = "33", $t));
                    t.Fixture.BeginEndWriteTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.BeginEndWriteTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamAPMTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.APMMethodsTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamAPMTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled:static start.*/
                IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled()", $t.Line = "17", $t));
                    t.Fixture.IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfCanSeekIsFalseLengthAndPositionShouldNotBeCalled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled:static start.*/
                AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled()", $t.Line = "47", $t));
                    t.Fixture.AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.AsyncIfCanSeekIsFalseLengthAndPositionShouldNotBeCalled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce:static start.*/
                IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce()", $t.Line = "65", $t));
                    t.Fixture.IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce:static start.*/
                AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce()", $t.Line = "86", $t));
                    t.Fixture.AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.AsyncIfCanSeekIsTrueLengthAndPositionShouldOnlyBeCalledOnce:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize:static start.*/
                IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize()", $t.Line = "107", $t));
                    t.Fixture.IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthIsLessThanOrEqualToPositionCopyToShouldStillBeCalledWithAPositiveBufferSize:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive:static start.*/
                IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive()", $t.Line = "148", $t));
                    t.Fixture.IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthMinusPositionPositiveOverflowsBufferSizeShouldStillBePositive:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally:static start.*/
                IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamCopyToTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamCopyToTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally()", $t.Line = "188", $t));
                    t.Fixture.IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.IfLengthIsGreaterThanPositionAndDoesNotOverflowEverythingShouldGoNormally:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamCopyToTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.CopyToTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamCopyToTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.Synchronized_NewObject:static start.*/
                Synchronized_NewObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Synchronized_NewObject()", $t.Line = "29", $t));
                    t.Fixture.Synchronized_NewObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.Synchronized_NewObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamSeekStress:static start.*/
                MemoryStreamSeekStress: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStreamSeekStress()", $t.Line = "42", $t));
                    t.Fixture.MemoryStreamSeekStress();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamSeekStress:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamSeekStressWithInitialBuffer:static start.*/
                MemoryStreamSeekStressWithInitialBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStreamSeekStressWithInitialBuffer()", $t.Line = "48", $t));
                    t.Fixture.MemoryStreamSeekStressWithInitialBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamSeekStressWithInitialBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamStress:static start.*/
                MemoryStreamStress: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MemoryStreamStress()", $t.Line = "55", $t));
                    t.Fixture.MemoryStreamStress();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.MemoryStreamStress:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.FlushAsyncTest:static start.*/
                FlushAsyncTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamMethods).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamMethods, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FlushAsyncTest()", $t.Line = "267", $t));
                    t.Fixture.FlushAsyncTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.FlushAsyncTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamMethods", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.Methods.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamMethods end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_ctorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.StreamReaderNullPath:static start.*/
                StreamReaderNullPath: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_ctorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StreamReaderNullPath()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.StreamReader_ctorTests.StreamReaderNullPath();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.StreamReaderNullPath:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.InputStreamClosed:static start.*/
                InputStreamClosed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_ctorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InputStreamClosed()", $t.Line = "23", $t));
                    Bridge.ClientTest.IO.StreamReader_ctorTests.InputStreamClosed();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.InputStreamClosed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingFalse:static start.*/
                CreationFromMemoryStreamWithEncodingFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_ctorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreationFromMemoryStreamWithEncodingFalse()", $t.Line = "32", $t));
                    Bridge.ClientTest.IO.StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingTrue:static start.*/
                CreationFromMemoryStreamWithEncodingTrue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_ctorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_ctorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreationFromMemoryStreamWithEncodingTrue()", $t.Line = "44", $t));
                    Bridge.ClientTest.IO.StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingTrue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.CreationFromMemoryStreamWithEncodingTrue:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamReader_ctorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamReader/StreamReader.CtorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_ctorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_StringCtorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.NullArgs_ThrowsArgumentNullException:static start.*/
                NullArgs_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullArgs_ThrowsArgumentNullException()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.StreamReader_StringCtorTests.NullArgs_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.NullArgs_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.EmptyPath_ThrowsArgumentException:static start.*/
                EmptyPath_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyPath_ThrowsArgumentException()", $t.Line = "30", $t));
                    Bridge.ClientTest.IO.StreamReader_StringCtorTests.EmptyPath_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.EmptyPath_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException:static start.*/
                NegativeBufferSize_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReader_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReader_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeBufferSize_ThrowsArgumentOutOfRangeException()", $t.Line = "40", $t));
                    Bridge.ClientTest.IO.StreamReader_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamReader_StringCtorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamReader/StreamReader.StringCtorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReader_StringCtorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectClosedReadLine:static start.*/
                ObjectClosedReadLine: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectClosedReadLine()", $t.Line = "83", $t));
                    t.Fixture.ObjectClosedReadLine();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectClosedReadLine:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectClosedReadLineBaseStream:static start.*/
                ObjectClosedReadLineBaseStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectClosedReadLineBaseStream()", $t.Line = "93", $t));
                    t.Fixture.ObjectClosedReadLineBaseStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectClosedReadLineBaseStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.Synchronized_NewObject:static start.*/
                Synchronized_NewObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Synchronized_NewObject()", $t.Line = "103", $t));
                    t.Fixture.Synchronized_NewObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.Synchronized_NewObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStream:static start.*/
                EndOfStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStream()", $t.Line = "126", $t));
                    t.Fixture.EndOfStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamSmallDataLargeBuffer:static start.*/
                EndOfStreamSmallDataLargeBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStreamSmallDataLargeBuffer()", $t.Line = "138", $t));
                    t.Fixture.EndOfStreamSmallDataLargeBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamSmallDataLargeBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamLargeDataSmallBuffer:static start.*/
                EndOfStreamLargeDataSmallBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStreamLargeDataSmallBuffer()", $t.Line = "150", $t));
                    t.Fixture.EndOfStreamLargeDataSmallBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamLargeDataSmallBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamLargeDataLargeBuffer:static start.*/
                EndOfStreamLargeDataLargeBuffer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndOfStreamLargeDataLargeBuffer()", $t.Line = "162", $t));
                    t.Fixture.EndOfStreamLargeDataLargeBuffer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EndOfStreamLargeDataLargeBuffer:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ReadToEnd:static start.*/
                ReadToEnd: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReadToEnd()", $t.Line = "174", $t));
                    t.Fixture.ReadToEnd();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ReadToEnd:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.GetBaseStream:static start.*/
                GetBaseStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetBaseStream()", $t.Line = "183", $t));
                    t.Fixture.GetBaseStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.GetBaseStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.TestRead:static start.*/
                TestRead: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestRead()", $t.Line = "192", $t));
                    t.Fixture.TestRead();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.TestRead:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.TestPeek:static start.*/
                TestPeek: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestPeek()", $t.Line = "208", $t));
                    t.Fixture.TestPeek();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.TestPeek:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentNullOnNullArray:static start.*/
                ArgumentNullOnNullArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentNullOnNullArray()", $t.Line = "223", $t));
                    t.Fixture.ArgumentNullOnNullArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentNullOnNullArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentOutOfRangeOnInvalidOffset:static start.*/
                ArgumentOutOfRangeOnInvalidOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentOutOfRangeOnInvalidOffset()", $t.Line = "232", $t));
                    t.Fixture.ArgumentOutOfRangeOnInvalidOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentOutOfRangeOnInvalidOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentOutOfRangeOnNegativCount:static start.*/
                ArgumentOutOfRangeOnNegativCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentOutOfRangeOnNegativCount()", $t.Line = "239", $t));
                    t.Fixture.ArgumentOutOfRangeOnNegativCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentOutOfRangeOnNegativCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentExceptionOffsetAndCount:static start.*/
                ArgumentExceptionOffsetAndCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArgumentExceptionOffsetAndCount()", $t.Line = "246", $t));
                    t.Fixture.ArgumentExceptionOffsetAndCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ArgumentExceptionOffsetAndCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedExceptionDisposedStream:static start.*/
                ObjectDisposedExceptionDisposedStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectDisposedExceptionDisposedStream()", $t.Line = "253", $t));
                    t.Fixture.ObjectDisposedExceptionDisposedStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedExceptionDisposedStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedExceptionDisposedBaseStream:static start.*/
                ObjectDisposedExceptionDisposedBaseStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectDisposedExceptionDisposedBaseStream()", $t.Line = "262", $t));
                    t.Fixture.ObjectDisposedExceptionDisposedBaseStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedExceptionDisposedBaseStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EmptyStream:static start.*/
                EmptyStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyStream()", $t.Line = "272", $t));
                    t.Fixture.EmptyStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.EmptyStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReads1:static start.*/
                VanillaReads1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VanillaReads1()", $t.Line = "283", $t));
                    t.Fixture.VanillaReads1();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReads1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReads2WithAsync:static start.*/
                VanillaReads2WithAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VanillaReads2WithAsync()", $t.Line = "300", $t));
                    t.Fixture.VanillaReads2WithAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReads2WithAsync:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedReadLine:static start.*/
                ObjectDisposedReadLine: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectDisposedReadLine()", $t.Line = "318", $t));
                    t.Fixture.ObjectDisposedReadLine();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedReadLine:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedReadLineBaseStream:static start.*/
                ObjectDisposedReadLineBaseStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ObjectDisposedReadLineBaseStream()", $t.Line = "328", $t));
                    t.Fixture.ObjectDisposedReadLineBaseStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ObjectDisposedReadLineBaseStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReadLines:static start.*/
                VanillaReadLines: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VanillaReadLines()", $t.Line = "338", $t));
                    t.Fixture.VanillaReadLines();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReadLines:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReadLines2:static start.*/
                VanillaReadLines2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VanillaReadLines2()", $t.Line = "360", $t));
                    t.Fixture.VanillaReadLines2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.VanillaReadLines2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ContinuousNewLinesAndTabsAsync:static start.*/
                ContinuousNewLinesAndTabsAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinuousNewLinesAndTabsAsync()", $t.Line = "374", $t));
                    t.Fixture.ContinuousNewLinesAndTabsAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.ContinuousNewLinesAndTabsAsync:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.CurrentEncoding:static start.*/
                CurrentEncoding: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CurrentEncoding()", $t.Line = "396", $t));
                    t.Fixture.CurrentEncoding();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.CurrentEncoding:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamReaderTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamReader/StreamReaderTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderWithBufferedStream_Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamReaderWithBufferedStream_Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamReaderWithBufferedStream_Tests)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderWithBufferedStream_Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamReaderWithBufferedStream_Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderWithBufferedStream_Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamReaderWithBufferedStream_Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests.CopyToAsyncTest:static start.*/
                CopyToAsyncTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToAsyncTest()", $t.Line = "21", $t));
                    t.Fixture.CopyToAsyncTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests.CopyToAsyncTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.AsyncTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriter_StringCtorTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.NullArgs_ThrowsArgumentNullException:static start.*/
                NullArgs_ThrowsArgumentNullException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriter_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullArgs_ThrowsArgumentNullException()", $t.Line = "18", $t));
                    Bridge.ClientTest.IO.StreamWriter_StringCtorTests.NullArgs_ThrowsArgumentNullException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.NullArgs_ThrowsArgumentNullException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.EmptyPath_ThrowsArgumentException:static start.*/
                EmptyPath_ThrowsArgumentException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriter_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyPath_ThrowsArgumentException()", $t.Line = "31", $t));
                    Bridge.ClientTest.IO.StreamWriter_StringCtorTests.EmptyPath_ThrowsArgumentException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.EmptyPath_ThrowsArgumentException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException:static start.*/
                NegativeBufferSize_ThrowsArgumentOutOfRangeException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriter_StringCtorTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriter_StringCtorTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeBufferSize_ThrowsArgumentOutOfRangeException()", $t.Line = "41", $t));
                    Bridge.ClientTest.IO.StreamWriter_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.NegativeBufferSize_ThrowsArgumentOutOfRangeException:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamWriter_StringCtorTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.StringCtorTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriter_StringCtorTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_CloseTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriterWithBufferedStream_CloseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriterWithBufferedStream_CloseTests)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_CloseTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamWriterWithBufferedStream_CloseTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_CloseTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_CloseTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriterWithBufferedStream_FlushTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriterWithBufferedStream_FlushTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests.WriteAfterRead_NonSeekableStream_Throws:static start.*/
                WriteAfterRead_NonSeekableStream_Throws: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriterWithBufferedStream_FlushTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriterWithBufferedStream_FlushTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteAfterRead_NonSeekableStream_Throws()", $t.Line = "151", $t));
                    t.Fixture.WriteAfterRead_NonSeekableStream_Throws();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests.WriteAfterRead_NonSeekableStream_Throws:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamWriterWithBufferedStream_FlushTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_FlushTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_WriteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StreamWriterWithBufferedStream_WriteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StreamWriterWithBufferedStream_WriteTests)],
        $kind: "nested class",
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_WriteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StreamWriterWithBufferedStream_WriteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/BufferedStream/BufferedStreamTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_WriteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StreamWriterWithBufferedStream_WriteTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "19", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "28", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ConstructorWithCapacityWorks:static start.*/
                ConstructorWithCapacityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithCapacityWorks()", $t.Line = "36", $t));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ConstructorWithCapacityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.InitialTextConstructorWorks:static start.*/
                InitialTextConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InitialTextConstructorWorks()", $t.Line = "44", $t));
                    t.Fixture.InitialTextConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.InitialTextConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.InitialTextConstructorWithCapacityWorks:static start.*/
                InitialTextConstructorWithCapacityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InitialTextConstructorWithCapacityWorks()", $t.Line = "52", $t));
                    t.Fixture.InitialTextConstructorWithCapacityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.InitialTextConstructorWithCapacityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SubstringConstructorWorks:static start.*/
                SubstringConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringConstructorWorks()", $t.Line = "60", $t));
                    t.Fixture.SubstringConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SubstringConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SubstringConstructorWorks_SPI_1615:static start.*/
                SubstringConstructorWorks_SPI_1615: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringConstructorWorks_SPI_1615()", $t.Line = "68", $t));
                    t.Fixture.SubstringConstructorWorks_SPI_1615();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SubstringConstructorWorks_SPI_1615:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendBoolWorks:static start.*/
                AppendBoolWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendBoolWorks()", $t.Line = "78", $t));
                    t.Fixture.AppendBoolWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendBoolWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendCharWorks:static start.*/
                AppendCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendCharWorks()", $t.Line = "87", $t));
                    t.Fixture.AppendCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendIntWorks:static start.*/
                AppendIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendIntWorks()", $t.Line = "96", $t));
                    t.Fixture.AppendIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendDoubleWorks:static start.*/
                AppendDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendDoubleWorks()", $t.Line = "105", $t));
                    t.Fixture.AppendDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendObjectWorks:static start.*/
                AppendObjectWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendObjectWorks()", $t.Line = "114", $t));
                    t.Fixture.AppendObjectWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendObjectWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendStringWorks:static start.*/
                AppendStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendStringWorks()", $t.Line = "123", $t));
                    t.Fixture.AppendStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineWorks:static start.*/
                AppendLineWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineWorks()", $t.Line = "132", $t));
                    t.Fixture.AppendLineWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineStringWorks:static start.*/
                AppendLineStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineStringWorks()", $t.Line = "141", $t));
                    t.Fixture.AppendLineStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineBoolWorks:static start.*/
                AppendLineBoolWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineBoolWorks()", $t.Line = "150", $t));
                    t.Fixture.AppendLineBoolWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineBoolWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineCharWorks:static start.*/
                AppendLineCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineCharWorks()", $t.Line = "159", $t));
                    t.Fixture.AppendLineCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineIntWorks:static start.*/
                AppendLineIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineIntWorks()", $t.Line = "168", $t));
                    t.Fixture.AppendLineIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineDoubleWorks:static start.*/
                AppendLineDoubleWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineDoubleWorks()", $t.Line = "177", $t));
                    t.Fixture.AppendLineDoubleWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineDoubleWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineObjectWorks:static start.*/
                AppendLineObjectWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AppendLineObjectWorks()", $t.Line = "186", $t));
                    t.Fixture.AppendLineObjectWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.AppendLineObjectWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ClearWorks:static start.*/
                ClearWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClearWorks()", $t.Line = "195", $t));
                    t.Fixture.ClearWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ClearWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SetLengthWorks:static start.*/
                SetLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetLengthWorks()", $t.Line = "204", $t));
                    t.Fixture.SetLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.SetLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "243", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.LengthPropertyWorks:static start.*/
                LengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthPropertyWorks()", $t.Line = "251", $t));
                    t.Fixture.LengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.LengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilders:static start.*/
                StringBuilders: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, 21, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringBuilders()", $t.Line = "279", $t));
                    Bridge.ClientTest.Text.StringBuilderTests.StringBuilders();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilders:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilderIndexerGetWorks:static start.*/
                StringBuilderIndexerGetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringBuilderIndexerGetWorks()", $t.Line = "353", $t));
                    Bridge.ClientTest.Text.StringBuilderTests.StringBuilderIndexerGetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilderIndexerGetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilderIndexerSetWorks:static start.*/
                StringBuilderIndexerSetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringBuilderIndexerSetWorks()", $t.Line = "377", $t));
                    Bridge.ClientTest.Text.StringBuilderTests.StringBuilderIndexerSetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.StringBuilderIndexerSetWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.StringBuilderTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/StringBuilderTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringBuilderTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.FormatShouldThrow:static start.*/
                FormatShouldThrow: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatShouldThrow()", $t.Line = "20", $t));
                    t.Fixture.FormatShouldThrow();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.FormatShouldThrow:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.FormatProviderShouldThrow:static start.*/
                FormatProviderShouldThrow: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatProviderShouldThrow()", $t.Line = "30", $t));
                    t.Fixture.FormatProviderShouldThrow();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.FormatProviderShouldThrow:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.Simple:static start.*/
                Simple: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Simple()", $t.Line = "42", $t));
                    t.Fixture.Simple();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.Simple:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.ValueFormating:static start.*/
                ValueFormating: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ValueFormating()", $t.Line = "50", $t));
                    t.Fixture.ValueFormating();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.ValueFormating:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.SpaceControlling:static start.*/
                SpaceControlling: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SpaceControlling()", $t.Line = "58", $t));
                    t.Fixture.SpaceControlling();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.SpaceControlling:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.Aligment:static start.*/
                Aligment: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Aligment()", $t.Line = "76", $t));
                    t.Fixture.Aligment();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.Aligment:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadIntegerWithLeadingZeros:static start.*/
                PadIntegerWithLeadingZeros: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadIntegerWithLeadingZeros()", $t.Line = "113", $t));
                    t.Fixture.PadIntegerWithLeadingZeros();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadIntegerWithLeadingZeros:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadIntegerWithSpecificNumberLeadingZeros:static start.*/
                PadIntegerWithSpecificNumberLeadingZeros: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadIntegerWithSpecificNumberLeadingZeros()", $t.Line = "134", $t));
                    t.Fixture.PadIntegerWithSpecificNumberLeadingZeros();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadIntegerWithSpecificNumberLeadingZeros:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadNumericWithLeadingZerosToLength:static start.*/
                PadNumericWithLeadingZerosToLength: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadNumericWithLeadingZerosToLength()", $t.Line = "144", $t));
                    t.Fixture.PadNumericWithLeadingZerosToLength();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadNumericWithLeadingZerosToLength:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadNumericWithSpecificNumberOfLeadingZeros:static start.*/
                PadNumericWithSpecificNumberOfLeadingZeros: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadNumericWithSpecificNumberOfLeadingZeros()", $t.Line = "159", $t));
                    t.Fixture.PadNumericWithSpecificNumberOfLeadingZeros();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.PadNumericWithSpecificNumberOfLeadingZeros:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Format.StringFormatTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Format/StringFormatTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringFormatTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TypePropertiesAreCorrect_SPI_1597:static start.*/
                TypePropertiesAreCorrect_SPI_1597: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1597()", $t.Line = "50", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1597();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TypePropertiesAreCorrect_SPI_1597:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "70", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharAndCountConstructorWorks:static start.*/
                CharAndCountConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharAndCountConstructorWorks()", $t.Line = "76", $t));
                    t.Fixture.CharAndCountConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharAndCountConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharArrayConstructorWorks:static start.*/
                CharArrayConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharArrayConstructorWorks()", $t.Line = "82", $t));
                    t.Fixture.CharArrayConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharArrayConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharArrayWithStartIndexAndLengthConstructorWorks:static start.*/
                CharArrayWithStartIndexAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CharArrayWithStartIndexAndLengthConstructorWorks()", $t.Line = "88", $t));
                    t.Fixture.CharArrayWithStartIndexAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CharArrayWithStartIndexAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CopyToWorks:static start.*/
                CopyToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyToWorks()", $t.Line = "118", $t));
                    t.Fixture.CopyToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CopyToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EmptyFieldWorks:static start.*/
                EmptyFieldWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EmptyFieldWorks()", $t.Line = "148", $t));
                    t.Fixture.EmptyFieldWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EmptyFieldWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LengthPropertyWorks:static start.*/
                LengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthPropertyWorks()", $t.Line = "154", $t));
                    t.Fixture.LengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareToWorks_353:static start.*/
                CompareToWorks_353: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks_353()", $t.Line = "161", $t));
                    t.Fixture.CompareToWorks_353();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareToWorks_353:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareWorks:static start.*/
                CompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWorks()", $t.Line = "177", $t));
                    t.Fixture.CompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareWithIgnoreCaseArgWorks:static start.*/
                CompareWithIgnoreCaseArgWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWithIgnoreCaseArgWorks()", $t.Line = "189", $t));
                    t.Fixture.CompareWithIgnoreCaseArgWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareWithIgnoreCaseArgWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ConcatWorks:static start.*/
                ConcatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWorks()", $t.Line = "204", $t));
                    t.Fixture.ConcatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ConcatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ConcatWithObjectsWorks:static start.*/
                ConcatWithObjectsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConcatWithObjectsWorks()", $t.Line = "217", $t));
                    t.Fixture.ConcatWithObjectsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ConcatWithObjectsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EndsWithCharWorks:static start.*/
                EndsWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndsWithCharWorks()", $t.Line = "231", $t));
                    t.Fixture.EndsWithCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EndsWithCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EndsWithStringWorks:static start.*/
                EndsWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EndsWithStringWorks()", $t.Line = "238", $t));
                    t.Fixture.EndsWithStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.EndsWithStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StaticEqualsWorks:static start.*/
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "245", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StaticEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "272", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksExtended:static start.*/
                FormatWorksExtended: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorksExtended()", $t.Line = "291", $t));
                    t.Fixture.FormatWorksExtended();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksExtended:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksWithIFormattable_SPI_1598:static start.*/
                FormatWorksWithIFormattable_SPI_1598: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorksWithIFormattable_SPI_1598()", $t.Line = "303", $t));
                    t.Fixture.FormatWorksWithIFormattable_SPI_1598();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksWithIFormattable_SPI_1598:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksWithIFormattableAndFormatProvider_SPI_1598:static start.*/
                FormatWorksWithIFormattableAndFormatProvider_SPI_1598: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorksWithIFormattableAndFormatProvider_SPI_1598()", $t.Line = "311", $t));
                    t.Fixture.FormatWorksWithIFormattableAndFormatProvider_SPI_1598();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatWorksWithIFormattableAndFormatProvider_SPI_1598:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatCanUseEscapedBraces:static start.*/
                FormatCanUseEscapedBraces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatCanUseEscapedBraces()", $t.Line = "319", $t));
                    t.Fixture.FormatCanUseEscapedBraces();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.FormatCanUseEscapedBraces:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWorks:static start.*/
                IndexOfCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWorks()", $t.Line = "325", $t));
                    t.Fixture.IndexOfCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWorks:static start.*/
                IndexOfStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWorks()", $t.Line = "332", $t));
                    t.Fixture.IndexOfStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWithStartIndexWorks:static start.*/
                IndexOfCharWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWithStartIndexWorks()", $t.Line = "339", $t));
                    t.Fixture.IndexOfCharWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWithStartIndexAndCountWorks:static start.*/
                IndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfCharWithStartIndexAndCountWorks()", $t.Line = "346", $t));
                    t.Fixture.IndexOfCharWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfCharWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWithStartIndexWorks:static start.*/
                IndexOfStringWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWithStartIndexWorks()", $t.Line = "354", $t));
                    t.Fixture.IndexOfStringWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWithStartIndexAndCountWorks:static start.*/
                IndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfStringWithStartIndexAndCountWorks()", $t.Line = "361", $t));
                    t.Fixture.IndexOfStringWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfStringWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWorks:static start.*/
                IndexOfAnyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWorks()", $t.Line = "369", $t));
                    t.Fixture.IndexOfAnyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWithStartIndexWorks:static start.*/
                IndexOfAnyWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWithStartIndexWorks()", $t.Line = "378", $t));
                    t.Fixture.IndexOfAnyWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWithStartIndexAndCountWorks:static start.*/
                IndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfAnyWithStartIndexAndCountWorks()", $t.Line = "387", $t));
                    t.Fixture.IndexOfAnyWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IndexOfAnyWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.InsertWorks:static start.*/
                InsertWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InsertWorks()", $t.Line = "397", $t));
                    t.Fixture.InsertWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.InsertWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IsNullOrEmptyWorks:static start.*/
                IsNullOrEmptyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNullOrEmptyWorks()", $t.Line = "403", $t));
                    t.Fixture.IsNullOrEmptyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IsNullOrEmptyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWorks:static start.*/
                LastIndexOfCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWorks()", $t.Line = "412", $t));
                    t.Fixture.LastIndexOfCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWorks:static start.*/
                LastIndexOfStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWorks()", $t.Line = "419", $t));
                    t.Fixture.LastIndexOfStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWithStartIndexWorks:static start.*/
                LastIndexOfCharWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWithStartIndexWorks()", $t.Line = "426", $t));
                    t.Fixture.LastIndexOfCharWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWithStartIndexWorks:static start.*/
                LastIndexOfStringWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWithStartIndexWorks()", $t.Line = "433", $t));
                    t.Fixture.LastIndexOfStringWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWithStartIndexAndCountWorks:static start.*/
                LastIndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfCharWithStartIndexAndCountWorks()", $t.Line = "440", $t));
                    t.Fixture.LastIndexOfCharWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfCharWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWithStartIndexAndCountWorks:static start.*/
                LastIndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfStringWithStartIndexAndCountWorks()", $t.Line = "448", $t));
                    t.Fixture.LastIndexOfStringWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfStringWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWorks:static start.*/
                LastIndexOfAnyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWorks()", $t.Line = "456", $t));
                    t.Fixture.LastIndexOfAnyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWithStartIndexWorks:static start.*/
                LastIndexOfAnyWithStartIndexWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWithStartIndexWorks()", $t.Line = "465", $t));
                    t.Fixture.LastIndexOfAnyWithStartIndexWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWithStartIndexWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWithStartIndexAndCountWorks:static start.*/
                LastIndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LastIndexOfAnyWithStartIndexAndCountWorks()", $t.Line = "474", $t));
                    t.Fixture.LastIndexOfAnyWithStartIndexAndCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.LastIndexOfAnyWithStartIndexAndCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadLeftWorks:static start.*/
                PadLeftWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadLeftWorks()", $t.Line = "484", $t));
                    t.Fixture.PadLeftWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadLeftWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadLeftWithCharWorks:static start.*/
                PadLeftWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadLeftWithCharWorks()", $t.Line = "490", $t));
                    t.Fixture.PadLeftWithCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadLeftWithCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadRightWorks:static start.*/
                PadRightWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadRightWorks()", $t.Line = "496", $t));
                    t.Fixture.PadRightWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadRightWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadRightWithCharWorks:static start.*/
                PadRightWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PadRightWithCharWorks()", $t.Line = "502", $t));
                    t.Fixture.PadRightWithCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.PadRightWithCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.RemoveWorks:static start.*/
                RemoveWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWorks()", $t.Line = "508", $t));
                    t.Fixture.RemoveWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.RemoveWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.RemoveWithCountWorks:static start.*/
                RemoveWithCountWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RemoveWithCountWorks()", $t.Line = "521", $t));
                    t.Fixture.RemoveWithCountWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.RemoveWithCountWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ReplaceWorks:static start.*/
                ReplaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceWorks()", $t.Line = "549", $t));
                    t.Fixture.ReplaceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ReplaceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ReplaceCharWorks:static start.*/
                ReplaceCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ReplaceCharWorks()", $t.Line = "556", $t));
                    t.Fixture.ReplaceCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ReplaceCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharWorks:static start.*/
                SplitWithCharWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharWorks()", $t.Line = "562", $t));
                    t.Fixture.SplitWithCharWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsAndLimitWorks:static start.*/
                SplitWithCharsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsAndLimitWorks()", $t.Line = "568", $t));
                    t.Fixture.SplitWithCharsAndLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsAndLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsAndStringSplitOptionsAndLimitWorks:static start.*/
                SplitWithCharsAndStringSplitOptionsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsAndStringSplitOptionsAndLimitWorks()", $t.Line = "574", $t));
                    t.Fixture.SplitWithCharsAndStringSplitOptionsAndLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsAndStringSplitOptionsAndLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SomeNetSplitTests:static start.*/
                SomeNetSplitTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SomeNetSplitTests()", $t.Line = "580", $t));
                    t.Fixture.SomeNetSplitTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SomeNetSplitTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsWorks:static start.*/
                SplitWithCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithCharsWorks()", $t.Line = "612", $t));
                    t.Fixture.SplitWithCharsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithCharsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithStringsWorks:static start.*/
                SplitWithStringsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringsWorks()", $t.Line = "620", $t));
                    t.Fixture.SplitWithStringsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithStringsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithStringsAndLimitWorks:static start.*/
                SplitWithStringsAndLimitWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SplitWithStringsAndLimitWorks()", $t.Line = "627", $t));
                    t.Fixture.SplitWithStringsAndLimitWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SplitWithStringsAndLimitWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StartsWithStringWorks:static start.*/
                StartsWithStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StartsWithStringWorks()", $t.Line = "633", $t));
                    t.Fixture.StartsWithStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StartsWithStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SubstringWorks:static start.*/
                SubstringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringWorks()", $t.Line = "640", $t));
                    t.Fixture.SubstringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SubstringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SubstringWithLengthWorks:static start.*/
                SubstringWithLengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubstringWithLengthWorks()", $t.Line = "668", $t));
                    t.Fixture.SubstringWithLengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.SubstringWithLengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToLowerCaseWorks:static start.*/
                ToLowerCaseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLowerCaseWorks()", $t.Line = "674", $t));
                    t.Fixture.ToLowerCaseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToLowerCaseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToUpperCaseWorks:static start.*/
                ToUpperCaseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUpperCaseWorks()", $t.Line = "680", $t));
                    t.Fixture.ToUpperCaseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToUpperCaseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToLowerWorks:static start.*/
                ToLowerWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToLowerWorks()", $t.Line = "686", $t));
                    t.Fixture.ToLowerWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToLowerWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToUpperWorks:static start.*/
                ToUpperWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToUpperWorks()", $t.Line = "692", $t));
                    t.Fixture.ToUpperWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToUpperWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimWorks:static start.*/
                TrimWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimWorks()", $t.Line = "698", $t));
                    t.Fixture.TrimWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimCharsWorks:static start.*/
                TrimCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimCharsWorks()", $t.Line = "704", $t));
                    t.Fixture.TrimCharsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimCharsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimStartCharsWorks:static start.*/
                TrimStartCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimStartCharsWorks()", $t.Line = "710", $t));
                    t.Fixture.TrimStartCharsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimStartCharsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimEndCharsWorks:static start.*/
                TrimEndCharsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimEndCharsWorks()", $t.Line = "716", $t));
                    t.Fixture.TrimEndCharsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimEndCharsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimStartWorks:static start.*/
                TrimStartWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimStartWorks()", $t.Line = "722", $t));
                    t.Fixture.TrimStartWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimStartWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimEndWorks:static start.*/
                TrimEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrimEndWorks()", $t.Line = "728", $t));
                    t.Fixture.TrimEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.TrimEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringEqualityWorks:static start.*/
                StringEqualityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringEqualityWorks()", $t.Line = "734", $t));
                    t.Fixture.StringEqualityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringEqualityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringInequalityWorks:static start.*/
                StringInequalityWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringInequalityWorks()", $t.Line = "744", $t));
                    t.Fixture.StringInequalityWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringInequalityWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringIndexingWorks:static start.*/
                StringIndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringIndexingWorks()", $t.Line = "754", $t));
                    t.Fixture.StringIndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringIndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "764", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.InstanceEqualsWorks:static start.*/
                InstanceEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstanceEqualsWorks()", $t.Line = "774", $t));
                    t.Fixture.InstanceEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.InstanceEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "789", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringEqualsWorks:static start.*/
                StringEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringEqualsWorks()", $t.Line = "807", $t));
                    t.Fixture.StringEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StringEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StaticCompareToWorks:static start.*/
                StaticCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticCompareToWorks()", $t.Line = "818", $t));
                    t.Fixture.StaticCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.StaticCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "827", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "838", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.IComparableCompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.JoinWorks_SPI_1599:static start.*/
                JoinWorks_SPI_1599: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "JoinWorks_SPI_1599()", $t.Line = "849", $t));
                    t.Fixture.JoinWorks_SPI_1599();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.JoinWorks_SPI_1599:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "864", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToCharArrayWorks:static start.*/
                ToCharArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToCharArrayWorks()", $t.Line = "873", $t));
                    t.Fixture.ToCharArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.ToCharArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.Strings:static start.*/
                Strings: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Strings()", $t.Line = "880", $t));
                    Bridge.ClientTest.SimpleTypes.StringTests.Strings();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.Strings:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.Enumerable:static start.*/
                Enumerable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Enumerable()", $t.Line = "1006", $t));
                    Bridge.ClientTest.SimpleTypes.StringTests.Enumerable();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.Enumerable:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.StringTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/StringTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Ctor:static start.*/
                Ctor: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Ctor()", $t.Line = "57", $t));
                    Bridge.ClientTest.IO.StringWriterTests.Ctor();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Ctor:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CtorWithStringBuilder:static start.*/
                CtorWithStringBuilder: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CtorWithStringBuilder()", $t.Line = "64", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CtorWithStringBuilder();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CtorWithStringBuilder:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CtorWithCultureInfo:static start.*/
                CtorWithCultureInfo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CtorWithCultureInfo()", $t.Line = "73", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CtorWithCultureInfo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CtorWithCultureInfo:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.SimpleWriter:static start.*/
                SimpleWriter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleWriter()", $t.Line = "82", $t));
                    Bridge.ClientTest.IO.StringWriterTests.SimpleWriter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.SimpleWriter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteArray:static start.*/
                WriteArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteArray()", $t.Line = "91", $t));
                    Bridge.ClientTest.IO.StringWriterTests.WriteArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNullArray:static start.*/
                CantWriteNullArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantWriteNullArray()", $t.Line = "107", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CantWriteNullArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNullArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNegativeOffset:static start.*/
                CantWriteNegativeOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantWriteNegativeOffset()", $t.Line = "114", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CantWriteNegativeOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNegativeOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNegativeCount:static start.*/
                CantWriteNegativeCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantWriteNegativeCount()", $t.Line = "121", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CantWriteNegativeCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteNegativeCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteIndexLargeValues:static start.*/
                CantWriteIndexLargeValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantWriteIndexLargeValues()", $t.Line = "128", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CantWriteIndexLargeValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteIndexLargeValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteCountLargeValues:static start.*/
                CantWriteCountLargeValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CantWriteCountLargeValues()", $t.Line = "139", $t));
                    Bridge.ClientTest.IO.StringWriterTests.CantWriteCountLargeValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.CantWriteCountLargeValues:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithOffset:static start.*/
                WriteWithOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteWithOffset()", $t.Line = "150", $t));
                    Bridge.ClientTest.IO.StringWriterTests.WriteWithOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithLargeIndex:static start.*/
                WriteWithLargeIndex: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteWithLargeIndex()", $t.Line = "168", $t));
                    Bridge.ClientTest.IO.StringWriterTests.WriteWithLargeIndex();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithLargeIndex:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithLargeCount:static start.*/
                WriteWithLargeCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteWithLargeCount()", $t.Line = "186", $t));
                    Bridge.ClientTest.IO.StringWriterTests.WriteWithLargeCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.WriteWithLargeCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NewStringWriterIsEmpty:static start.*/
                NewStringWriterIsEmpty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewStringWriterIsEmpty()", $t.Line = "205", $t));
                    Bridge.ClientTest.IO.StringWriterTests.NewStringWriterIsEmpty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NewStringWriterIsEmpty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NewStringWriterHasEmptyStringBuilder:static start.*/
                NewStringWriterHasEmptyStringBuilder: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NewStringWriterHasEmptyStringBuilder()", $t.Line = "212", $t));
                    Bridge.ClientTest.IO.StringWriterTests.NewStringWriterHasEmptyStringBuilder();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NewStringWriterHasEmptyStringBuilder:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.ToStringReturnsWrittenData:static start.*/
                ToStringReturnsWrittenData: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringReturnsWrittenData()", $t.Line = "219", $t));
                    Bridge.ClientTest.IO.StringWriterTests.ToStringReturnsWrittenData();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.ToStringReturnsWrittenData:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.StringBuilderHasCorrectData:static start.*/
                StringBuilderHasCorrectData: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StringBuilderHasCorrectData()", $t.Line = "230", $t));
                    Bridge.ClientTest.IO.StringWriterTests.StringBuilderHasCorrectData();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.StringBuilderHasCorrectData:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Closed_DisposedExceptions:static start.*/
                Closed_DisposedExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Closed_DisposedExceptions()", $t.Line = "241", $t));
                    Bridge.ClientTest.IO.StringWriterTests.Closed_DisposedExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Closed_DisposedExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Disposed_DisposedExceptions:static start.*/
                Disposed_DisposedExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Disposed_DisposedExceptions()", $t.Line = "249", $t));
                    Bridge.ClientTest.IO.StringWriterTests.Disposed_DisposedExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.Disposed_DisposedExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.FlushAsyncWorks:static start.*/
                FlushAsyncWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FlushAsyncWorks()", $t.Line = "264", $t));
                    Bridge.ClientTest.IO.StringWriterTests.FlushAsyncWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.FlushAsyncWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWrites:static start.*/
                MiscWrites: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MiscWrites()", $t.Line = "277", $t));
                    Bridge.ClientTest.IO.StringWriterTests.MiscWrites();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWrites:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWritesAsync:static start.*/
                MiscWritesAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MiscWritesAsync()", $t.Line = "287", $t));
                    Bridge.ClientTest.IO.StringWriterTests.MiscWritesAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWritesAsync:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWriteLineAsync:static start.*/
                MiscWriteLineAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MiscWriteLineAsync()", $t.Line = "298", $t));
                    Bridge.ClientTest.IO.StringWriterTests.MiscWriteLineAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.MiscWriteLineAsync:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.GetEncoding:static start.*/
                GetEncoding: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEncoding()", $t.Line = "311", $t));
                    Bridge.ClientTest.IO.StringWriterTests.GetEncoding();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.GetEncoding:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteMisc:static start.*/
                TestWriteMisc: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteMisc()", $t.Line = "318", $t));
                    Bridge.ClientTest.IO.StringWriterTests.TestWriteMisc();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteMisc:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteObject:static start.*/
                TestWriteObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteObject()", $t.Line = "345", $t));
                    Bridge.ClientTest.IO.StringWriterTests.TestWriteObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineMisc:static start.*/
                TestWriteLineMisc: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineMisc()", $t.Line = "353", $t));
                    Bridge.ClientTest.IO.StringWriterTests.TestWriteLineMisc();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineMisc:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineObject:static start.*/
                TestWriteLineObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineObject()", $t.Line = "379", $t));
                    Bridge.ClientTest.IO.StringWriterTests.TestWriteLineObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineAsyncCharArray:static start.*/
                TestWriteLineAsyncCharArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineAsyncCharArray()", $t.Line = "387", $t));
                    Bridge.ClientTest.IO.StringWriterTests.TestWriteLineAsyncCharArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.TestWriteLineAsyncCharArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NullNewLineAsync:static start.*/
                NullNewLineAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.StringWriterTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringWriterTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullNewLineAsync()", $t.Line = "396", $t));
                    t.Fixture.NullNewLineAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.NullNewLineAsync:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.StringWriterTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StringWriter/StringWriterTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+StringWriterTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestClear:static start.*/
                TestClear: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestClear()", $t.Line = "85", $t));
                    try {
                        t.Fixture.TestClear();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestClear:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLine:static start.*/
                TestWriteLine: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLine()", $t.Line = "110", $t));
                    try {
                        t.Fixture.TestWriteLine();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLine:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineMultiline:static start.*/
                TestWriteLineMultiline: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineMultiline()", $t.Line = "117", $t));
                    try {
                        t.Fixture.TestWriteLineMultiline();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineMultiline:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineBool:static start.*/
                TestWriteLineBool: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineBool()", $t.Line = "124", $t));
                    try {
                        t.Fixture.TestWriteLineBool();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineBool:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineChar:static start.*/
                TestWriteLineChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineChar()", $t.Line = "134", $t));
                    try {
                        t.Fixture.TestWriteLineChar();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDecimal:static start.*/
                TestWriteLineDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineDecimal()", $t.Line = "141", $t));
                    try {
                        t.Fixture.TestWriteLineDecimal();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDouble:static start.*/
                TestWriteLineDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineDouble()", $t.Line = "169", $t));
                    try {
                        t.Fixture.TestWriteLineDouble();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt32:static start.*/
                TestWriteLineInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineInt32()", $t.Line = "197", $t));
                    try {
                        t.Fixture.TestWriteLineInt32();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt64:static start.*/
                TestWriteLineInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineInt64()", $t.Line = "210", $t));
                    try {
                        t.Fixture.TestWriteLineInt64();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineObject:static start.*/
                TestWriteLineObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineObject()", $t.Line = "223", $t));
                    try {
                        t.Fixture.TestWriteLineObject();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineSingle:static start.*/
                TestWriteLineSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineSingle()", $t.Line = "296", $t));
                    try {
                        t.Fixture.TestWriteLineSingle();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineString:static start.*/
                TestWriteLineString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineString()", $t.Line = "309", $t));
                    try {
                        t.Fixture.TestWriteLineString();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString1:static start.*/
                TestWriteLineFormatString1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineFormatString1()", $t.Line = "322", $t));
                    try {
                        t.Fixture.TestWriteLineFormatString1();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString2:static start.*/
                TestWriteLineFormatString2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineFormatString2()", $t.Line = "345", $t));
                    try {
                        t.Fixture.TestWriteLineFormatString2();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString3:static start.*/
                TestWriteLineFormatString3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineFormatString3()", $t.Line = "372", $t));
                    try {
                        t.Fixture.TestWriteLineFormatString3();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString4:static start.*/
                TestWriteLineFormatString4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineFormatString4()", $t.Line = "399", $t));
                    try {
                        t.Fixture.TestWriteLineFormatString4();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString5:static start.*/
                TestWriteLineFormatString5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineFormatString5()", $t.Line = "426", $t));
                    try {
                        t.Fixture.TestWriteLineFormatString5();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineFormatString5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt32:static start.*/
                TestWriteLineUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineUInt32()", $t.Line = "453", $t));
                    try {
                        t.Fixture.TestWriteLineUInt32();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt64:static start.*/
                TestWriteLineUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineUInt64()", $t.Line = "465", $t));
                    try {
                        t.Fixture.TestWriteLineUInt64();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineCharArray:static start.*/
                TestWriteLineCharArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineCharArray()", $t.Line = "475", $t));
                    try {
                        t.Fixture.TestWriteLineCharArray();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineCharArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineCharArrayIndexCount:static start.*/
                TestWriteLineCharArrayIndexCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineCharArrayIndexCount()", $t.Line = "491", $t));
                    try {
                        t.Fixture.TestWriteLineCharArrayIndexCount();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineCharArrayIndexCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineEnum:static start.*/
                TestWriteLineEnum: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineEnum()", $t.Line = "529", $t));
                    try {
                        t.Fixture.TestWriteLineEnum();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineEnum:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDecimalNullable:static start.*/
                TestWriteLineDecimalNullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineDecimalNullable()", $t.Line = "549", $t));
                    try {
                        t.Fixture.TestWriteLineDecimalNullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineDecimalNullable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt64Nullable:static start.*/
                TestWriteLineInt64Nullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineInt64Nullable()", $t.Line = "565", $t));
                    try {
                        t.Fixture.TestWriteLineInt64Nullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineInt64Nullable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt64Nullable:static start.*/
                TestWriteLineUInt64Nullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteLineUInt64Nullable()", $t.Line = "585", $t));
                    try {
                        t.Fixture.TestWriteLineUInt64Nullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteLineUInt64Nullable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteMultiline:static start.*/
                TestWriteMultiline: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteMultiline()", $t.Line = "605", $t));
                    try {
                        t.Fixture.TestWriteMultiline();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteMultiline:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteBool:static start.*/
                TestWriteBool: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteBool()", $t.Line = "613", $t));
                    try {
                        t.Fixture.TestWriteBool();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteBool:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteChar:static start.*/
                TestWriteChar: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteChar()", $t.Line = "623", $t));
                    try {
                        t.Fixture.TestWriteChar();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteChar:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDecimal:static start.*/
                TestWriteDecimal: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteDecimal()", $t.Line = "630", $t));
                    try {
                        t.Fixture.TestWriteDecimal();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDecimal:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDouble:static start.*/
                TestWriteDouble: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteDouble()", $t.Line = "658", $t));
                    try {
                        t.Fixture.TestWriteDouble();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDouble:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt32:static start.*/
                TestWriteInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteInt32()", $t.Line = "686", $t));
                    try {
                        t.Fixture.TestWriteInt32();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt64:static start.*/
                TestWriteInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteInt64()", $t.Line = "699", $t));
                    try {
                        t.Fixture.TestWriteInt64();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteObject:static start.*/
                TestWriteObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteObject()", $t.Line = "712", $t));
                    try {
                        t.Fixture.TestWriteObject();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteSingle:static start.*/
                TestWriteSingle: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteSingle()", $t.Line = "785", $t));
                    try {
                        t.Fixture.TestWriteSingle();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteSingle:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteString:static start.*/
                TestWriteString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteString()", $t.Line = "798", $t));
                    try {
                        t.Fixture.TestWriteString();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString1:static start.*/
                TestWriteFormatString1: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteFormatString1()", $t.Line = "811", $t));
                    try {
                        t.Fixture.TestWriteFormatString1();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString1:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString2:static start.*/
                TestWriteFormatString2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteFormatString2()", $t.Line = "834", $t));
                    try {
                        t.Fixture.TestWriteFormatString2();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString3:static start.*/
                TestWriteFormatString3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteFormatString3()", $t.Line = "861", $t));
                    try {
                        t.Fixture.TestWriteFormatString3();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString4:static start.*/
                TestWriteFormatString4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteFormatString4()", $t.Line = "888", $t));
                    try {
                        t.Fixture.TestWriteFormatString4();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString5:static start.*/
                TestWriteFormatString5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteFormatString5()", $t.Line = "915", $t));
                    try {
                        t.Fixture.TestWriteFormatString5();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteFormatString5:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt32:static start.*/
                TestWriteUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteUInt32()", $t.Line = "942", $t));
                    try {
                        t.Fixture.TestWriteUInt32();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt64:static start.*/
                TestWriteUInt64: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteUInt64()", $t.Line = "954", $t));
                    try {
                        t.Fixture.TestWriteUInt64();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt64:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteCharArray:static start.*/
                TestWriteCharArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteCharArray()", $t.Line = "964", $t));
                    try {
                        t.Fixture.TestWriteCharArray();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteCharArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteCharArrayIndexCount:static start.*/
                TestWriteCharArrayIndexCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteCharArrayIndexCount()", $t.Line = "980", $t));
                    try {
                        t.Fixture.TestWriteCharArrayIndexCount();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteCharArrayIndexCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteEnum:static start.*/
                TestWriteEnum: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteEnum()", $t.Line = "1018", $t));
                    try {
                        t.Fixture.TestWriteEnum();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteEnum:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDecimalNullable:static start.*/
                TestWriteDecimalNullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteDecimalNullable()", $t.Line = "1038", $t));
                    try {
                        t.Fixture.TestWriteDecimalNullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteDecimalNullable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt64Nullable:static start.*/
                TestWriteInt64Nullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteInt64Nullable()", $t.Line = "1054", $t));
                    try {
                        t.Fixture.TestWriteInt64Nullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteInt64Nullable:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt64Nullable:static start.*/
                TestWriteUInt64Nullable: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SystemConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemConsoleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteUInt64Nullable()", $t.Line = "1074", $t));
                    try {
                        t.Fixture.TestWriteUInt64Nullable();
                    } finally {
                        t.TearDown();
                    }
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TestWriteUInt64Nullable:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SystemConsoleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SystemConsoleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.GetContext end.*/

            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.SetUp start.*/
            SetUp: function () {
                this.Fixture.CleanConsoleBuffer();
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.SetUp end.*/

            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TearDown start.*/
            TearDown: function () {
                this.Fixture.HideConsole();
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests.TearDown end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemConsoleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "13", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "22", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "31", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "40", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.SystemExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/SystemExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+SystemExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "27", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.MessageOnlyConstructorWorks:static start.*/
                MessageOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageOnlyConstructorWorks()", $t.Line = "38", $t));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.MessageOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.TaskOnlyConstructorWorks:static start.*/
                TaskOnlyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskOnlyConstructorWorks()", $t.Line = "49", $t));
                    t.Fixture.TaskOnlyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.TaskOnlyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks:static start.*/
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MessageAndInnerExceptionConstructorWorks()", $t.Line = "61", $t));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/TaskCanceledExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskCanceledExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.IAsyncResultWorks:static start.*/
                IAsyncResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IAsyncResultWorks()", $t.Line = "19", $t));
                    t.Fixture.IAsyncResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.IAsyncResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceTypePropertiesAreCorrect:static start.*/
                TaskCompletionSourceTypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceTypePropertiesAreCorrect()", $t.Line = "28", $t));
                    t.Fixture.TaskCompletionSourceTypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceTypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskTypePropertiesAreCorrect:static start.*/
                TaskTypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskTypePropertiesAreCorrect()", $t.Line = "36", $t));
                    t.Fixture.TaskTypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskTypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingResult:static start.*/
                TaskCompletionSourceWorksWhenSettingResult: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingResult()", $t.Line = "50", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingResult();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingResult:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingASingleException:static start.*/
                TaskCompletionSourceWorksWhenSettingASingleException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingASingleException()", $t.Line = "87", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingASingleException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingASingleException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingTwoExceptions:static start.*/
                TaskCompletionSourceWorksWhenSettingTwoExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 14, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenSettingTwoExceptions()", $t.Line = "134", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingTwoExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenSettingTwoExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenCancelling:static start.*/
                TaskCompletionSourceWorksWhenCancelling: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TaskCompletionSourceWorksWhenCancelling()", $t.Line = "182", $t));
                    t.Fixture.TaskCompletionSourceWorksWhenCancelling();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TaskCompletionSourceWorksWhenCancelling:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited:static start.*/
                CancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskThrowsTaskCanceledExceptionWhenAwaited()", $t.Line = "224", $t));
                    t.Fixture.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed:static start.*/
                CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed()", $t.Line = "259", $t));
                    t.Fixture.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetResultFailsWhenTheTaskIsCompleted:static start.*/
                SetResultFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetResultFailsWhenTheTaskIsCompleted()", $t.Line = "280", $t));
                    t.Fixture.SetResultFailsWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetResultFailsWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetCanceledFailsWhenTheTaskIsCompleted:static start.*/
                SetCanceledFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetCanceledFailsWhenTheTaskIsCompleted()", $t.Line = "288", $t));
                    t.Fixture.SetCanceledFailsWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetCanceledFailsWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetExceptionFailsWhenTheTaskIsCompleted:static start.*/
                SetExceptionFailsWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetExceptionFailsWhenTheTaskIsCompleted()", $t.Line = "296", $t));
                    t.Fixture.SetExceptionFailsWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.SetExceptionFailsWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CompletedTaskHasCorrectIsXProperties:static start.*/
                CompletedTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompletedTaskHasCorrectIsXProperties()", $t.Line = "305", $t));
                    t.Fixture.CompletedTaskHasCorrectIsXProperties();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CompletedTaskHasCorrectIsXProperties:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskHasCorrectIsXProperties:static start.*/
                CancelledTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CancelledTaskHasCorrectIsXProperties()", $t.Line = "315", $t));
                    t.Fixture.CancelledTaskHasCorrectIsXProperties();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.CancelledTaskHasCorrectIsXProperties:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.FaultedTaskHasCorrectIsXProperties:static start.*/
                FaultedTaskHasCorrectIsXProperties: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FaultedTaskHasCorrectIsXProperties()", $t.Line = "325", $t));
                    t.Fixture.FaultedTaskHasCorrectIsXProperties();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.FaultedTaskHasCorrectIsXProperties:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetResultReturnsFalseWhenTheTaskIsCompleted:static start.*/
                TrySetResultReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetResultReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "335", $t));
                    t.Fixture.TrySetResultReturnsFalseWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetResultReturnsFalseWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted:static start.*/
                TrySetCanceledReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetCanceledReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "343", $t));
                    t.Fixture.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted:static start.*/
                TrySetExceptionReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TrySetExceptionReturnsFalseWhenTheTaskIsCompleted()", $t.Line = "351", $t));
                    t.Fixture.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException:static start.*/
                ContinueWithForNonGenericTaskWorkWithNoResultAndNoException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForNonGenericTaskWorkWithNoResultAndNoException()", $t.Line = "360", $t));
                    t.Fixture.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithWhenCallbackThrowsAnException:static start.*/
                ContinueWithWhenCallbackThrowsAnException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithWhenCallbackThrowsAnException()", $t.Line = "402", $t));
                    t.Fixture.ContinueWithWhenCallbackThrowsAnException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithWhenCallbackThrowsAnException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask:static start.*/
                ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask()", $t.Line = "440", $t));
                    t.Fixture.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForNonGenericTaskCanReturnAValue:static start.*/
                ContinueWithForNonGenericTaskCanReturnAValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForNonGenericTaskCanReturnAValue()", $t.Line = "481", $t));
                    t.Fixture.ContinueWithForNonGenericTaskCanReturnAValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForNonGenericTaskCanReturnAValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithWithNoReturnValueForGenericTaskWorks:static start.*/
                ContinueWithWithNoReturnValueForGenericTaskWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithWithNoReturnValueForGenericTaskWorks()", $t.Line = "526", $t));
                    t.Fixture.ContinueWithWithNoReturnValueForGenericTaskWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithWithNoReturnValueForGenericTaskWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForGenericTaskCanReturnAValue:static start.*/
                ContinueWithForGenericTaskCanReturnAValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContinueWithForGenericTaskCanReturnAValue()", $t.Line = "568", $t));
                    t.Fixture.ContinueWithForGenericTaskCanReturnAValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ContinueWithForGenericTaskCanReturnAValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.DelayWorks:static start.*/
                DelayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DelayWorks()", $t.Line = "613", $t));
                    t.Fixture.DelayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.DelayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.FromResultWorks:static start.*/
                FromResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FromResultWorks()", $t.Line = "646", $t));
                    t.Fixture.FromResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.FromResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWithoutResultWorks:static start.*/
                RunWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWithoutResultWorks()", $t.Line = "655", $t));
                    t.Fixture.RunWithoutResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWithoutResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWithResultWorks:static start.*/
                RunWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWithResultWorks()", $t.Line = "686", $t));
                    t.Fixture.RunWithResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWithResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWorksWhenBodyThrows:static start.*/
                RunWorksWhenBodyThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "RunWorksWhenBodyThrows()", $t.Line = "719", $t));
                    t.Fixture.RunWorksWhenBodyThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.RunWorksWhenBodyThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllParamArrayWithResultWorks:static start.*/
                WhenAllParamArrayWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllParamArrayWithResultWorks()", $t.Line = "752", $t));
                    t.Fixture.WhenAllParamArrayWithResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllParamArrayWithResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllEnumerableWithResultWorks:static start.*/
                WhenAllEnumerableWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllEnumerableWithResultWorks()", $t.Line = "809", $t));
                    t.Fixture.WhenAllEnumerableWithResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllEnumerableWithResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllParamArrayWithoutResultWorks:static start.*/
                WhenAllParamArrayWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllParamArrayWithoutResultWorks()", $t.Line = "866", $t));
                    t.Fixture.WhenAllParamArrayWithoutResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllParamArrayWithoutResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllEnumerableWithoutResultWorks:static start.*/
                WhenAllEnumerableWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllEnumerableWithoutResultWorks()", $t.Line = "922", $t));
                    t.Fixture.WhenAllEnumerableWithoutResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllEnumerableWithoutResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted:static start.*/
                WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 17, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted()", $t.Line = "978", $t));
                    t.Fixture.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled:static start.*/
                WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled()", $t.Line = "1048", $t));
                    t.Fixture.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyParamArrayWithResultWorks:static start.*/
                WhenAnyParamArrayWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyParamArrayWithResultWorks()", $t.Line = "1103", $t));
                    t.Fixture.WhenAnyParamArrayWithResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyParamArrayWithResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyEnumerableWithResultWorks:static start.*/
                WhenAnyEnumerableWithResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyEnumerableWithResultWorks()", $t.Line = "1151", $t));
                    t.Fixture.WhenAnyEnumerableWithResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyEnumerableWithResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyParamArrayWithoutResultWorks:static start.*/
                WhenAnyParamArrayWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyParamArrayWithoutResultWorks()", $t.Line = "1198", $t));
                    t.Fixture.WhenAnyParamArrayWithoutResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyParamArrayWithoutResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyEnumerableWithoutResultWorks:static start.*/
                WhenAnyEnumerableWithoutResultWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyEnumerableWithoutResultWorks()", $t.Line = "1245", $t));
                    t.Fixture.WhenAnyEnumerableWithoutResultWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyEnumerableWithoutResultWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyFaultsIfTheFirstTaskFaulted:static start.*/
                WhenAnyFaultsIfTheFirstTaskFaulted: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyFaultsIfTheFirstTaskFaulted()", $t.Line = "1292", $t));
                    t.Fixture.WhenAnyFaultsIfTheFirstTaskFaulted();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyFaultsIfTheFirstTaskFaulted:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyIsCancelledIfTheFirstTaskWasCancelled:static start.*/
                WhenAnyIsCancelledIfTheFirstTaskWasCancelled: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WhenAnyIsCancelledIfTheFirstTaskWasCancelled()", $t.Line = "1340", $t));
                    t.Fixture.WhenAnyIsCancelledIfTheFirstTaskWasCancelled();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.WhenAnyIsCancelledIfTheFirstTaskWasCancelled:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithOnlyActionWorks:static start.*/
                ConstructorWithOnlyActionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithOnlyActionWorks()", $t.Line = "1385", $t));
                    t.Fixture.ConstructorWithOnlyActionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithOnlyActionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithActionAndStateWorks:static start.*/
                ConstructorWithActionAndStateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithActionAndStateWorks()", $t.Line = "1424", $t));
                    t.Fixture.ConstructorWithActionAndStateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithActionAndStateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ExceptionInManuallyCreatedTaskIsStoredOnTheTask:static start.*/
                ExceptionInManuallyCreatedTaskIsStoredOnTheTask: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExceptionInManuallyCreatedTaskIsStoredOnTheTask()", $t.Line = "1466", $t));
                    t.Fixture.ExceptionInManuallyCreatedTaskIsStoredOnTheTask();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ExceptionInManuallyCreatedTaskIsStoredOnTheTask:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithOnlyFunctionWorks:static start.*/
                ConstructorWithOnlyFunctionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithOnlyFunctionWorks()", $t.Line = "1508", $t));
                    t.Fixture.ConstructorWithOnlyFunctionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithOnlyFunctionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithFunctionAndStateWorks:static start.*/
                ConstructorWithFunctionAndStateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithFunctionAndStateWorks()", $t.Line = "1550", $t));
                    t.Fixture.ConstructorWithFunctionAndStateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.ConstructorWithFunctionAndStateWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Threading.TaskTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Threading/Tasks/TaskTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TaskTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestB:static start.*/
                TestB: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestB()", $t.Line = "38", $t));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestB();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestB:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestC:static start.*/
                TestC: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestC()", $t.Line = "48", $t));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestC();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestC:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestBC:static start.*/
                TestBC: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBC()", $t.Line = "58", $t));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestBC();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.TestBC:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestAbstractClass", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestAbstractClass.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAbstractClass end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "31", $t));
                    Bridge.ClientTest.CSharp6.TestAutoProps.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestAutoProps", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestAutoProps.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAutoProps end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "12", $t));
                    Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestAwaitInCatchFinally.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestAwaitInCatchFinally end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestBinaryLiterals", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestBinaryLiterals)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestBinaryLiterals).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestBinaryLiterals, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "13", $t));
                    Bridge.ClientTest.CSharp7.TestBinaryLiterals.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestBinaryLiterals", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestBinaryLiterals.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestBinaryLiterals end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestCaseLabelPattern)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestCase:static start.*/
                TestCase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestCaseLabelPattern).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCase()", $t.Line = "62", $t));
                    Bridge.ClientTest.CSharp7.TestCaseLabelPattern.TestCase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestCase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestVarCase:static start.*/
                TestVarCase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestCaseLabelPattern).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestVarCase()", $t.Line = "142", $t));
                    Bridge.ClientTest.CSharp7.TestCaseLabelPattern.TestVarCase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestVarCase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestCaseNull:static start.*/
                TestCaseNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestCaseLabelPattern).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestCaseLabelPattern, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCaseNull()", $t.Line = "212", $t));
                    Bridge.ClientTest.CSharp7.TestCaseLabelPattern.TestCaseNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.TestCaseNull:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestCaseLabelPattern", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestCaseLabelPattern.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestCaseLabelPattern end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "11", $t));
                    Bridge.ClientTest.CSharp6.TestConditionAccess.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestConditionAccess", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestConditionalAccess.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestConditionAccess end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestDefaultLiteralExpression", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestDefaultLiteralExpression)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestDefaultLiteralExpression).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestDefaultLiteralExpression, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "18", $t));
                    Bridge.ClientTest.CSharp7.TestDefaultLiteralExpression.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestDefaultLiteralExpression", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestDefaultLiteralExpression.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDefaultLiteralExpression end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestDiscardsAndOutVars", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestDiscardsAndOutVars)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestDiscardsAndOutVars).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestDiscardsAndOutVars, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "73", $t));
                    Bridge.ClientTest.CSharp7.TestDiscardsAndOutVars.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestDiscardsAndOutVars", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestDiscardsAndOutVars.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestDiscardsAndOutVars end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFalseFilter:static start.*/
                TestFalseFilter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFalseFilter()", $t.Line = "12", $t));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFalseFilter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFalseFilter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestTrueFilter:static start.*/
                TestTrueFilter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTrueFilter()", $t.Line = "39", $t));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestTrueFilter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestTrueFilter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestMultipleCatchClauses_2223:static start.*/
                TestMultipleCatchClauses_2223: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMultipleCatchClauses_2223()", $t.Line = "63", $t));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestMultipleCatchClauses_2223();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestMultipleCatchClauses_2223:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFailedFilter_2223:static start.*/
                TestFailedFilter_2223: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFailedFilter_2223()", $t.Line = "90", $t));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFailedFilter_2223();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFailedFilter_2223:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFailedFilter2_2223:static start.*/
                TestFailedFilter2_2223: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestFailedFilter2_2223()", $t.Line = "121", $t));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFailedFilter2_2223();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.TestFailedFilter2_2223:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestExceptionFilter", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestExceptionFilter.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExceptionFilter end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "9", $t));
                    Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestExpressionBodyFunction", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestExpressionBodyFunction.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyFunction end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyMember", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestExpressionBodyMember)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestExpressionBodyMember).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyMember, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "17", $t));
                    Bridge.ClientTest.CSharp7.TestExpressionBodyMember.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestExpressionBodyMember", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestExpressionBodyMember.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestExpressionBodyMember end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.TestGotoCase:static start.*/
                TestGotoCase: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGotoCase()", $t.Line = "70", $t));
                    Bridge.ClientTest.BasicCSharp.TestGoto.TestGotoCase();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.TestGotoCase:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.TestGotoLabel:static start.*/
                TestGotoLabel: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestGotoLabel()", $t.Line = "82", $t));
                    Bridge.ClientTest.BasicCSharp.TestGoto.TestGotoLabel();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.TestGotoLabel:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestGoto", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestGoto.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestGoto end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "11", $t));
                    Bridge.ClientTest.CSharp6.TestIndexInitializer.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestIndexInitializer", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestIndexInitializer.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIndexInitializer end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestA:static start.*/
                TestA: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestA()", $t.Line = "53", $t));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestA();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestA:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestB:static start.*/
                TestB: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestB()", $t.Line = "64", $t));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestB();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestB:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestAB:static start.*/
                TestAB: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestAB()", $t.Line = "76", $t));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestAB();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.TestAB:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestInheritance", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestInheritance.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInheritance end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestInterfaceMethodAndProperty:static start.*/
                TestInterfaceMethodAndProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInterfaceMethodAndProperty()", $t.Line = "124", $t));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestInterfaceMethodAndProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestInterfaceMethodAndProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestExplicitInterfaceMethodAndProperty:static start.*/
                TestExplicitInterfaceMethodAndProperty: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestExplicitInterfaceMethodAndProperty()", $t.Line = "139", $t));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestExplicitInterfaceMethodAndProperty();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestExplicitInterfaceMethodAndProperty:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestTwoInterfaces:static start.*/
                TestTwoInterfaces: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTwoInterfaces()", $t.Line = "148", $t));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestTwoInterfaces();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.TestTwoInterfaces:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestInterfaces", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestInterfaces.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterfaces end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "37", $t));
                    Bridge.ClientTest.CSharp6.TestInterpolatedStrings.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestInterpolatedStrings", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestInterpolatedStrings.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestInterpolatedStrings end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestIsPattern", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestIsPattern)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern.IsPatternTests:static start.*/
                IsPatternTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestIsPattern).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestIsPattern, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPatternTests()", $t.Line = "16", $t));
                    Bridge.ClientTest.CSharp7.TestIsPattern.IsPatternTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern.IsPatternTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestIsPattern", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestIsPattern.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestIsPattern end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TestLeaveOpen)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.StreamReaderTest:static start.*/
                StreamReaderTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TestLeaveOpen).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StreamReaderTest()", $t.Line = "22", $t));
                    t.Fixture.StreamReaderTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.StreamReaderTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.BinaryReaderTest:static start.*/
                BinaryReaderTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TestLeaveOpen).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryReaderTest()", $t.Line = "47", $t));
                    t.Fixture.BinaryReaderTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.BinaryReaderTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.StreamWriterTest:static start.*/
                StreamWriterTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TestLeaveOpen).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StreamWriterTest()", $t.Line = "72", $t));
                    t.Fixture.StreamWriterTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.StreamWriterTest:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.BinaryWriterTest:static start.*/
                BinaryWriterTest: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TestLeaveOpen).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLeaveOpen, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BinaryWriterTest()", $t.Line = "95", $t));
                    t.Fixture.BinaryWriterTest();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.BinaryWriterTest:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.TestLeaveOpen", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.TestLeaveOpen.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLeaveOpen end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 20, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "12", $t));
                    Bridge.ClientTest.Linq.TestLinqAggregateOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.Bridge315:static start.*/
                Bridge315: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Bridge315()", $t.Line = "231", $t));
                    Bridge.ClientTest.Linq.TestLinqAggregateOperators.Bridge315();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.Bridge315:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqAggregateOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqAggregateOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqAggregateOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "30", $t));
                    Bridge.ClientTest.Linq.TestLinqConversionOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqConversionOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqConversionOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqConversionOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators, 26, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqElementOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqElementOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqElementOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqElementOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "10", $t));
                    Bridge.ClientTest.Linq.TestLinqGenerationOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqGenerationOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqGenerationOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGenerationOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "38", $t));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.Test:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.TestComplexGrouping:static start.*/
                TestComplexGrouping: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestComplexGrouping()", $t.Line = "105", $t));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.TestComplexGrouping();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.TestComplexGrouping:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.TestAnagrams:static start.*/
                TestAnagrams: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 2, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestAnagrams()", $t.Line = "147", $t));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.TestAnagrams();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.TestAnagrams:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqGroupingOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqGroupingOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqGroupingOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqJoinOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqJoinOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqJoinOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqJoinOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqMiscellaneousOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqMiscellaneousOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqOrderingOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqOrderingOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqOrderingOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqOrderingOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "10", $t));
                    Bridge.ClientTest.Linq.TestLinqPartitioningOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqPartitioningOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqPartitioningOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqPartitioningOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "16", $t));
                    Bridge.ClientTest.Linq.TestLinqProjectionOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqProjectionOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqProjectionOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqProjectionOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqQuantifiers.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqQuantifiers", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqQuantifiers.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQuantifiers end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqQueryExecution.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqQueryExecution", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqQueryExecution.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqQueryExecution end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqRestrictionOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqRestrictionOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqRestrictionOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqRestrictionOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators, 8, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "11", $t));
                    Bridge.ClientTest.Linq.TestLinqSetOperators.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Linq.TestLinqSetOperators", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Linq/TestLinqSetOperators.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLinqSetOperators end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLocalFunctions", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestLocalFunctions)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.LocalFunctionsTests:static start.*/
                LocalFunctionsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestLocalFunctions).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLocalFunctions, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LocalFunctionsTests()", $t.Line = "16", $t));
                    Bridge.ClientTest.CSharp7.TestLocalFunctions.LocalFunctionsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.LocalFunctionsTests:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.ExpressioNBodiedLocalFunctionsTests:static start.*/
                ExpressioNBodiedLocalFunctionsTests: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestLocalFunctions).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLocalFunctions, 5, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ExpressioNBodiedLocalFunctionsTests()", $t.Line = "71", $t));
                    Bridge.ClientTest.CSharp7.TestLocalFunctions.ExpressioNBodiedLocalFunctionsTests();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.ExpressioNBodiedLocalFunctionsTests:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestLocalFunctions", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestLocalFunctions.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestLocalFunctions end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass.Test:static start.*/
                Test: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Test()", $t.Line = "25", $t));
                    Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.Test();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass.Test:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestMethodParametersClass", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestMethodParametersClass.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestMethodParametersClass end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "31", $t));
                    Bridge.ClientTest.CSharp6.TestNameOf.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestNameOf", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestNameof.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNameOf end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestNonTrailingNamedArg", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestNonTrailingNamedArg)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestNonTrailingNamedArg).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestNonTrailingNamedArg, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "24", $t));
                    Bridge.ClientTest.CSharp7.TestNonTrailingNamedArg.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestNonTrailingNamedArg", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestNonTrailingNamedArg.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestNonTrailingNamedArg end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods.TestInstance:static start.*/
                TestInstance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods, 17, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInstance()", $t.Line = "82", $t));
                    Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.TestInstance();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods.TestInstance:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestOverloadInstanceMethods.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadInstanceMethods end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods.TestStatic:static start.*/
                TestStatic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods, 16, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestStatic()", $t.Line = "82", $t));
                    Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.TestStatic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods.TestStatic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestOverloadStaticMethods.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestOverloadStaticMethods end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestPrivateProtected", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestPrivateProtected)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected.TestModifiers:static start.*/
                TestModifiers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestPrivateProtected).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestPrivateProtected, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestModifiers()", $t.Line = "47", $t));
                    t.Fixture.TestModifiers();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected.TestModifiers:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestPrivateProtected", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestPrivateProtected.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestPrivateProtected end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestInstanceConstructorsAndMethods:static start.*/
                TestInstanceConstructorsAndMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 26, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInstanceConstructorsAndMethods()", $t.Line = "256", $t));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestInstanceConstructorsAndMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestInstanceConstructorsAndMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestStaticConstructorsAndMethods:static start.*/
                TestStaticConstructorsAndMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 14, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestStaticConstructorsAndMethods()", $t.Line = "322", $t));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestStaticConstructorsAndMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestStaticConstructorsAndMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestMethodParameters:static start.*/
                TestMethodParameters: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 16, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestMethodParameters()", $t.Line = "358", $t));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestMethodParameters();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.TestMethodParameters:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestReferenceTypes", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestReferenceTypes.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestReferenceTypes end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "33", $t));
                    Bridge.ClientTest.CSharp7.TestRefReturnAndLocal.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic2:static start.*/
                TestBasic2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic2()", $t.Line = "65", $t));
                    Bridge.ClientTest.CSharp7.TestRefReturnAndLocal.TestBasic2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic3:static start.*/
                TestBasic3: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic3()", $t.Line = "83", $t));
                    Bridge.ClientTest.CSharp7.TestRefReturnAndLocal.TestBasic3();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic3:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic4:static start.*/
                TestBasic4: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic4()", $t.Line = "108", $t));
                    Bridge.ClientTest.CSharp7.TestRefReturnAndLocal.TestBasic4();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic4:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic5:static start.*/
                TestBasic5: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestRefReturnAndLocal).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestRefReturnAndLocal, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic5()", $t.Line = "163", $t));
                    Bridge.ClientTest.CSharp7.TestRefReturnAndLocal.TestBasic5();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.TestBasic5:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestRefReturnAndLocal", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestRefReturnAndLocal.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestRefReturnAndLocal end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestROStruct", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestROStruct)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct.TestReadOnlyStruct:static start.*/
                TestReadOnlyStruct: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestROStruct).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestROStruct, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestReadOnlyStruct()", $t.Line = "42", $t));
                    Bridge.ClientTest.CSharp7.TestROStruct.TestReadOnlyStruct();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct.TestReadOnlyStruct:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestROStruct", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestROStruct.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestROStruct end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestThrowExpression", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestThrowExpression)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestThrowExpression).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestThrowExpression, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "17", $t));
                    Bridge.ClientTest.CSharp7.TestThrowExpression.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestThrowExpression", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestThrowExpression.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestThrowExpression end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.SimpleTryCatch:static start.*/
                SimpleTryCatch: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleTryCatch()", $t.Line = "16", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.SimpleTryCatch();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.SimpleTryCatch:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.CaughtExceptions:static start.*/
                CaughtExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 3, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaughtExceptions()", $t.Line = "24", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.CaughtExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.CaughtExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.ThrownExceptions:static start.*/
                ThrownExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 12, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrownExceptions()", $t.Line = "37", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.ThrownExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.ThrownExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.Bridge320:static start.*/
                Bridge320: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Bridge320()", $t.Line = "63", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.Bridge320();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.Bridge320:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.Bridge343:static start.*/
                Bridge343: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Bridge343()", $t.Line = "84", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.Bridge343();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.Bridge343:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestTryCatchBlocks.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchBlocks end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.SimpleTryCatchFinally:static start.*/
                SimpleTryCatchFinally: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 1, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SimpleTryCatchFinally()", $t.Line = "24", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.SimpleTryCatchFinally();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.SimpleTryCatchFinally:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.CaughtExceptions:static start.*/
                CaughtExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 4, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CaughtExceptions()", $t.Line = "33", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.CaughtExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.CaughtExceptions:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.ThrownExceptions:static start.*/
                ThrownExceptions: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 16, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ThrownExceptions()", $t.Line = "53", $t));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.ThrownExceptions();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.ThrownExceptions:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestTryCatchFinallyBlocks.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestTryCatchFinallyBlocks end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.IsClassIsFalse:static start.*/
                IsClassIsFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsClassIsFalse()", $t.Line = "203", $t));
                    t.Fixture.IsClassIsFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.IsClassIsFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.UserDefinedStructCanBeUsed:static start.*/
                UserDefinedStructCanBeUsed: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UserDefinedStructCanBeUsed()", $t.Line = "210", $t));
                    t.Fixture.UserDefinedStructCanBeUsed();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.UserDefinedStructCanBeUsed:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized:static start.*/
                DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized()", $t.Line = "217", $t));
                    t.Fixture.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric:static start.*/
                DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric()", $t.Line = "228", $t));
                    t.Fixture.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitialized:static start.*/
                DefaultValueOfStructIsInstanceWithAllMembersInitialized: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructIsInstanceWithAllMembersInitialized()", $t.Line = "239", $t));
                    t.Fixture.DefaultValueOfStructIsInstanceWithAllMembersInitialized();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitialized:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric:static start.*/
                DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric()", $t.Line = "250", $t));
                    t.Fixture.DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect:static start.*/
                DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect()", $t.Line = "261", $t));
                    t.Fixture.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric:static start.*/
                DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric()", $t.Line = "272", $t));
                    t.Fixture.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks:static start.*/
                DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks()", $t.Line = "283", $t));
                    t.Fixture.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric:static start.*/
                DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric()", $t.Line = "290", $t));
                    t.Fixture.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields:static start.*/
                DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields()", $t.Line = "297", $t));
                    t.Fixture.DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultEqualsUsesValueEqualityForAllMembers:static start.*/
                DefaultEqualsUsesValueEqualityForAllMembers: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultEqualsUsesValueEqualityForAllMembers()", $t.Line = "311", $t));
                    t.Fixture.DefaultEqualsUsesValueEqualityForAllMembers();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.DefaultEqualsUsesValueEqualityForAllMembers:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanOverrideGetHashCode:static start.*/
                CanOverrideGetHashCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanOverrideGetHashCode()", $t.Line = "323", $t));
                    t.Fixture.CanOverrideGetHashCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanOverrideGetHashCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanOverrideEquals:static start.*/
                CanOverrideEquals: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanOverrideEquals()", $t.Line = "330", $t));
                    t.Fixture.CanOverrideEquals();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanOverrideEquals:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanLiftUserDefinedBinaryOperator:static start.*/
                CanLiftUserDefinedBinaryOperator: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanLiftUserDefinedBinaryOperator()", $t.Line = "340", $t));
                    t.Fixture.CanLiftUserDefinedBinaryOperator();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanLiftUserDefinedBinaryOperator:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanLiftUserDefinedUnaryOperator_SPI_1634:static start.*/
                CanLiftUserDefinedUnaryOperator_SPI_1634: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanLiftUserDefinedUnaryOperator_SPI_1634()", $t.Line = "348", $t));
                    t.Fixture.CanLiftUserDefinedUnaryOperator_SPI_1634();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CanLiftUserDefinedUnaryOperator_SPI_1634:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ClonedValueTypeIsCorrectType:static start.*/
                ClonedValueTypeIsCorrectType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ClonedValueTypeIsCorrectType()", $t.Line = "357", $t));
                    t.Fixture.ClonedValueTypeIsCorrectType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ClonedValueTypeIsCorrectType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.FieldsAreClonedWhenValueTypeIsCopied:static start.*/
                FieldsAreClonedWhenValueTypeIsCopied: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FieldsAreClonedWhenValueTypeIsCopied()", $t.Line = "368", $t));
                    t.Fixture.FieldsAreClonedWhenValueTypeIsCopied();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.FieldsAreClonedWhenValueTypeIsCopied:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied:static start.*/
                AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied()", $t.Line = "382", $t));
                    t.Fixture.AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied:static start.*/
                PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied()", $t.Line = "396", $t));
                    t.Fixture.PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613:static start.*/
                NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613()", $t.Line = "410", $t));
                    t.Fixture.NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.GenericMutableValueTypeWorks:static start.*/
                GenericMutableValueTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericMutableValueTypeWorks()", $t.Line = "429", $t));
                    t.Fixture.GenericMutableValueTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.GenericMutableValueTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CloningValueTypeWithNamedDefaultConstructorWorks:static start.*/
                CloningValueTypeWithNamedDefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningValueTypeWithNamedDefaultConstructorWorks()", $t.Line = "444", $t));
                    t.Fixture.CloningValueTypeWithNamedDefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CloningValueTypeWithNamedDefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CloningNullableValueTypesWorks:static start.*/
                CloningNullableValueTypesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CloningNullableValueTypesWorks()", $t.Line = "457", $t));
                    t.Fixture.CloningNullableValueTypesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.CloningNullableValueTypesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "473", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ToStringNullabeTypeWorks:static start.*/
                ToStringNullabeTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TestUserDefinedStructs).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUserDefinedStructs, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringNullabeTypeWorks()", $t.Line = "483", $t));
                    t.Fixture.ToStringNullabeTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.ToStringNullabeTypeWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.TestUserDefinedStructs", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestUserDefinedStructs.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUserDefinedStructs end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "9", $t));
                    Bridge.ClientTest.CSharp6.TestUsingStatic.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp6.TestUsingStatic", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp6/TestUsingStatic.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestUsingStatic end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTupleAndDeconstruction", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestValueTupleAndDeconstruction)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction.TestBasic:static start.*/
                TestBasic: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp7.TestValueTupleAndDeconstruction).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTupleAndDeconstruction, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestBasic()", $t.Line = "49", $t));
                    Bridge.ClientTest.CSharp7.TestValueTupleAndDeconstruction.TestBasic();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction.TestBasic:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CSharp7.TestValueTupleAndDeconstruction", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CSharp7/TestValueTupleAndDeconstruction.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTupleAndDeconstruction end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.TestInstanceConstructorsAndMethods:static start.*/
                TestInstanceConstructorsAndMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 18, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInstanceConstructorsAndMethods()", $t.Line = "75", $t));
                    Bridge.ClientTest.BasicCSharp.TestValueTypes.TestInstanceConstructorsAndMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.TestInstanceConstructorsAndMethods:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.TestStaticConstructorsAndMethods:static start.*/
                TestStaticConstructorsAndMethods: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestStaticConstructorsAndMethods()", $t.Line = "126", $t));
                    Bridge.ClientTest.BasicCSharp.TestValueTypes.TestStaticConstructorsAndMethods();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.TestStaticConstructorsAndMethods:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestValueTypes", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestValueTypes.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestValueTypes end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestConstructors:static start.*/
                TestConstructors: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 42, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestConstructors()", $t.Line = "11", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestConstructors();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestConstructors:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestCloneCompare:static start.*/
                TestCloneCompare: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 13, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCloneCompare()", $t.Line = "70", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestCloneCompare();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestCloneCompare:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestEqualsGetHashCode:static start.*/
                TestEqualsGetHashCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 9, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestEqualsGetHashCode()", $t.Line = "99", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestEqualsGetHashCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestEqualsGetHashCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestToString:static start.*/
                TestToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 10, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestToString()", $t.Line = "120", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestToString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestToString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestParse:static start.*/
                TestParse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 6, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestParse()", $t.Line = "145", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestParse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestParse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestOperators:static start.*/
                TestOperators: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 30, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestOperators()", $t.Line = "173", $t));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestOperators();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.TestOperators:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.TestVersion", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/TestVersion.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVersion end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods.TestB:static start.*/
                TestB: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods, 7, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestB()", $t.Line = "30", $t));
                    Bridge.ClientTest.BasicCSharp.TestVirtualMethods.TestB();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods.TestB:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.BasicCSharp.TestVirtualMethods", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/BasicCSharp/TestVirtualMethods.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TestVirtualMethods end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.TypePropertiesAreCorrect:static start.*/
                TypePropertiesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.TypePropertiesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "22", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.ConstructorWithMessageWorks:static start.*/
                ConstructorWithMessageWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageWorks()", $t.Line = "31", $t));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.ConstructorWithMessageWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static start.*/
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorWithMessageAndInnerExceptionWorks()", $t.Line = "40", $t));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Exceptions.TimeoutExceptionTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Exceptions/TimeoutExceptionTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutExceptionTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestReadTimeoutCustomStream:static start.*/
                TestReadTimeoutCustomStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestReadTimeoutCustomStream()", $t.Line = "86", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestReadTimeoutCustomStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestReadTimeoutCustomStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestReadTimeoutMemoryStream:static start.*/
                TestReadTimeoutMemoryStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestReadTimeoutMemoryStream()", $t.Line = "92", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestReadTimeoutMemoryStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestReadTimeoutMemoryStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestWriteTimeoutCustomStream:static start.*/
                TestWriteTimeoutCustomStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteTimeoutCustomStream()", $t.Line = "105", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestWriteTimeoutCustomStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestWriteTimeoutCustomStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestWriteTimeoutMemoryStream:static start.*/
                TestWriteTimeoutMemoryStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWriteTimeoutMemoryStream()", $t.Line = "111", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestWriteTimeoutMemoryStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestWriteTimeoutMemoryStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestCanTimeoutCustomStream:static start.*/
                TestCanTimeoutCustomStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCanTimeoutCustomStream()", $t.Line = "123", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestCanTimeoutCustomStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestCanTimeoutCustomStream:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestCanTimeoutMemoryStream:static start.*/
                TestCanTimeoutMemoryStream: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.TimeoutTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestCanTimeoutMemoryStream()", $t.Line = "129", $t));
                    Bridge.ClientTest.IO.TimeoutTests.TestCanTimeoutMemoryStream();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.TestCanTimeoutMemoryStream:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.TimeoutTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/Stream/Stream.TimeoutTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeoutTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestTimerThrows:static start.*/
                TestTimerThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestTimerThrows()", $t.Line = "34", $t));
                    t.Fixture.TestTimerThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestTimerThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestStaticCallbackWithDispose:static start.*/
                TestStaticCallbackWithDispose: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestStaticCallbackWithDispose()", $t.Line = "63", $t));
                    Bridge.ClientTest.Threading.TimerTests.TestStaticCallbackWithDispose();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestStaticCallbackWithDispose:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestStaticCallbackWithChange:static start.*/
                TestStaticCallbackWithChange: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestStaticCallbackWithChange()", $t.Line = "89", $t));
                    t.Fixture.TestStaticCallbackWithChange();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestStaticCallbackWithChange:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInstanceCallbackWithDispose:static start.*/
                TestInstanceCallbackWithDispose: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInstanceCallbackWithDispose()", $t.Line = "122", $t));
                    Bridge.ClientTest.Threading.TimerTests.TestInstanceCallbackWithDispose();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInstanceCallbackWithDispose:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInstanceCallbackWithChange:static start.*/
                TestInstanceCallbackWithChange: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInstanceCallbackWithChange()", $t.Line = "146", $t));
                    t.Fixture.TestInstanceCallbackWithChange();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInstanceCallbackWithChange:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInfiniteTimer:static start.*/
                TestInfiniteTimer: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInfiniteTimer()", $t.Line = "178", $t));
                    t.Fixture.TestInfiniteTimer();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.TestInfiniteTimer:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Threading.TimerTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Threading/TimerTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimerTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DefaultConstructorWorks:static start.*/
                DefaultConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorWorks()", $t.Line = "29", $t));
                    t.Fixture.DefaultConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DefaultConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DefaultValueWorks:static start.*/
                DefaultValueWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueWorks()", $t.Line = "36", $t));
                    t.Fixture.DefaultValueWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DefaultValueWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ZeroWorks:static start.*/
                ZeroWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ZeroWorks()", $t.Line = "43", $t));
                    t.Fixture.ZeroWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ZeroWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CreatingInstanceReturnsTimeSpanWithZeroValue:static start.*/
                CreatingInstanceReturnsTimeSpanWithZeroValue: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsTimeSpanWithZeroValue()", $t.Line = "50", $t));
                    t.Fixture.CreatingInstanceReturnsTimeSpanWithZeroValue();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CreatingInstanceReturnsTimeSpanWithZeroValue:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ParameterConstructorsWorks:static start.*/
                ParameterConstructorsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParameterConstructorsWorks()", $t.Line = "57", $t));
                    t.Fixture.ParameterConstructorsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ParameterConstructorsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.FactoryMethodsWork:static start.*/
                FactoryMethodsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FactoryMethodsWork()", $t.Line = "77", $t));
                    t.Fixture.FactoryMethodsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.FactoryMethodsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.PropertiesWork:static start.*/
                PropertiesWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWork()", $t.Line = "105", $t));
                    t.Fixture.PropertiesWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.PropertiesWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "122", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CompareWorks:static start.*/
                CompareWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareWorks()", $t.Line = "135", $t));
                    t.Fixture.CompareWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.CompareWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.StaticEqualsWorks:static start.*/
                StaticEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticEqualsWorks()", $t.Line = "148", $t));
                    t.Fixture.StaticEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.StaticEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "159", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "170", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ToStringWorks:static start.*/
                ToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWorks()", $t.Line = "181", $t));
                    t.Fixture.ToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.AddWorks:static start.*/
                AddWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AddWorks()", $t.Line = "194", $t));
                    t.Fixture.AddWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.AddWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.SubtractWorks:static start.*/
                SubtractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractWorks()", $t.Line = "204", $t));
                    t.Fixture.SubtractWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.SubtractWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DurationWorks:static start.*/
                DurationWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DurationWorks()", $t.Line = "214", $t));
                    t.Fixture.DurationWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.DurationWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.NegateWorks:static start.*/
                NegateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegateWorks()", $t.Line = "226", $t));
                    t.Fixture.NegateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.NegateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ComparisonOperatorsWork:static start.*/
                ComparisonOperatorsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ComparisonOperatorsWork()", $t.Line = "235", $t));
                    t.Fixture.ComparisonOperatorsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ComparisonOperatorsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.AdditionOperatorWorks:static start.*/
                AdditionOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AdditionOperatorWorks()", $t.Line = "272", $t));
                    t.Fixture.AdditionOperatorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.AdditionOperatorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.SubtractionOperatorWorks:static start.*/
                SubtractionOperatorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubtractionOperatorWorks()", $t.Line = "282", $t));
                    t.Fixture.SubtractionOperatorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.SubtractionOperatorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.UnaryPlusWorks:static start.*/
                UnaryPlusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryPlusWorks()", $t.Line = "292", $t));
                    t.Fixture.UnaryPlusWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.UnaryPlusWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.UnaryMinusWorks:static start.*/
                UnaryMinusWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "UnaryMinusWorks()", $t.Line = "301", $t));
                    t.Fixture.UnaryMinusWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.UnaryMinusWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "310", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.ParseWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.TimeSpanTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/TimeSpanTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TimeSpanTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple1Works:static start.*/
                Tuple1Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple1Works()", $t.Line = "10", $t));
                    t.Fixture.Tuple1Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple1Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple2Works:static start.*/
                Tuple2Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple2Works()", $t.Line = "20", $t));
                    t.Fixture.Tuple2Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple2Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple3Works:static start.*/
                Tuple3Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple3Works()", $t.Line = "31", $t));
                    t.Fixture.Tuple3Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple3Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple4Works:static start.*/
                Tuple4Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple4Works()", $t.Line = "43", $t));
                    t.Fixture.Tuple4Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple4Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple5Works:static start.*/
                Tuple5Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple5Works()", $t.Line = "56", $t));
                    t.Fixture.Tuple5Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple5Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple6Works:static start.*/
                Tuple6Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple6Works()", $t.Line = "70", $t));
                    t.Fixture.Tuple6Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple6Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple7Works:static start.*/
                Tuple7Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple7Works()", $t.Line = "85", $t));
                    t.Fixture.Tuple7Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple7Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple8Works:static start.*/
                Tuple8Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Tuple8Works()", $t.Line = "101", $t));
                    t.Fixture.Tuple8Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.Tuple8Works:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.TupleTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/TupleTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TupleTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForTypeWithNoAttributes:static start.*/
                CanGetCustomTypeAttributesForTypeWithNoAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForTypeWithNoAttributes()", $t.Line = "415", $t));
                    t.Fixture.CanGetCustomTypeAttributesForTypeWithNoAttributes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForTypeWithNoAttributes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForClassWithAttributes:static start.*/
                CanGetCustomTypeAttributesForClassWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForClassWithAttributes()", $t.Line = "422", $t));
                    t.Fixture.CanGetCustomTypeAttributesForClassWithAttributes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForClassWithAttributes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NonScriptableAttributesAreNotIncluded:static start.*/
                NonScriptableAttributesAreNotIncluded: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonScriptableAttributesAreNotIncluded()", $t.Line = "435", $t));
                    t.Fixture.NonScriptableAttributesAreNotIncluded();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NonScriptableAttributesAreNotIncluded:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForInterfaceWithAttributes:static start.*/
                CanGetCustomTypeAttributesForInterfaceWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForInterfaceWithAttributes()", $t.Line = "443", $t));
                    t.Fixture.CanGetCustomTypeAttributesForInterfaceWithAttributes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForInterfaceWithAttributes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForEnumWithAttributes:static start.*/
                CanGetCustomTypeAttributesForEnumWithAttributes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CanGetCustomTypeAttributesForEnumWithAttributes()", $t.Line = "456", $t));
                    t.Fixture.CanGetCustomTypeAttributesForEnumWithAttributes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CanGetCustomTypeAttributesForEnumWithAttributes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.InheritedFlagToGetCustomAttributesWorks:static start.*/
                InheritedFlagToGetCustomAttributesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InheritedFlagToGetCustomAttributesWorks()", $t.Line = "469", $t));
                    t.Fixture.InheritedFlagToGetCustomAttributesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.InheritedFlagToGetCustomAttributesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.DeepInheritanceWorks:static start.*/
                DeepInheritanceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeepInheritanceWorks()", $t.Line = "483", $t));
                    t.Fixture.DeepInheritanceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.DeepInheritanceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass:static start.*/
                OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass()", $t.Line = "494", $t));
                    t.Fixture.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute:static start.*/
                ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute()", $t.Line = "505", $t));
                    t.Fixture.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NonInheritedAttributeIsNotInherited:static start.*/
                NonInheritedAttributeIsNotInherited: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonInheritedAttributeIsNotInherited()", $t.Line = "517", $t));
                    t.Fixture.NonInheritedAttributeIsNotInherited();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NonInheritedAttributeIsNotInherited:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesTypeFilterWorks:static start.*/
                GetCustomAttributesTypeFilterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesTypeFilterWorks()", $t.Line = "524", $t));
                    t.Fixture.GetCustomAttributesTypeFilterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesTypeFilterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForOpenGenericClass:static start.*/
                GetCustomAttributesWorksForOpenGenericClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForOpenGenericClass()", $t.Line = "534", $t));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericClass();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForOpenGenericClass:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericClass:static start.*/
                GetCustomAttributesWorksForConstructedGenericClass: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForConstructedGenericClass()", $t.Line = "542", $t));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericClass();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericClass:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForOpenGenericInterface:static start.*/
                GetCustomAttributesWorksForOpenGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForOpenGenericInterface()", $t.Line = "550", $t));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForOpenGenericInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericInterface:static start.*/
                GetCustomAttributesWorksForConstructedGenericInterface: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetCustomAttributesWorksForConstructedGenericInterface()", $t.Line = "558", $t));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericInterface();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericInterface:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.AllSupportedScalarTypesCanBeUsedAsAttributeArguments:static start.*/
                AllSupportedScalarTypesCanBeUsedAsAttributeArguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AllSupportedScalarTypesCanBeUsedAsAttributeArguments()", $t.Line = "566", $t));
                    t.Fixture.AllSupportedScalarTypesCanBeUsedAsAttributeArguments();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.AllSupportedScalarTypesCanBeUsedAsAttributeArguments:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ArraysCanBeUsedAsAttributeArguments:static start.*/
                ArraysCanBeUsedAsAttributeArguments: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArraysCanBeUsedAsAttributeArguments()", $t.Line = "584", $t));
                    t.Fixture.ArraysCanBeUsedAsAttributeArguments();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ArraysCanBeUsedAsAttributeArguments:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NamedValuesEnumCanBeUsedAsAttributeArgument:static start.*/
                NamedValuesEnumCanBeUsedAsAttributeArgument: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamedValuesEnumCanBeUsedAsAttributeArgument()", $t.Line = "592", $t));
                    t.Fixture.NamedValuesEnumCanBeUsedAsAttributeArgument();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.NamedValuesEnumCanBeUsedAsAttributeArgument:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration:static start.*/
                PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration()", $t.Line = "599", $t));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration:static start.*/
                PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration()", $t.Line = "606", $t));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration:static start.*/
                PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration()", $t.Line = "613", $t));
                    t.Fixture.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.FieldsCanBeAssignedInAttributeDeclaration:static start.*/
                FieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FieldsCanBeAssignedInAttributeDeclaration()", $t.Line = "620", $t));
                    t.Fixture.FieldsCanBeAssignedInAttributeDeclaration();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.FieldsCanBeAssignedInAttributeDeclaration:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CreatingAttributeWithNamedConstructorWorks:static start.*/
                CreatingAttributeWithNamedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAttributeWithNamedConstructorWorks()", $t.Line = "627", $t));
                    t.Fixture.CreatingAttributeWithNamedConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CreatingAttributeWithNamedConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CreatingAttributeWithInlineCodeConstructorWorks:static start.*/
                CreatingAttributeWithInlineCodeConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingAttributeWithInlineCodeConstructorWorks()", $t.Line = "634", $t));
                    t.Fixture.CreatingAttributeWithInlineCodeConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.CreatingAttributeWithInlineCodeConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved:static start.*/
                ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved()", $t.Line = "641", $t));
                    t.Fixture.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Reflection.TypeAttributeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/TypeAttributeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeAttributeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypedArray", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.TypedArray)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray.TestConstantValues:static start.*/
                TestConstantValues: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.TypedArray).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypedArray, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestConstantValues()", $t.Line = "16", $t));
                    t.Fixture.TestConstantValues();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray.TestConstantValues:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.TypedArray", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Constants.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypedArray end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeIsWorksForReferenceTypes:static start.*/
                TypeIsWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeIsWorksForReferenceTypes()", $t.Line = "206", $t));
                    t.Fixture.TypeIsWorksForReferenceTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeIsWorksForReferenceTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeAsWorksForReferenceTypes:static start.*/
                TypeAsWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeAsWorksForReferenceTypes()", $t.Line = "349", $t));
                    t.Fixture.TypeAsWorksForReferenceTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeAsWorksForReferenceTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.CastWorksForReferenceTypes:static start.*/
                CastWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastWorksForReferenceTypes()", $t.Line = "492", $t));
                    t.Fixture.CastWorksForReferenceTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.CastWorksForReferenceTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetTypeWorksOnObjects:static start.*/
                GetTypeWorksOnObjects: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeWorksOnObjects()", $t.Line = "635", $t));
                    t.Fixture.GetTypeWorksOnObjects();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetTypeWorksOnObjects:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetTypeOnNullInstanceThrowsException:static start.*/
                GetTypeOnNullInstanceThrowsException: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetTypeOnNullInstanceThrowsException()", $t.Line = "649", $t));
                    t.Fixture.GetTypeOnNullInstanceThrowsException();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetTypeOnNullInstanceThrowsException:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric:static start.*/
                CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric()", $t.Line = "662", $t));
                    t.Fixture.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeCheckForSubTypeOfGenericType:static start.*/
                TypeCheckForSubTypeOfGenericType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeCheckForSubTypeOfGenericType()", $t.Line = "704", $t));
                    t.Fixture.TypeCheckForSubTypeOfGenericType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.TypeCheckForSubTypeOfGenericType:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/TypeSystemLanguageSupportTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemLanguageSupportTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.FullNamePropertyReturnsTheNameWithTheNamespace:static start.*/
                FullNamePropertyReturnsTheNameWithTheNamespace: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FullNamePropertyReturnsTheNameWithTheNamespace()", $t.Line = "272", $t));
                    t.Fixture.FullNamePropertyReturnsTheNameWithTheNamespace();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.FullNamePropertyReturnsTheNameWithTheNamespace:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName:static start.*/
                AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName()", $t.Line = "278", $t));
                    t.Fixture.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AssemblyPropertyWorks:static start.*/
                AssemblyPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AssemblyPropertyWorks()", $t.Line = "286", $t));
                    t.Fixture.AssemblyPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AssemblyPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NamespacePropertyReturnsTheNamespaceWithoutTheName:static start.*/
                NamespacePropertyReturnsTheNamespaceWithoutTheName: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamespacePropertyReturnsTheNamespaceWithoutTheName()", $t.Line = "298", $t));
                    t.Fixture.NamespacePropertyReturnsTheNamespaceWithoutTheName();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NamespacePropertyReturnsTheNamespaceWithoutTheName:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks:static start.*/
                InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks()", $t.Line = "305", $t));
                    t.Fixture.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NamePropertyRemovesTheNamespace:static start.*/
                NamePropertyRemovesTheNamespace: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NamePropertyRemovesTheNamespace()", $t.Line = "315", $t));
                    t.Fixture.NamePropertyRemovesTheNamespace();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NamePropertyRemovesTheNamespace:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GettingBaseTypeWorks:static start.*/
                GettingBaseTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingBaseTypeWorks()", $t.Line = "323", $t));
                    t.Fixture.GettingBaseTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GettingBaseTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GettingImplementedInterfacesWorks:static start.*/
                GettingImplementedInterfacesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingImplementedInterfacesWorks()", $t.Line = "331", $t));
                    t.Fixture.GettingImplementedInterfacesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GettingImplementedInterfacesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfAnOpenGenericClassWorks:static start.*/
                TypeOfAnOpenGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfAnOpenGenericClassWorks()", $t.Line = "342", $t));
                    t.Fixture.TypeOfAnOpenGenericClassWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfAnOpenGenericClassWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfAnOpenGenericInterfaceWorks:static start.*/
                TypeOfAnOpenGenericInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfAnOpenGenericInterfaceWorks()", $t.Line = "348", $t));
                    t.Fixture.TypeOfAnOpenGenericInterfaceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfAnOpenGenericInterfaceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfInstantiatedGenericClassWorks:static start.*/
                TypeOfInstantiatedGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfInstantiatedGenericClassWorks()", $t.Line = "354", $t));
                    t.Fixture.TypeOfInstantiatedGenericClassWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfInstantiatedGenericClassWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfInstantiatedGenericInterfaceWorks:static start.*/
                TypeOfInstantiatedGenericInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfInstantiatedGenericInterfaceWorks()", $t.Line = "360", $t));
                    t.Fixture.TypeOfInstantiatedGenericInterfaceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfInstantiatedGenericInterfaceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance:static start.*/
                ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance()", $t.Line = "366", $t));
                    t.Fixture.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AccessingAStaticMemberInAGenericClassWorks:static start.*/
                AccessingAStaticMemberInAGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AccessingAStaticMemberInAGenericClassWorks()", $t.Line = "376", $t));
                    t.Fixture.AccessingAStaticMemberInAGenericClassWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AccessingAStaticMemberInAGenericClassWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfNestedGenericClassWorks:static start.*/
                TypeOfNestedGenericClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypeOfNestedGenericClassWorks()", $t.Line = "384", $t));
                    t.Fixture.TypeOfNestedGenericClassWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.TypeOfNestedGenericClassWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.BaseTypeAndImplementedInterfacesForGenericTypeWorks:static start.*/
                BaseTypeAndImplementedInterfacesForGenericTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BaseTypeAndImplementedInterfacesForGenericTypeWorks()", $t.Line = "390", $t));
                    t.Fixture.BaseTypeAndImplementedInterfacesForGenericTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.BaseTypeAndImplementedInterfacesForGenericTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsAbstractWorks:static start.*/
                IsAbstractWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsAbstractWorks()", $t.Line = "397", $t));
                    t.Fixture.IsAbstractWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsAbstractWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericTypeWorks:static start.*/
                IsGenericTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericTypeWorks()", $t.Line = "410", $t));
                    t.Fixture.IsGenericTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedWorks:static start.*/
                IsNestedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNestedWorks()", $t.Line = "422", $t));
                    Bridge.ClientTest.Reflection.TypeSystemTests.IsNestedWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsPublicWorks:static start.*/
                IsPublicWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsPublicWorks()", $t.Line = "431", $t));
                    t.Fixture.IsPublicWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsPublicWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedPublicWorks:static start.*/
                IsNestedPublicWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNestedPublicWorks()", $t.Line = "447", $t));
                    t.Fixture.IsNestedPublicWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedPublicWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedPrivateWorks:static start.*/
                IsNestedPrivateWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNestedPrivateWorks()", $t.Line = "464", $t));
                    t.Fixture.IsNestedPrivateWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedPrivateWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedFamilyWorks:static start.*/
                IsNestedFamilyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNestedFamilyWorks()", $t.Line = "481", $t));
                    t.Fixture.IsNestedFamilyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedFamilyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedAssemblyWorks:static start.*/
                IsNestedAssemblyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNestedAssemblyWorks()", $t.Line = "500", $t));
                    t.Fixture.IsNestedAssemblyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNestedAssemblyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNotPublicWorks:static start.*/
                IsNotPublicWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsNotPublicWorks()", $t.Line = "519", $t));
                    t.Fixture.IsNotPublicWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsNotPublicWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsSealedWorks:static start.*/
                IsSealedWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsSealedWorks()", $t.Line = "536", $t));
                    t.Fixture.IsSealedWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsSealedWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AttributesWorks:static start.*/
                AttributesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "AttributesWorks()", $t.Line = "548", $t));
                    t.Fixture.AttributesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.AttributesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ContainsGenericParametersWorks:static start.*/
                ContainsGenericParametersWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsGenericParametersWorks()", $t.Line = "563", $t));
                    Bridge.ClientTest.Reflection.TypeSystemTests.ContainsGenericParametersWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ContainsGenericParametersWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DeclaringTypeWorks:static start.*/
                DeclaringTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DeclaringTypeWorks()", $t.Line = "581", $t));
                    Bridge.ClientTest.Reflection.TypeSystemTests.DeclaringTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DeclaringTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericParameterWorks:static start.*/
                IsGenericParameterWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, 58, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericParameterWorks()", $t.Line = "609", $t));
                    Bridge.ClientTest.Reflection.TypeSystemTests.IsGenericParameterWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericParameterWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumNamesWorks:static start.*/
                GetEnumNamesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumNamesWorks()", $t.Line = "654", $t));
                    t.Fixture.GetEnumNamesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumNamesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumNameWorks:static start.*/
                GetEnumNameWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumNameWorks()", $t.Line = "666", $t));
                    t.Fixture.GetEnumNameWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumNameWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumValuesWorks:static start.*/
                GetEnumValuesWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumValuesWorks()", $t.Line = "700", $t));
                    t.Fixture.GetEnumValuesWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumValuesWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumUnderlyingTypeWorks:static start.*/
                GetEnumUnderlyingTypeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumUnderlyingTypeWorks()", $t.Line = "712", $t));
                    t.Fixture.GetEnumUnderlyingTypeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetEnumUnderlyingTypeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericTypeDefinitionWorksAsExpected:static start.*/
                IsGenericTypeDefinitionWorksAsExpected: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsGenericTypeDefinitionWorksAsExpected()", $t.Line = "725", $t));
                    t.Fixture.IsGenericTypeDefinitionWorksAsExpected();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsGenericTypeDefinitionWorksAsExpected:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes:static start.*/
                GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes()", $t.Line = "737", $t));
                    t.Fixture.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull:static start.*/
                GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull()", $t.Line = "749", $t));
                    t.Fixture.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull:static start.*/
                GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull()", $t.Line = "761", $t));
                    t.Fixture.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsAssignableFromWorks:static start.*/
                IsAssignableFromWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsAssignableFromWorks()", $t.Line = "904", $t));
                    t.Fixture.IsAssignableFromWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsAssignableFromWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsSubclassOfWorks:static start.*/
                IsSubclassOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsSubclassOfWorks()", $t.Line = "1122", $t));
                    t.Fixture.IsSubclassOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsSubclassOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsClassWorks:static start.*/
                IsClassWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsClassWorks()", $t.Line = "1139", $t));
                    t.Fixture.IsClassWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsClassWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsEnumWorks:static start.*/
                IsEnumWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsEnumWorks()", $t.Line = "1152", $t));
                    t.Fixture.IsEnumWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsEnumWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsArrayWorks:static start.*/
                IsArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsArrayWorks()", $t.Line = "1165", $t));
                    t.Fixture.IsArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsFlagsWorks:static start.*/
                IsFlagsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsFlagsWorks()", $t.Line = "1177", $t));
                    t.Fixture.IsFlagsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsFlagsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsInterfaceWorks:static start.*/
                IsInterfaceWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInterfaceWorks()", $t.Line = "1190", $t));
                    t.Fixture.IsInterfaceWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsInterfaceWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsInstanceOfTypeWorksForReferenceTypes:static start.*/
                IsInstanceOfTypeWorksForReferenceTypes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IsInstanceOfTypeWorksForReferenceTypes()", $t.Line = "1203", $t));
                    t.Fixture.IsInstanceOfTypeWorksForReferenceTypes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.IsInstanceOfTypeWorksForReferenceTypes:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseUnnamedConstructorWithoutArgumentsWorks:static start.*/
                InvokingBaseUnnamedConstructorWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseUnnamedConstructorWithoutArgumentsWorks()", $t.Line = "1395", $t));
                    t.Fixture.InvokingBaseUnnamedConstructorWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseUnnamedConstructorWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseUnnamedConstructorWithArgumentsWorks:static start.*/
                InvokingBaseUnnamedConstructorWithArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseUnnamedConstructorWithArgumentsWorks()", $t.Line = "1425", $t));
                    t.Fixture.InvokingBaseUnnamedConstructorWithArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseUnnamedConstructorWithArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseNamedConstructorWithoutArgumentsWorks:static start.*/
                InvokingBaseNamedConstructorWithoutArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseNamedConstructorWithoutArgumentsWorks()", $t.Line = "1455", $t));
                    t.Fixture.InvokingBaseNamedConstructorWithoutArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseNamedConstructorWithoutArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseNamedConstructorWithArgumentsWorks:static start.*/
                InvokingBaseNamedConstructorWithArgumentsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseNamedConstructorWithArgumentsWorks()", $t.Line = "1485", $t));
                    t.Fixture.InvokingBaseNamedConstructorWithArgumentsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseNamedConstructorWithArgumentsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks:static start.*/
                ConstructingInstanceWithNamedConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingInstanceWithNamedConstructorWorks()", $t.Line = "1525", $t));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks2:static start.*/
                ConstructingInstanceWithNamedConstructorWorks2: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructingInstanceWithNamedConstructorWorks2()", $t.Line = "1534", $t));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks2();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks2:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseMethodWorks:static start.*/
                InvokingBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingBaseMethodWorks()", $t.Line = "1585", $t));
                    t.Fixture.InvokingBaseMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingBaseMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingGenericBaseMethodWorks:static start.*/
                InvokingGenericBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InvokingGenericBaseMethodWorks()", $t.Line = "1591", $t));
                    t.Fixture.InvokingGenericBaseMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InvokingGenericBaseMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionWorks:static start.*/
                MethodGroupConversionWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionWorks()", $t.Line = "1677", $t));
                    t.Fixture.MethodGroupConversionWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnGenericMethodWorks:static start.*/
                MethodGroupConversionOnGenericMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnGenericMethodWorks()", $t.Line = "1684", $t));
                    t.Fixture.MethodGroupConversionOnGenericMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnGenericMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnBaseMethodWorks:static start.*/
                MethodGroupConversionOnBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnBaseMethodWorks()", $t.Line = "1691", $t));
                    t.Fixture.MethodGroupConversionOnBaseMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnBaseMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnGenericBaseMethodWorks:static start.*/
                MethodGroupConversionOnGenericBaseMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MethodGroupConversionOnGenericBaseMethodWorks()", $t.Line = "1698", $t));
                    t.Fixture.MethodGroupConversionOnGenericBaseMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.MethodGroupConversionOnGenericBaseMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument:static start.*/
                ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument()", $t.Line = "1705", $t));
                    t.Fixture.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.FalseIsFunctionShouldReturnFalse:static start.*/
                FalseIsFunctionShouldReturnFalse: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FalseIsFunctionShouldReturnFalse()", $t.Line = "1711", $t));
                    t.Fixture.FalseIsFunctionShouldReturnFalse();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.FalseIsFunctionShouldReturnFalse:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingUndefinedToOtherTypeShouldReturnUndefined:static start.*/
                CastingUndefinedToOtherTypeShouldReturnUndefined: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingUndefinedToOtherTypeShouldReturnUndefined()", $t.Line = "1717", $t));
                    t.Fixture.CastingUndefinedToOtherTypeShouldReturnUndefined();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingUndefinedToOtherTypeShouldReturnUndefined:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NonSerializableTypeCanInheritFromSerializableType:static start.*/
                NonSerializableTypeCanInheritFromSerializableType: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NonSerializableTypeCanInheritFromSerializableType()", $t.Line = "1723", $t));
                    t.Fixture.NonSerializableTypeCanInheritFromSerializableType();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.NonSerializableTypeCanInheritFromSerializableType:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InheritingFromRecordWorks:static start.*/
                InheritingFromRecordWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InheritingFromRecordWorks()", $t.Line = "1731", $t));
                    t.Fixture.InheritingFromRecordWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InheritingFromRecordWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode:static start.*/
                InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode()", $t.Line = "1738", $t));
                    t.Fixture.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.StaticGetTypeMethodWorks:static start.*/
                StaticGetTypeMethodWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticGetTypeMethodWorks()", $t.Line = "1747", $t));
                    t.Fixture.StaticGetTypeMethodWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.StaticGetTypeMethodWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.StaticGetTypeMethodWithGenericsWorks:static start.*/
                StaticGetTypeMethodWithGenericsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticGetTypeMethodWithGenericsWorks()", $t.Line = "1757", $t));
                    t.Fixture.StaticGetTypeMethodWithGenericsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.StaticGetTypeMethodWithGenericsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingToNamedValuesEnumCastsToString:static start.*/
                CastingToNamedValuesEnumCastsToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingToNamedValuesEnumCastsToString()", $t.Line = "1806", $t));
                    t.Fixture.CastingToNamedValuesEnumCastsToString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingToNamedValuesEnumCastsToString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingToImportedNamedValuesEnumCastsToString:static start.*/
                CastingToImportedNamedValuesEnumCastsToString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingToImportedNamedValuesEnumCastsToString()", $t.Line = "1826", $t));
                    t.Fixture.CastingToImportedNamedValuesEnumCastsToString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.CastingToImportedNamedValuesEnumCastsToString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DefaultValueOfNamedValuesEnumIsNull:static start.*/
                DefaultValueOfNamedValuesEnumIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfNamedValuesEnumIsNull()", $t.Line = "1842", $t));
                    t.Fixture.DefaultValueOfNamedValuesEnumIsNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DefaultValueOfNamedValuesEnumIsNull:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DefaultValueOfImportedNamedValuesEnumIsNull:static start.*/
                DefaultValueOfImportedNamedValuesEnumIsNull: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueOfImportedNamedValuesEnumIsNull()", $t.Line = "1849", $t));
                    t.Fixture.DefaultValueOfImportedNamedValuesEnumIsNull();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.DefaultValueOfImportedNamedValuesEnumIsNull:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Reflection.TypeSystemTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Reflection/TypeSystemTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+TypeSystemTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetUint16ArrayWorks:static start.*/
                SetUint16ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetUint16ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetUint16ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetUint16ArrayWithOffsetWorks:static start.*/
                SetUint16ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint16ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetUint16ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetUint16ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Uint16ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Uint16ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint16ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "36", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "98", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "104", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "110", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "117", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "123", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "129", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "135", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.TryParseWorks_SPI_1592:static start.*/
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "148", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.TryParseWorks_SPI_1592:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "181", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "193", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "199", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "206", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "214", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "223", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "237", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "245", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.UInt16Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/UInt16Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt16Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetUint32ArrayWorks:static start.*/
                SetUint32ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetUint32ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetUint32ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetUint32ArrayWithOffsetWorks:static start.*/
                SetUint32ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint32ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetUint32ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetUint32ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Uint32ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Uint32ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint32ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "11", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "36", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "92", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "98", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "104", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "110", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "117", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "123", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "129", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "135", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.TryParseWorks_SPI_1592:static start.*/
                TryParseWorks_SPI_1592: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks_SPI_1592()", $t.Line = "148", $t));
                    t.Fixture.TryParseWorks_SPI_1592();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.TryParseWorks_SPI_1592:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "177", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "189", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "195", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "202", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "210", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "219", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "233", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "241", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.UInt32Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/UInt32Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt32Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.TypePropertiesAreCorrect_SPI_1717:static start.*/
                TypePropertiesAreCorrect_SPI_1717: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1717()", $t.Line = "12", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1717();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.TypePropertiesAreCorrect_SPI_1717:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.MinMaxValuesAreCorrect:static start.*/
                MinMaxValuesAreCorrect: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "MinMaxValuesAreCorrect()", $t.Line = "35", $t));
                    t.Fixture.MinMaxValuesAreCorrect();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.MinMaxValuesAreCorrect:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CastsWork:static start.*/
                CastsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastsWork()", $t.Line = "42", $t));
                    t.Fixture.CastsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CastsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.OverflowWorks:static start.*/
                OverflowWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "OverflowWorks()", $t.Line = "83", $t));
                    t.Fixture.OverflowWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.OverflowWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CombinedTypesOperationsWork:static start.*/
                CombinedTypesOperationsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CombinedTypesOperationsWork()", $t.Line = "103", $t));
                    t.Fixture.CombinedTypesOperationsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CombinedTypesOperationsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DefaultValueIs0:static start.*/
                DefaultValueIs0: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultValueIs0()", $t.Line = "146", $t));
                    t.Fixture.DefaultValueIs0();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DefaultValueIs0:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DefaultConstructorReturnsZero:static start.*/
                DefaultConstructorReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DefaultConstructorReturnsZero()", $t.Line = "152", $t));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DefaultConstructorReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CreatingInstanceReturnsZero:static start.*/
                CreatingInstanceReturnsZero: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CreatingInstanceReturnsZero()", $t.Line = "158", $t));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CreatingInstanceReturnsZero:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ConstantsWork:static start.*/
                ConstantsWork: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstantsWork()", $t.Line = "164", $t));
                    t.Fixture.ConstantsWork();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ConstantsWork:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.FormatWorks:static start.*/
                FormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "FormatWorks()", $t.Line = "170", $t));
                    t.Fixture.FormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.FormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithFormatWorks:static start.*/
                ToStringWithFormatWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatWorks()", $t.Line = "176", $t));
                    t.Fixture.ToStringWithFormatWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithFormatWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithFormatAndProviderWorks:static start.*/
                ToStringWithFormatAndProviderWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithFormatAndProviderWorks()", $t.Line = "182", $t));
                    t.Fixture.ToStringWithFormatAndProviderWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithFormatAndProviderWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IFormattableToStringWorks:static start.*/
                IFormattableToStringWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IFormattableToStringWorks()", $t.Line = "188", $t));
                    t.Fixture.IFormattableToStringWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IFormattableToStringWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CastingOfLargeValuesToUInt64Works_SPI_1591:static start.*/
                CastingOfLargeValuesToUInt64Works_SPI_1591: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CastingOfLargeValuesToUInt64Works_SPI_1591()", $t.Line = "201", $t));
                    t.Fixture.CastingOfLargeValuesToUInt64Works_SPI_1591();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CastingOfLargeValuesToUInt64Works_SPI_1591:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DivisionOfLargeUInt64Works:static start.*/
                DivisionOfLargeUInt64Works: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "DivisionOfLargeUInt64Works()", $t.Line = "210", $t));
                    t.Fixture.DivisionOfLargeUInt64Works();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.DivisionOfLargeUInt64Works:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.TryParseWorks:static start.*/
                TryParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TryParseWorks()", $t.Line = "217", $t));
                    t.Fixture.TryParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.TryParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ParseWorks:static start.*/
                ParseWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ParseWorks()", $t.Line = "262", $t));
                    t.Fixture.ParseWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ParseWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithoutRadixWorks:static start.*/
                ToStringWithoutRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithoutRadixWorks()", $t.Line = "277", $t));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithoutRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithRadixWorks:static start.*/
                ToStringWithRadixWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ToStringWithRadixWorks()", $t.Line = "283", $t));
                    t.Fixture.ToStringWithRadixWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.ToStringWithRadixWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.GetHashCodeWorks:static start.*/
                GetHashCodeWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetHashCodeWorks()", $t.Line = "290", $t));
                    t.Fixture.GetHashCodeWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.GetHashCodeWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.EqualsWorks:static start.*/
                EqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EqualsWorks()", $t.Line = "298", $t));
                    t.Fixture.EqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.EqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IEquatableEqualsWorks:static start.*/
                IEquatableEqualsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEquatableEqualsWorks()", $t.Line = "307", $t));
                    t.Fixture.IEquatableEqualsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IEquatableEqualsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CompareToWorks:static start.*/
                CompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CompareToWorks()", $t.Line = "321", $t));
                    t.Fixture.CompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.CompareToWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IComparableCompareToWorks:static start.*/
                IComparableCompareToWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IComparableCompareToWorks()", $t.Line = "329", $t));
                    t.Fixture.IComparableCompareToWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.IComparableCompareToWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.SimpleTypes.UInt64Tests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/SimpleTypes/UInt64Tests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UInt64Tests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "30", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "38", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "48", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "58", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "68", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "78", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "95", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "101", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "108", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetUint8ArrayWorks:static start.*/
                SetUint8ArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ArrayWorks()", $t.Line = "117", $t));
                    t.Fixture.SetUint8ArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetUint8ArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetUint8ArrayWithOffsetWorks:static start.*/
                SetUint8ArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ArrayWithOffsetWorks()", $t.Line = "125", $t));
                    t.Fixture.SetUint8ArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetUint8ArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "133", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "141", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "149", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "159", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "170", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "178", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "186", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "193", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "202", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "211", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "225", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IEnumerableGetEnumeratorWorks:static start.*/
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IEnumerableGetEnumeratorWorks()", $t.Line = "239", $t));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IEnumerableGetEnumeratorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionMethodsWork_SPI_1559:static start.*/
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559()", $t.Line = "252", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IListMethodsWork_SPI_1559:static start.*/
                IListMethodsWork_SPI_1559: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559()", $t.Line = "265", $t));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IListMethodsWork_SPI_1559:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "298", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "305", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "312", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Uint8ArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Uint8ArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1560:static start.*/
                TypePropertiesAreCorrect_SPI_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TypePropertiesAreCorrect_SPI_1560()", $t.Line = "30", $t));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1560();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1560:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.LengthConstructorWorks:static start.*/
                LengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthConstructorWorks()", $t.Line = "38", $t));
                    t.Fixture.LengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.LengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ConstructorFromIntWorks:static start.*/
                ConstructorFromIntWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromIntWorks()", $t.Line = "46", $t));
                    t.Fixture.ConstructorFromIntWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ConstructorFromIntWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ConstructorFromUint8ArrayWorks_SPI_TODO:static start.*/
                ConstructorFromUint8ArrayWorks_SPI_TODO: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ConstructorFromUint8ArrayWorks_SPI_TODO()", $t.Line = "56", $t));
                    t.Fixture.ConstructorFromUint8ArrayWorks_SPI_TODO();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ConstructorFromUint8ArrayWorks_SPI_TODO:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.CopyConstructorWorks:static start.*/
                CopyConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "CopyConstructorWorks()", $t.Line = "66", $t));
                    t.Fixture.CopyConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.CopyConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferConstructorWorks:static start.*/
                ArrayBufferConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferConstructorWorks()", $t.Line = "76", $t));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferWithOffsetConstructorWorks:static start.*/
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetConstructorWorks()", $t.Line = "86", $t));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferWithOffsetConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static start.*/
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ArrayBufferWithOffsetAndLengthConstructorWorks()", $t.Line = "96", $t));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.StaticBytesPerElementWorks:static start.*/
                StaticBytesPerElementWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "StaticBytesPerElementWorks()", $t.Line = "113", $t));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.StaticBytesPerElementWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.LengthWorks:static start.*/
                LengthWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "LengthWorks()", $t.Line = "119", $t));
                    t.Fixture.LengthWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.LengthWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IndexingWorks:static start.*/
                IndexingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexingWorks()", $t.Line = "126", $t));
                    t.Fixture.IndexingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IndexingWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetUint8ClampedArrayWorks:static start.*/
                SetUint8ClampedArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ClampedArrayWorks()", $t.Line = "155", $t));
                    t.Fixture.SetUint8ClampedArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetUint8ClampedArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetUint8ClampedArrayWithOffsetWorks:static start.*/
                SetUint8ClampedArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetUint8ClampedArrayWithOffsetWorks()", $t.Line = "163", $t));
                    t.Fixture.SetUint8ClampedArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetUint8ClampedArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetNormalArrayWorks:static start.*/
                SetNormalArrayWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWorks()", $t.Line = "171", $t));
                    t.Fixture.SetNormalArrayWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetNormalArrayWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetNormalArrayWithOffsetWorks:static start.*/
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SetNormalArrayWithOffsetWorks()", $t.Line = "179", $t));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SetNormalArrayWithOffsetWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SubarrayWithBeginWorks:static start.*/
                SubarrayWithBeginWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginWorks()", $t.Line = "187", $t));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SubarrayWithBeginWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SubarrayWithBeginAndEndWorks:static start.*/
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "SubarrayWithBeginAndEndWorks()", $t.Line = "197", $t));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.SubarrayWithBeginAndEndWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.BufferPropertyWorks:static start.*/
                BufferPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "BufferPropertyWorks()", $t.Line = "208", $t));
                    t.Fixture.BufferPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.BufferPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ByteOffsetPropertyWorks:static start.*/
                ByteOffsetPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteOffsetPropertyWorks()", $t.Line = "216", $t));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ByteOffsetPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ByteLengthPropertyWorks:static start.*/
                ByteLengthPropertyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ByteLengthPropertyWorks()", $t.Line = "224", $t));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ByteLengthPropertyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IndexOfWorks:static start.*/
                IndexOfWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IndexOfWorks()", $t.Line = "231", $t));
                    t.Fixture.IndexOfWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IndexOfWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ContainsWorks:static start.*/
                ContainsWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ContainsWorks()", $t.Line = "240", $t));
                    t.Fixture.ContainsWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ContainsWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ForeachWorks_SPI_1401:static start.*/
                ForeachWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ForeachWorks_SPI_1401()", $t.Line = "249", $t));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ForeachWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.GetEnumeratorWorks_SPI_1401:static start.*/
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetEnumeratorWorks_SPI_1401()", $t.Line = "263", $t));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.GetEnumeratorWorks_SPI_1401:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionMethodsWork_SPI_1559_1560:static start.*/
                ICollectionMethodsWork_SPI_1559_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionMethodsWork_SPI_1559_1560()", $t.Line = "277", $t));
                    t.Fixture.ICollectionMethodsWork_SPI_1559_1560();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionMethodsWork_SPI_1559_1560:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IListMethodsWork_SPI_1559_1560:static start.*/
                IListMethodsWork_SPI_1559_1560: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListMethodsWork_SPI_1559_1560()", $t.Line = "290", $t));
                    t.Fixture.IListMethodsWork_SPI_1559_1560();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IListMethodsWork_SPI_1559_1560:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IListIsReadOnlyWorks:static start.*/
                IListIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "IListIsReadOnlyWorks()", $t.Line = "323", $t));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.IListIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionIsReadOnlyWorks:static start.*/
                ICollectionIsReadOnlyWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionIsReadOnlyWorks()", $t.Line = "330", $t));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionIsReadOnlyWorks:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionCopyTo:static start.*/
                ICollectionCopyTo: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "ICollectionCopyTo()", $t.Line = "337", $t));
                    t.Fixture.ICollectionCopyTo();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.ICollectionCopyTo:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/Uint8ClampedArrayTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+Uint8ClampedArrayTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestInt32:static start.*/
                TestInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInt32()", $t.Line = "563", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestUInt32:static start.*/
                TestUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestUInt32()", $t.Line = "615", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestLong:static start.*/
                TestLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLong()", $t.Line = "667", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestULong:static start.*/
                TestULong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestULong()", $t.Line = "719", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestULong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.TestULong:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CheckedUncheckedTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedInsideCheckedTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestInt32:static start.*/
                TestInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInt32()", $t.Line = "365", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestUInt32:static start.*/
                TestUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestUInt32()", $t.Line = "414", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestLong:static start.*/
                TestLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLong()", $t.Line = "463", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestULong:static start.*/
                TestULong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestULong()", $t.Line = "512", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestULong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.TestULong:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CheckedUncheckedTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UncheckedTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingDecodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingDecodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.Decode:static start.*/
                Decode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode()", $t.Line = "74", $t));
                    t.Fixture.Decode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.Decode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.Decode_InvalidBytes:static start.*/
                Decode_InvalidBytes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingDecodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode_InvalidBytes()", $t.Line = "137", $t));
                    t.Fixture.Decode_InvalidBytes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.Decode_InvalidBytes:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UnicodeEncodingDecodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UnicodeEncoding/UnicodeEncodingDecodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingDecodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingEncodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingEncodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.Encode:static start.*/
                Encode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode()", $t.Line = "56", $t));
                    t.Fixture.Encode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.Encode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.Encode_InvalidChars:static start.*/
                Encode_InvalidChars: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingEncodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode_InvalidChars()", $t.Line = "108", $t));
                    t.Fixture.Encode_InvalidChars();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.Encode_InvalidChars:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UnicodeEncodingEncodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UnicodeEncoding/UnicodeEncodingEncodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingEncodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingGetMaxTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingGetMaxTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetMaxByteCount:static start.*/
                GetMaxByteCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxByteCount()", $t.Line = "12", $t));
                    t.Fixture.GetMaxByteCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetMaxByteCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetMaxCharCount:static start.*/
                GetMaxCharCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UnicodeEncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UnicodeEncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxCharCount()", $t.Line = "31", $t));
                    t.Fixture.GetMaxCharCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetMaxCharCount:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UnicodeEncodingGetMaxTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UnicodeEncoding/UnicodeEncodingGetMaxTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UnicodeEncodingGetMaxTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingDecodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingDecodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.Decode:static start.*/
                Decode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode()", $t.Line = "49", $t));
                    t.Fixture.Decode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.Decode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.Decode_InvalidBytes:static start.*/
                Decode_InvalidBytes: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingDecodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode_InvalidBytes()", $t.Line = "96", $t));
                    t.Fixture.Decode_InvalidBytes();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.Decode_InvalidBytes:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF32EncodingDecodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF32Encoding/UTF32EncodingDecodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingDecodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingEncodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingEncodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.Encode:static start.*/
                Encode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode()", $t.Line = "49", $t));
                    t.Fixture.Encode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.Encode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.Encode_InvalidChars:static start.*/
                Encode_InvalidChars: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingEncodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode_InvalidChars()", $t.Line = "96", $t));
                    t.Fixture.Encode_InvalidChars();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.Encode_InvalidChars:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF32EncodingEncodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF32Encoding/UTF32EncodingEncodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingEncodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingGetMaxTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingGetMaxTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetMaxByteCount:static start.*/
                GetMaxByteCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxByteCount()", $t.Line = "12", $t));
                    t.Fixture.GetMaxByteCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetMaxByteCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetMaxCharCount:static start.*/
                GetMaxCharCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF32EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF32EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxCharCount()", $t.Line = "30", $t));
                    t.Fixture.GetMaxCharCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetMaxCharCount:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF32EncodingGetMaxTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF32Encoding/UTF32EncodingGetMaxTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF32EncodingGetMaxTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingDecodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingDecodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests.Decode:static start.*/
                Decode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode()", $t.Line = "104", $t));
                    t.Fixture.Decode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests.Decode:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF7EncodingDecodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF7Encoding/UTF7EncodingDecodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingDecodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingEncodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingEncodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.Encode:static start.*/
                Encode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode()", $t.Line = "62", $t));
                    t.Fixture.Encode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.Encode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.EncodeAdvanced:static start.*/
                EncodeAdvanced: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "EncodeAdvanced()", $t.Line = "108", $t));
                    t.Fixture.EncodeAdvanced();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.EncodeAdvanced:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF7EncodingEncodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF7Encoding/UTF7EncodingEncodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingEncodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingGetMaxTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingGetMaxTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetMaxByteCount:static start.*/
                GetMaxByteCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxByteCount()", $t.Line = "12", $t));
                    t.Fixture.GetMaxByteCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetMaxByteCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetMaxCharCount:static start.*/
                GetMaxCharCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF7EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF7EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxCharCount()", $t.Line = "24", $t));
                    t.Fixture.GetMaxCharCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetMaxCharCount:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF7EncodingGetMaxTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF7Encoding/UTF7EncodingGetMaxTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF7EncodingGetMaxTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingDecodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingDecodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests.Decode:static start.*/
                Decode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingDecodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingDecodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Decode()", $t.Line = "104", $t));
                    t.Fixture.Decode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests.Decode:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF8EncodingDecodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF8Encoding/UTF8EncodingDecodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingDecodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingEncodeTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.Encode:static start.*/
                Encode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests, 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode()", $t.Line = "117", $t));
                    t.Fixture.Encode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.Encode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetBytes_ValidASCIIUnicode:static start.*/
                GetBytes_ValidASCIIUnicode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingEncodeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetBytes_ValidASCIIUnicode()", $t.Line = "178", $t));
                    Bridge.ClientTest.Text.UTF8EncodingEncodeTests.GetBytes_ValidASCIIUnicode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetBytes_ValidASCIIUnicode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetBytes_InvalidASCIIUnicode:static start.*/
                GetBytes_InvalidASCIIUnicode: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingEncodeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetBytes_InvalidASCIIUnicode()", $t.Line = "196", $t));
                    Bridge.ClientTest.Text.UTF8EncodingEncodeTests.GetBytes_InvalidASCIIUnicode();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetBytes_InvalidASCIIUnicode:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.Encode_InvalidChars:static start.*/
                Encode_InvalidChars: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingEncodeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingEncodeTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Encode_InvalidChars()", $t.Line = "214", $t));
                    t.Fixture.Encode_InvalidChars();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.Encode_InvalidChars:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF8EncodingEncodeTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF8Encoding/UTF8EncodingEncodeTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingEncodeTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingGetMaxTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingGetMaxTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetMaxByteCount:static start.*/
                GetMaxByteCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxByteCount()", $t.Line = "12", $t));
                    t.Fixture.GetMaxByteCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetMaxByteCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetMaxCharCount:static start.*/
                GetMaxCharCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.UTF8EncodingGetMaxTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UTF8EncodingGetMaxTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GetMaxCharCount()", $t.Line = "26", $t));
                    t.Fixture.GetMaxCharCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetMaxCharCount:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Text.UTF8EncodingGetMaxTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Text/Encoding/UTF8Encoding/UTF8EncodingGetMaxTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+UTF8EncodingGetMaxTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests.GettingSettingAndDeletingWorks:static start.*/
                GettingSettingAndDeletingWorks: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "GettingSettingAndDeletingWorks()", $t.Line = "18", $t));
                    t.Fixture.GettingSettingAndDeletingWorks();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests.GettingSettingAndDeletingWorks:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.Collections.Generic.WeakMapTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/Collections/Native/WeakMapTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+WeakMapTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestInt32:static start.*/
                TestInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestInt32()", $t.Line = "773", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestUInt32:static start.*/
                TestUInt32: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestUInt32()", $t.Line = "819", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestUInt32();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestUInt32:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestLong:static start.*/
                TestLong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestLong()", $t.Line = "865", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestLong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestLong:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestULong:static start.*/
                TestULong: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestULong()", $t.Line = "911", $t));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestULong();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.TestULong:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/CheckedUncheckedTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+WithNoUncheckedKeywordTests end.*/

    /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests start.*/
    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests)],
        $kind: "nested class",
        statics: {
            methods: {
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.Synchronized_NewObject:static start.*/
                Synchronized_NewObject: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "Synchronized_NewObject()", $t.Line = "23", $t));
                    t.Fixture.Synchronized_NewObject();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.Synchronized_NewObject:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteChars:static start.*/
                WriteChars: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteChars()", $t.Line = "43", $t));
                    t.Fixture.WriteChars();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteChars:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullArray:static start.*/
                NullArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullArray()", $t.Line = "90", $t));
                    t.Fixture.NullArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NegativeOffset:static start.*/
                NegativeOffset: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeOffset()", $t.Line = "101", $t));
                    t.Fixture.NegativeOffset();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NegativeOffset:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NegativeCount:static start.*/
                NegativeCount: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NegativeCount()", $t.Line = "114", $t));
                    t.Fixture.NegativeCount();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NegativeCount:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteCustomLenghtStrings:static start.*/
                WriteCustomLenghtStrings: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteCustomLenghtStrings()", $t.Line = "127", $t));
                    t.Fixture.WriteCustomLenghtStrings();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteCustomLenghtStrings:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteToStreamWriter:static start.*/
                WriteToStreamWriter: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "WriteToStreamWriter()", $t.Line = "150", $t));
                    t.Fixture.WriteToStreamWriter();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.WriteToStreamWriter:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.TestWritingPastEndOfArray:static start.*/
                TestWritingPastEndOfArray: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "TestWritingPastEndOfArray()", $t.Line = "172", $t));
                    t.Fixture.TestWritingPastEndOfArray();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.TestWritingPastEndOfArray:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.VerifyWrittenString:static start.*/
                VerifyWrittenString: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "VerifyWrittenString()", $t.Line = "183", $t));
                    t.Fixture.VerifyWrittenString();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.VerifyWrittenString:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullStreamThrows:static start.*/
                NullStreamThrows: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullStreamThrows()", $t.Line = "208", $t));
                    t.Fixture.NullStreamThrows();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullStreamThrows:static end.*/

                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullNewLineAsync:static start.*/
                NullNewLineAsync: function (assert) {
                    var $t;
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IO.WriteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WriteTests, void 0, ($t = new Bridge.Test.Runtime.TestContext(), $t.Method = "NullNewLineAsync()", $t.Line = "220", $t));
                    t.Fixture.NullNewLineAsync();
                },
                /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.NullNewLineAsync:static end.*/


            }
        },
        fields: {
            context: null
        },
        methods: {
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.GetContext start.*/
            GetContext: function () {
                var $t;
                if (this.context == null) {
                    this.context = ($t = new Bridge.Test.Runtime.FixtureContext(), $t.Project = "Batch1", $t.ClassName = "Bridge.ClientTest.IO.WriteTests", $t.File = "file:///Z:/Users/stepanberesnev/Work/Bridge/Tests/Batch1/IO/StreamWriter/StreamWriter.WriteTests.cs", $t);
                }
                return this.context;
            },
            /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests.GetContext end.*/


        }
    });
    /*Bridge.Test.Runtime.BridgeClientTestRunner+WriteTests end.*/
});
